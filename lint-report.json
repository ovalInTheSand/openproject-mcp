[{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/constants/index.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/constants/index.ts - Application constants and configuration\r\n\r\n// Application metadata\r\nexport const APP_NAME = \"openproject-mcp\";\r\nexport const APP_VERSION = \"3.2.0\"; // Aligned with package.json\r\nexport const APP_DESCRIPTION = \"Professional MCP server for OpenProject API integration with enterprise project management capabilities\";\r\n\r\n// MCP Server configuration\r\nexport const MCP_SERVER_INFO = {\r\n  name: APP_NAME,\r\n  version: APP_VERSION,\r\n  description: APP_DESCRIPTION,\r\n  capabilities: {\r\n    tools: true,\r\n    resources: false,\r\n    prompts: false,\r\n  },\r\n};\r\n\r\n// HTTP defaults\r\nexport const DEFAULT_TIMEOUTS = {\r\n  API_REQUEST: 30000, // 30 seconds\r\n  CONNECTION: 10000,  // 10 seconds\r\n} as const;\r\n\r\n// Retry configuration\r\nexport const DEFAULT_RETRY_CONFIG = {\r\n  maxRetries: 3,\r\n  retryStatusCodes: [429, 500, 502, 503, 504],\r\n  retryDelay: 1000, // Base delay in milliseconds\r\n} as const;\r\n\r\n// OpenProject API endpoints\r\nexport const OP_API_ENDPOINTS = {\r\n  BASE: \"/api/v3\",\r\n  HEALTH: \"/api/v3\",\r\n  PROJECTS: \"/api/v3/projects\",\r\n  WORK_PACKAGES: \"/api/v3/work_packages\",\r\n  USERS: \"/api/v3/users\",\r\n  TYPES: \"/api/v3/types\",\r\n  STATUSES: \"/api/v3/statuses\",\r\n  PRIORITIES: \"/api/v3/priorities\",\r\n  VERSIONS: \"/api/v3/versions\",\r\n  QUERIES: \"/api/v3/queries\",\r\n  TIME_ENTRIES: \"/api/v3/time_entries\",\r\n  ATTACHMENTS: \"/api/v3/attachments\",\r\n  FORMS: \"/api/v3/work_packages/form\",\r\n} as const;\r\n\r\n// Default pagination\r\nexport const DEFAULT_PAGINATION = {\r\n  PAGE_SIZE: 20,\r\n  MAX_PAGE_SIZE: 100,\r\n  OFFSET: 0,\r\n} as const;\r\n\r\n// CORS configuration\r\nexport const DEFAULT_CORS_ORIGINS = [\r\n  \"https://claude.ai\",\r\n  \"https://app.claude.ai\",\r\n  \"http://localhost:3000\",\r\n  \"http://localhost:5173\",\r\n  \"http://localhost:8080\",\r\n] as const;\r\n\r\n// User Agent for API requests\r\nexport const USER_AGENT = `${APP_NAME}/${APP_VERSION} (+mcp)`;\r\n\r\n// Error codes and messages\r\nexport const ERROR_CODES = {\r\n  MISSING_ENV: \"MISSING_ENVIRONMENT_VARIABLE\",\r\n  API_ERROR: \"OPENPROJECT_API_ERROR\",\r\n  VALIDATION_ERROR: \"VALIDATION_ERROR\",\r\n  AUTH_ERROR: \"AUTHENTICATION_ERROR\",\r\n  NOT_FOUND: \"RESOURCE_NOT_FOUND\",\r\n  TIMEOUT: \"REQUEST_TIMEOUT\",\r\n  NETWORK_ERROR: \"NETWORK_ERROR\",\r\n} as const;\r\n\r\n// OpenProject work package types (common defaults)\r\nexport const DEFAULT_WP_TYPES = {\r\n  TASK: \"Task\",\r\n  BUG: \"Bug\",\r\n  FEATURE: \"Feature\",\r\n  USER_STORY: \"User story\",\r\n  EPIC: \"Epic\",\r\n  MILESTONE: \"Milestone\",\r\n} as const;\r\n\r\n// OpenProject statuses (common defaults)\r\nexport const DEFAULT_STATUSES = {\r\n  NEW: \"New\",\r\n  IN_PROGRESS: \"In progress\", \r\n  ON_HOLD: \"On hold\",\r\n  RESOLVED: \"Resolved\",\r\n  CLOSED: \"Closed\",\r\n  REJECTED: \"Rejected\",\r\n} as const;\r\n\r\n// OpenProject priorities (common defaults)\r\nexport const DEFAULT_PRIORITIES = {\r\n  LOW: \"Low\",\r\n  NORMAL: \"Normal\",\r\n  HIGH: \"High\",\r\n  IMMEDIATE: \"Immediate\",\r\n} as const;\r\n\r\n// Enterprise feature flags (for your private use)\r\nexport const ENTERPRISE_FEATURES = {\r\n  PORTFOLIO_MANAGEMENT: true,\r\n  RISK_MANAGEMENT: true,\r\n  PREDICTIVE_ANALYTICS: true,\r\n  PROGRAM_MANAGEMENT: true,\r\n  ADVANCED_REPORTING: true,\r\n  CUSTOM_WORKFLOWS: true,\r\n  AUDIT_TRAILS: true,\r\n  COMPLIANCE_TRACKING: true,\r\n} as const;\r\n\r\n// Tool categories for organization\r\nexport const TOOL_CATEGORIES = {\r\n  CORE: \"Core Operations\",\r\n  WORKFLOW: \"Workflow Support\", \r\n  ENTERPRISE: \"Enterprise Management\",\r\n  REPORTING: \"Reporting & Analytics\",\r\n  PORTFOLIO: \"Portfolio Management\",\r\n  RISK: \"Risk Management\",\r\n  PROGRAM: \"Program Management\",\r\n  PREDICTIVE: \"Predictive Analytics\",\r\n} as const;\r\n\r\n// Logging levels\r\nexport const LOG_LEVELS = {\r\n  ERROR: 0,\r\n  WARN: 1,\r\n  INFO: 2,\r\n  DEBUG: 3,\r\n} as const;\r\n\r\n// Cache configuration (if needed)\r\nexport const CACHE_CONFIG = {\r\n  TTL_SHORT: 5 * 60,    // 5 minutes\r\n  TTL_MEDIUM: 30 * 60,  // 30 minutes\r\n  TTL_LONG: 60 * 60,    // 1 hour\r\n} as const;\r\n\r\n// Development vs Production indicators\r\nexport const ENVIRONMENT = {\r\n  isDev: () => typeof globalThis !== \"undefined\" && \r\n    (globalThis as any).ENV?.NODE_ENV === \"development\",\r\n  isProduction: () => typeof globalThis !== \"undefined\" && \r\n    (globalThis as any).ENV?.NODE_ENV === \"production\",\r\n} as const;","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/constants/version.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Centralized version constant. Update in one place; reflect in User-Agent & server metadata.\r\nexport const VERSION = \"3.2.0\";\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/data/cache-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/data/cache-manager.ts\r\nimport type { \r\n  CacheEntry, \r\n  CacheStrategy, \r\n  EVMCalculation, \r\n  CriticalPathAnalysis, \r\n  ResourceUtilization,\r\n  PMOVariables \r\n} from \"../types/hybrid-data\";\r\n\r\n/**\r\n * SQLite-based Cache Manager for PMO Calculations\r\n * \r\n * Provides intelligent caching for expensive calculations while ensuring\r\n * fresh data for rapidly changing metrics. Uses TTL-based expiration\r\n * and smart cache invalidation strategies.\r\n */\r\nexport class CacheManager {\r\n  private cache: Map<string, CacheEntry<any>> = new Map();\r\n  private readonly strategy: CacheStrategy = {\r\n    neverCache: [\r\n      'workPackageProgress',\r\n      'timeEntries',\r\n      'projectStatus',\r\n      'currentAssignments'\r\n    ],\r\n    cacheForSession: [\r\n      'projectVariables',\r\n      'userRates',\r\n      'organizationalPolicies',\r\n      'projectConfiguration'\r\n    ],\r\n    cacheWithExpiry: [\r\n      { key: 'evmCalculations', ttlSeconds: 3600 },        // 1 hour\r\n      { key: 'criticalPathAnalysis', ttlSeconds: 1800 },   // 30 minutes\r\n      { key: 'portfolioAnalytics', ttlSeconds: 7200 },     // 2 hours\r\n      { key: 'resourceUtilization', ttlSeconds: 1800 },    // 30 minutes\r\n      { key: 'riskAnalysis', ttlSeconds: 3600 },           // 1 hour\r\n      { key: 'performanceMetrics', ttlSeconds: 900 },      // 15 minutes\r\n      { key: 'budgetForecasts', ttlSeconds: 3600 }         // 1 hour\r\n    ]\r\n  };\r\n  \r\n  constructor() {\r\n    // Note: In Cloudflare Workers, setInterval is not allowed in global scope\r\n    // Cleanup will be handled on-demand during cache operations\r\n  }\r\n  \r\n  /**\r\n   * Get cached data if valid, otherwise return null\r\n   */\r\n  async get<T>(key: string, projectId?: string | number): Promise<T | null> {\r\n    // Periodically cleanup expired entries during normal operations\r\n    this.maybeCleanupExpiredEntries();\r\n    \r\n    const cacheKey = this.buildCacheKey(key, projectId);\r\n    const entry = this.cache.get(cacheKey);\r\n    \r\n    if (!entry) {\r\n      return null;\r\n    }\r\n    \r\n    // Check if entry has expired\r\n    if (this.isExpired(entry)) {\r\n      this.cache.delete(cacheKey);\r\n      return null;\r\n    }\r\n    \r\n    return entry.data as T;\r\n  }\r\n  \r\n  /**\r\n   * Store data in cache with appropriate TTL based on strategy\r\n   */\r\n  async set<T>(\r\n    key: string, \r\n    data: T, \r\n    projectId?: string | number,\r\n    customTTL?: number\r\n  ): Promise<void> {\r\n    // Check if this type of data should be cached\r\n    if (this.strategy.neverCache.includes(key)) {\r\n      return; // Don't cache\r\n    }\r\n    \r\n    const ttl = customTTL || this.getTTLForKey(key);\r\n    const cacheKey = this.buildCacheKey(key, projectId);\r\n    \r\n    const entry: CacheEntry<T> = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n      projectId: projectId ? String(projectId) : 'global',\r\n      calculationType: key\r\n    };\r\n    \r\n    this.cache.set(cacheKey, entry);\r\n  }\r\n  \r\n  /**\r\n   * Invalidate cache entries for a specific project or calculation type\r\n   */\r\n  async invalidate(pattern: string, projectId?: string | number): Promise<void> {\r\n    const keysToDelete: string[] = [];\r\n    \r\n    for (const [cacheKey, entry] of this.cache.entries()) {\r\n      const matchesPattern = cacheKey.includes(pattern);\r\n      const matchesProject = !projectId || entry.projectId === String(projectId);\r\n      \r\n      if (matchesPattern && matchesProject) {\r\n        keysToDelete.push(cacheKey);\r\n      }\r\n    }\r\n    \r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n  }\r\n  \r\n  /**\r\n   * Cache EVM calculation results\r\n   */\r\n  async cacheEVMCalculation(\r\n    projectId: string | number, \r\n    calculation: EVMCalculation\r\n  ): Promise<void> {\r\n    await this.set('evmCalculations', calculation, projectId);\r\n  }\r\n  \r\n  /**\r\n   * Get cached EVM calculation\r\n   */\r\n  async getEVMCalculation(projectId: string | number): Promise<EVMCalculation | null> {\r\n    return await this.get<EVMCalculation>('evmCalculations', projectId);\r\n  }\r\n  \r\n  /**\r\n   * Cache critical path analysis results\r\n   */\r\n  async cacheCriticalPathAnalysis(\r\n    projectId: string | number, \r\n    analysis: CriticalPathAnalysis\r\n  ): Promise<void> {\r\n    await this.set('criticalPathAnalysis', analysis, projectId);\r\n  }\r\n  \r\n  /**\r\n   * Get cached critical path analysis\r\n   */\r\n  async getCriticalPathAnalysis(projectId: string | number): Promise<CriticalPathAnalysis | null> {\r\n    return await this.get<CriticalPathAnalysis>('criticalPathAnalysis', projectId);\r\n  }\r\n  \r\n  /**\r\n   * Cache resource utilization data\r\n   */\r\n  async cacheResourceUtilization(\r\n    key: string,\r\n    utilization: ResourceUtilization[]\r\n  ): Promise<void> {\r\n    await this.set('resourceUtilization', utilization, key);\r\n  }\r\n  \r\n  /**\r\n   * Get cached resource utilization\r\n   */\r\n  async getResourceUtilization(key: string): Promise<ResourceUtilization[] | null> {\r\n    return await this.get<ResourceUtilization[]>('resourceUtilization', key);\r\n  }\r\n  \r\n  /**\r\n   * Cache PMO variables (session-based caching)\r\n   */\r\n  async cachePMOVariables(\r\n    projectId: string | number, \r\n    variables: PMOVariables\r\n  ): Promise<void> {\r\n    // PMO variables cached for session (no TTL expiry)\r\n    await this.set('projectVariables', variables, projectId, 0);\r\n  }\r\n  \r\n  /**\r\n   * Get cached PMO variables\r\n   */\r\n  async getPMOVariables(projectId: string | number): Promise<PMOVariables | null> {\r\n    return await this.get<PMOVariables>('projectVariables', projectId);\r\n  }\r\n  \r\n  /**\r\n   * Cache calculation metadata for debugging and optimization\r\n   */\r\n  async cacheCalculationMetadata(\r\n    calculationType: string,\r\n    projectId: string | number,\r\n    metadata: {\r\n      executionTime: number;\r\n      inputDataSize: number;\r\n      complexity: 'low' | 'medium' | 'high';\r\n      dependencies: string[];\r\n    }\r\n  ): Promise<void> {\r\n    const key = `metadata_${calculationType}`;\r\n    await this.set(key, metadata, projectId, 3600); // 1 hour TTL\r\n  }\r\n  \r\n  /**\r\n   * Get cache statistics for monitoring and optimization\r\n   */\r\n  getCacheStatistics(): {\r\n    totalEntries: number;\r\n    expiredEntries: number;\r\n    memoryUsage: string;\r\n    hitRate: number;\r\n    topCalculationTypes: { type: string; count: number }[];\r\n  } {\r\n  // timestamp not currently used; retained logic simplified\r\n    let expiredCount = 0;\r\n    const typeCount = new Map<string, number>();\r\n    \r\n    for (const entry of this.cache.values()) {\r\n      if (this.isExpired(entry)) {\r\n        expiredCount++;\r\n      }\r\n      \r\n      const count = typeCount.get(entry.calculationType) || 0;\r\n      typeCount.set(entry.calculationType, count + 1);\r\n    }\r\n    \r\n    const topTypes = Array.from(typeCount.entries())\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5)\r\n      .map(([type, count]) => ({ type, count }));\r\n    \r\n    // Rough memory usage estimation\r\n    const estimatedSize = this.cache.size * 1024; // Rough estimate in bytes\r\n    const memoryUsage = estimatedSize > 1024 * 1024 \r\n      ? `${Math.round(estimatedSize / (1024 * 1024))}MB`\r\n      : `${Math.round(estimatedSize / 1024)}KB`;\r\n    \r\n    return {\r\n      totalEntries: this.cache.size,\r\n      expiredEntries: expiredCount,\r\n      memoryUsage,\r\n      hitRate: this.calculateHitRate(),\r\n      topCalculationTypes: topTypes\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Smart cache warming for frequently accessed calculations\r\n   */\r\n  async warmCache(projectIds: (string | number)[]): Promise<void> {\r\n    const warmingTasks = projectIds.map(async (projectId) => {\r\n      // Pre-warm commonly accessed data\r\n      const cacheKeys = [\r\n        'projectVariables',\r\n        'projectConfiguration',\r\n        'userRates'\r\n      ];\r\n      \r\n      // These would typically be loaded from the data source\r\n      // For now, we'll just ensure the cache structure is ready\r\n      cacheKeys.forEach(key => {\r\n        const cacheKey = this.buildCacheKey(key, projectId);\r\n        if (!this.cache.has(cacheKey)) {\r\n          // Mark as warming to prevent duplicate requests\r\n          this.cache.set(cacheKey, {\r\n            data: null,\r\n            timestamp: Date.now(),\r\n            ttl: 60, // Short TTL for warming markers\r\n            projectId: String(projectId),\r\n            calculationType: `${key}_warming`\r\n          });\r\n        }\r\n      });\r\n    });\r\n    \r\n    await Promise.all(warmingTasks);\r\n  }\r\n  \r\n  /**\r\n   * Clear all cached data (useful for testing or reset scenarios)\r\n   */\r\n  async clearAll(): Promise<void> {\r\n    this.cache.clear();\r\n  }\r\n  \r\n  /**\r\n   * Clear cache for specific project\r\n   */\r\n  async clearProject(projectId: string | number): Promise<void> {\r\n    const keysToDelete: string[] = [];\r\n    \r\n    for (const [cacheKey, entry] of this.cache.entries()) {\r\n      if (entry.projectId === String(projectId)) {\r\n        keysToDelete.push(cacheKey);\r\n      }\r\n    }\r\n    \r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n  }\r\n  \r\n  // Private helper methods\r\n  \r\n  private buildCacheKey(key: string, projectId?: string | number): string {\r\n    return projectId ? `${key}:${projectId}` : `${key}:global`;\r\n  }\r\n  \r\n  private getTTLForKey(key: string): number {\r\n    // Session-based caching (no expiry)\r\n    if (this.strategy.cacheForSession.includes(key)) {\r\n      return 0; // 0 means no expiry\r\n    }\r\n    \r\n    // TTL-based caching\r\n    const expiryRule = this.strategy.cacheWithExpiry.find(rule => \r\n      key.includes(rule.key) || rule.key === key\r\n    );\r\n    \r\n    if (expiryRule) {\r\n      return expiryRule.ttlSeconds;\r\n    }\r\n    \r\n    // Default TTL for unknown keys\r\n    return 1800; // 30 minutes\r\n  }\r\n  \r\n  private isExpired(entry: CacheEntry<any>): boolean {\r\n    // No expiry (session-based)\r\n    if (entry.ttl === 0) {\r\n      return false;\r\n    }\r\n    \r\n    const now = Date.now();\r\n    const expiryTime = entry.timestamp + (entry.ttl * 1000);\r\n    \r\n    return now > expiryTime;\r\n  }\r\n  \r\n  private lastCleanup: number = 0;\r\n  \r\n  private cleanupExpiredEntries(): void {\r\n    const keysToDelete: string[] = [];\r\n    \r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (this.isExpired(entry)) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n    \r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n    \r\n    if (keysToDelete.length > 0) {\r\n      import('../util/logger').then(m => m.log.debug('cache_cleanup', { removed: keysToDelete.length })).catch(()=>{});\r\n    }\r\n    \r\n    this.lastCleanup = Date.now();\r\n  }\r\n  \r\n  private maybeCleanupExpiredEntries(): void {\r\n    const now = Date.now();\r\n    const fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\r\n    \r\n    // Only run cleanup if it's been more than 5 minutes since last cleanup\r\n    if (now - this.lastCleanup > fiveMinutes) {\r\n      this.cleanupExpiredEntries();\r\n    }\r\n  }\r\n  \r\n  private hitRate: number = 0;\r\n  private totalRequests: number = 0;\r\n  private cacheHits: number = 0;\r\n  \r\n  private calculateHitRate(): number {\r\n    if (this.totalRequests === 0) {return 0;}\r\n    return Math.round((this.cacheHits / this.totalRequests) * 100) / 100;\r\n  }\r\n  \r\n  /**\r\n   * Track cache performance metrics\r\n   */\r\n  private trackCacheAccess(isHit: boolean): void {\r\n    this.totalRequests++;\r\n    if (isHit) {\r\n      this.cacheHits++;\r\n    }\r\n    \r\n    // Update hit rate\r\n    this.hitRate = this.calculateHitRate();\r\n  }\r\n  \r\n  /**\r\n   * Enhanced get method with performance tracking\r\n   */\r\n  async getWithTracking<T>(key: string, projectId?: string | number): Promise<T | null> {\r\n    const result = await this.get<T>(key, projectId);\r\n    this.trackCacheAccess(result !== null);\r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Bulk cache operations for efficiency\r\n   */\r\n  async setBulk<T>(entries: Array<{\r\n    key: string;\r\n    data: T;\r\n    projectId?: string | number;\r\n    ttl?: number;\r\n  }>): Promise<void> {\r\n    const tasks = entries.map(entry => \r\n      this.set(entry.key, entry.data, entry.projectId, entry.ttl)\r\n    );\r\n    \r\n    await Promise.all(tasks);\r\n  }\r\n  \r\n  /**\r\n   * Cache health check for monitoring\r\n   */\r\n  getHealthStatus(): {\r\n    status: 'healthy' | 'warning' | 'critical';\r\n    issues: string[];\r\n    recommendations: string[];\r\n  } {\r\n    const stats = this.getCacheStatistics();\r\n    const issues: string[] = [];\r\n    const recommendations: string[] = [];\r\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\r\n    \r\n    // Check for high expired entry ratio\r\n    const expiredRatio = stats.totalEntries > 0 ? stats.expiredEntries / stats.totalEntries : 0;\r\n    if (expiredRatio > 0.3) {\r\n      issues.push('High ratio of expired entries');\r\n      recommendations.push('Consider adjusting TTL values for better performance');\r\n      status = 'warning';\r\n    }\r\n    \r\n    // Check hit rate\r\n    if (stats.hitRate < 0.5) {\r\n      issues.push('Low cache hit rate');\r\n      recommendations.push('Review caching strategy and TTL values');\r\n      if (status === 'healthy') {status = 'warning';}\r\n    }\r\n    \r\n    // Check memory usage (rough estimate)\r\n    if (stats.totalEntries > 1000) {\r\n      issues.push('High number of cached entries');\r\n      recommendations.push('Consider implementing LRU eviction or reducing cache size');\r\n      if (status === 'healthy') {status = 'warning';}\r\n    }\r\n    \r\n    return { status, issues, recommendations };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const cacheManager = new CacheManager();","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/data/custom-calculator.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":44,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":44,"endColumn":21,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1527,1529],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":107,"column":37,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":107,"endColumn":50},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":107,"column":67,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":107,"endColumn":78},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":144,"column":24,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":144,"endColumn":26,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[6185,6187],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":336,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":336,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":360,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":360,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":412,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":412,"endColumn":38},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":417,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":417,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":435,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":435,"endColumn":38},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":444,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":444,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'variables' is defined but never used. Allowed unused args must match /^_/u.","line":483,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":74}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/data/custom-calculator.ts\r\nimport type { \r\n  NativeProjectMetrics, \r\n  NativeWorkPackageData,\r\n  NativeTimeEntry,\r\n  PMOVariables,\r\n  EVMCalculation,\r\n  CriticalPathAnalysis,\r\n  CriticalPathNode,\r\n  ResourceUtilization \r\n} from \"../types/hybrid-data\";\r\n\r\n/**\r\n * Custom Calculation Engine for Enterprise PMO Features\r\n * \r\n * Implements sophisticated project management calculations that are:\r\n * 1. Not available in OpenProject Community edition\r\n * 2. Behind Enterprise paywall features\r\n * 3. Custom PMO analytics not provided by OpenProject\r\n * \r\n * Uses OpenProject's native data as input for maximum accuracy.\r\n */\r\nexport class CustomPMCalculator {\r\n  \r\n  /**\r\n   * Calculate Earned Value Management (EVM) metrics using PMBOK standards\r\n   * This is typically an Enterprise feature - we implement full EVM analysis\r\n   */\r\n  calculateEVM(\r\n    nativeData: NativeProjectMetrics, \r\n    variables: PMOVariables,\r\n    asOfDate?: Date\r\n  ): EVMCalculation {\r\n  const reportDate = asOfDate || new Date();\r\n    \r\n    // Calculate Budget at Completion (BAC) from native estimated hours\r\n    const budgetAtCompletion = nativeData.totalEstimatedHours * variables.standardLaborRate;\r\n    \r\n    // Calculate Planned Value (PV) based on schedule\r\n    const plannedValue = this.calculatePlannedValue(nativeData, budgetAtCompletion, reportDate);\r\n    \r\n    // Calculate Earned Value (EV) from OpenProject's native percentageDone\r\n  let earnedValue = this.calculateEarnedValue(nativeData, budgetAtCompletion);\r\n  if (earnedValue == null || !Number.isFinite(earnedValue)) {earnedValue = 0;}\r\n    \r\n    // Calculate Actual Cost (AC) from time entries and rates\r\n    const actualCost = this.calculateActualCost(nativeData.timeEntries, variables);\r\n    \r\n    // Calculate performance indices\r\n    const costPerformanceIndex = actualCost > 0 ? earnedValue / actualCost : 1;\r\n    const schedulePerformanceIndex = plannedValue > 0 ? earnedValue / plannedValue : 1;\r\n    \r\n    // Calculate variances\r\n    const costVariance = earnedValue - actualCost;\r\n    const scheduleVariance = earnedValue - plannedValue;\r\n    \r\n    // Calculate forecasts using selected method\r\n    const forecasts = this.calculateEVMForecasts(\r\n      budgetAtCompletion,\r\n      earnedValue,\r\n      actualCost,\r\n      costPerformanceIndex,\r\n      schedulePerformanceIndex,\r\n      variables.forecastMethod\r\n    );\r\n    \r\n    // Determine status based on thresholds\r\n    const costStatus = this.determineCostStatus(costPerformanceIndex, variables.costPerformanceThreshold);\r\n    const scheduleStatus = this.determineScheduleStatus(schedulePerformanceIndex, variables.schedulePerformanceThreshold);\r\n    const overallHealth = this.determineOverallHealth(costPerformanceIndex, schedulePerformanceIndex, variables);\r\n    \r\n    return {\r\n      budgetAtCompletion: Math.round(budgetAtCompletion * 100) / 100,\r\n      plannedValue: Math.round(plannedValue * 100) / 100,\r\n      earnedValue: Math.round(earnedValue * 100) / 100,\r\n      actualCost: Math.round(actualCost * 100) / 100,\r\n      costPerformanceIndex: Math.round(costPerformanceIndex * 1000) / 1000,\r\n      schedulePerformanceIndex: Math.round(schedulePerformanceIndex * 1000) / 1000,\r\n      costVariance: Math.round(costVariance * 100) / 100,\r\n      scheduleVariance: Math.round(scheduleVariance * 100) / 100,\r\n      estimateAtCompletion: Math.round(forecasts.estimateAtCompletion * 100) / 100,\r\n      estimateToComplete: Math.round(forecasts.estimateToComplete * 100) / 100,\r\n      varianceAtCompletion: Math.round(forecasts.varianceAtCompletion * 100) / 100,\r\n      toCompletePerformanceIndex: Math.round(forecasts.toCompletePerformanceIndex * 1000) / 1000,\r\n      costStatus,\r\n      scheduleStatus,\r\n      overallHealth,\r\n      calculationDate: reportDate.toISOString().split('T')[0] || new Date().toISOString(),\r\n      method: variables.evmMethod,\r\n      confidence: this.calculateConfidence(nativeData, variables),\r\n      forecastVariants: forecasts.variants,\r\n      forecastMethodApplied: forecasts.methodApplied\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Calculate Planned Value based on project schedule and current date\r\n   */\r\n  private calculatePlannedValue(\r\n    nativeData: NativeProjectMetrics, \r\n    budgetAtCompletion: number, \r\n    asOfDate: Date\r\n  ): number {\r\n    // Find project start and end dates from work packages\r\n    const dates = nativeData.workPackages\r\n      .filter(wp => wp.startDate && wp.dueDate)\r\n      .map(wp => ({ start: new Date(wp.startDate!), end: new Date(wp.dueDate!) }));\r\n    \r\n    if (dates.length === 0) {\r\n      // No schedule data available, assume linear progress\r\n      const projectAge = Math.max(1, Math.ceil((asOfDate.getTime() - new Date().getTime() + 30 * 24 * 60 * 60 * 1000) / (1000 * 60 * 60 * 24)));\r\n      const assumedDuration = Math.max(90, projectAge); // Assume at least 90 days\r\n      return budgetAtCompletion * Math.min(1, projectAge / assumedDuration);\r\n    }\r\n    \r\n    const projectStart = new Date(Math.min(...dates.map(d => d.start.getTime())));\r\n    const projectEnd = new Date(Math.max(...dates.map(d => d.end.getTime())));\r\n    \r\n    const totalDuration = projectEnd.getTime() - projectStart.getTime();\r\n    const elapsedDuration = Math.max(0, asOfDate.getTime() - projectStart.getTime());\r\n    \r\n    if (totalDuration <= 0) {return 0;}\r\n    \r\n    // Calculate planned progress based on time elapsed\r\n    const timeProgress = Math.min(1, elapsedDuration / totalDuration);\r\n    \r\n    return budgetAtCompletion * timeProgress;\r\n  }\r\n  \r\n  /**\r\n   * Calculate Earned Value from OpenProject's native completion percentages\r\n   */\r\n  private calculateEarnedValue(nativeData: NativeProjectMetrics, budgetAtCompletion: number): number {\r\n    // Use weighted average based on work package budget allocation\r\n    let totalEarnedValue = 0;\r\n    \r\n    nativeData.workPackages.forEach(wp => {\r\n      const wpEstimatedHours = this.parseISO8601Duration(wp.estimatedTime) || 1;\r\n      const wpBudget = (wpEstimatedHours / nativeData.totalEstimatedHours) * budgetAtCompletion;\r\n      const wpEarnedValue = wpBudget * (wp.percentageDone / 100);\r\n      totalEarnedValue += wpEarnedValue;\r\n    });\r\n    \r\n  if (totalEarnedValue == null || !Number.isFinite(totalEarnedValue)) {return 0;}\r\n  return totalEarnedValue;\r\n  }\r\n  \r\n  /**\r\n   * Calculate Actual Cost from time entries and labor rates\r\n   */\r\n  private calculateActualCost(timeEntries: NativeTimeEntry[], variables: PMOVariables): number {\r\n    return timeEntries.reduce((total, entry) => {\r\n      // Use standard rate for all entries unless we have user-specific rates\r\n      // In the future, this could be enhanced with user-specific custom field rates\r\n      const rate = variables.standardLaborRate;\r\n      return total + (entry.hours * rate);\r\n    }, 0);\r\n  }\r\n  \r\n  /**\r\n   * Calculate EVM forecasts based on selected method\r\n   */\r\n  private calculateEVMForecasts(\r\n    budgetAtCompletion: number,\r\n    earnedValue: number,\r\n    actualCost: number,\r\n    costPerformanceIndex: number,\r\n    schedulePerformanceIndex: number,\r\n    forecastMethod: PMOVariables['forecastMethod']\r\n  ) {\r\n    const remainingWork = budgetAtCompletion - earnedValue;\r\n    const cpi = Math.max(0.01, costPerformanceIndex);\r\n    const spi = Math.max(0.01, schedulePerformanceIndex);\r\n    const combined = Math.max(0.01, cpi * spi);\r\n\r\n  // PMI common variants (retain full precision; rounding only at output layer)\r\n  const eacCpiBased = budgetAtCompletion / cpi;                             // EAC = BAC / CPI\r\n  const eacBudgetRate = actualCost + remainingWork;                         // EAC = AC + (BAC - EV)\r\n  // PMBOK combined performance (commonly mis-applied). We provide BOTH forms:\r\n  //  - Pure combined index: BAC/(CPI*SPI)\r\n  //  - AC + (BAC - EV)/(CPI*SPI) (legacy / alternative). Expose both for transparency.\r\n  const eacSpiCpiPure = budgetAtCompletion / combined;                      // EAC = BAC / (CPI*SPI)\r\n  const eacSpiCpiLegacy = actualCost + (remainingWork / combined);         // Legacy variant\r\n  const eacAcPlusRemainingOverCpi = actualCost + (remainingWork / cpi);     // EAC = AC + (BAC - EV)/CPI\r\n\r\n    let methodApplied = 'CPI';\r\n    let selectedEAC = eacCpiBased;\r\n    switch (forecastMethod) {\r\n      case 'CPI':\r\n        methodApplied = 'CPI';\r\n        selectedEAC = eacCpiBased;\r\n        break;\r\n      case 'SPI_CPI':\r\n        methodApplied = 'SPI_CPI';\r\n        selectedEAC = eacSpiCpiPure; // Use PMBOK pure combined formula\r\n        break;\r\n      case 'custom_regression':\r\n        // Use performance adjusted by risk (custom) but keep variants for transparency\r\n        const performanceIndex = (cpi + spi) / 2;\r\n        const riskAdjustment = this.getRiskAdjustment(performanceIndex);\r\n        selectedEAC = budgetAtCompletion / Math.max(0.1, performanceIndex * riskAdjustment);\r\n        methodApplied = 'custom_regression';\r\n        break;\r\n      default:\r\n        selectedEAC = eacCpiBased;\r\n    }\r\n\r\n  const estimateAtCompletion = selectedEAC;\r\n  const estimateToComplete = Math.max(0, estimateAtCompletion - actualCost);\r\n  const varianceAtCompletion = budgetAtCompletion - estimateAtCompletion;\r\n    const remainingBudget = remainingWork;\r\n    const toCompletePerformanceIndex = remainingBudget > 0 ? estimateToComplete / remainingBudget : 1;\r\n\r\n    return {\r\n      estimateAtCompletion,\r\n      estimateToComplete,\r\n      varianceAtCompletion,\r\n      toCompletePerformanceIndex,\r\n      variants: {\r\n        cpiBased: eacCpiBased,\r\n        budgetRate: eacBudgetRate,\r\n        spiCpiPure: eacSpiCpiPure,\r\n        spiCpiLegacy: eacSpiCpiLegacy,\r\n        spiCpiCombined: eacSpiCpiLegacy, // backward compatibility alias\r\n        acPlusRemainingOverCpi: eacAcPlusRemainingOverCpi\r\n      },\r\n      methodApplied\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Critical Path Method (CPM) analysis - Enterprise feature implementation\r\n   */\r\n  calculateCriticalPath(\r\n    nativeData: NativeProjectMetrics,\r\n    dependencies: { fromId: string; toId: string; type: string; lag?: number }[] = []\r\n  ): CriticalPathAnalysis {\r\n    const nodes = new Map<string, CriticalPathNode>();\r\n    \r\n    // Build nodes from work packages\r\n    nativeData.workPackages.forEach(wp => {\r\n      const duration = this.calculateWorkPackageDuration(wp);\r\n      nodes.set(String(wp.id), {\r\n        id: wp.id,\r\n        name: wp.subject,\r\n        duration,\r\n        earliestStart: 0,\r\n        earliestFinish: duration,\r\n        latestStart: 0,\r\n        latestFinish: duration,\r\n        totalFloat: 0,\r\n        freeFloat: 0,\r\n        isCritical: false,\r\n        percentComplete: wp.percentageDone,\r\n        predecessors: [],\r\n        successors: []\r\n      });\r\n    });\r\n    \r\n    // Add dependency relationships\r\n    dependencies.forEach(dep => {\r\n      const fromNode = nodes.get(dep.fromId);\r\n      const toNode = nodes.get(dep.toId);\r\n      if (fromNode && toNode) {\r\n        fromNode.successors.push(dep.toId);\r\n        toNode.predecessors.push(dep.fromId);\r\n      }\r\n    });\r\n    \r\n    // Forward pass - calculate earliest times\r\n    this.calculateEarliestTimes(nodes);\r\n    \r\n    // Backward pass - calculate latest times\r\n    const projectFinish = Math.max(...Array.from(nodes.values()).map(node => node.earliestFinish));\r\n    this.calculateLatestTimes(nodes, projectFinish);\r\n    \r\n    // Calculate float and identify critical path\r\n    const criticalPath: string[] = [];\r\n    nodes.forEach((node, id) => {\r\n      node.totalFloat = node.latestStart - node.earliestStart;\r\n      node.isCritical = node.totalFloat === 0;\r\n      if (node.isCritical) {\r\n        criticalPath.push(id);\r\n      }\r\n    });\r\n    \r\n    // Calculate schedule risk based on critical path and progress\r\n    const criticalPathLength = criticalPath.length;\r\n    const averageCriticalProgress = criticalPath.reduce((sum, id) => {\r\n      return sum + (nodes.get(id)?.percentComplete || 0);\r\n    }, 0) / Math.max(1, criticalPath.length);\r\n    \r\n    const scheduleRisk = this.assessScheduleRisk(projectFinish, averageCriticalProgress, nodes);\r\n    \r\n    return {\r\n      nodes,\r\n      criticalPath,\r\n      projectDuration: projectFinish,\r\n      criticalPathLength,\r\n      totalFloat: Math.min(...Array.from(nodes.values()).map(node => node.totalFloat)),\r\n      scheduleRisk,\r\n      recommendations: this.generateCPMRecommendations(nodes, criticalPath),\r\n      analysisDate: new Date().toISOString().split('T')[0] || new Date().toISOString()\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Calculate resource utilization across projects\r\n   */\r\n  calculateResourceUtilization(\r\n    projectsData: NativeProjectMetrics[],\r\n    variables: PMOVariables,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): ResourceUtilization[] {\r\n    const userUtilization = new Map<string, ResourceUtilization>();\r\n    \r\n    projectsData.forEach(projectData => {\r\n      projectData.timeEntries.forEach(entry => {\r\n        const userId = String(entry.user.id);\r\n        const userName = entry.user.name;\r\n        \r\n        if (!userUtilization.has(userId)) {\r\n          userUtilization.set(userId, {\r\n            userId,\r\n            userName,\r\n            totalAllocatedHours: 0,\r\n            totalWorkedHours: 0,\r\n            utilizationRate: 0,\r\n            overallocation: false,\r\n            availableCapacity: 0,\r\n            projects: []\r\n          });\r\n        }\r\n        \r\n        const util = userUtilization.get(userId)!;\r\n        util.totalWorkedHours += entry.hours;\r\n        \r\n        // Find or create project entry\r\n        let projectEntry = util.projects.find(p => p.projectId === projectData.id);\r\n        if (!projectEntry) {\r\n          projectEntry = {\r\n            projectId: projectData.id,\r\n            projectName: projectData.name,\r\n            allocatedHours: 0,\r\n            workedHours: 0,\r\n            utilizationRate: 0\r\n          };\r\n          util.projects.push(projectEntry);\r\n        }\r\n        \r\n        projectEntry.workedHours += entry.hours;\r\n      });\r\n    });\r\n    \r\n    // Calculate utilization rates and capacity\r\n    const workingDays = this.calculateWorkingDays(startDate, endDate, variables);\r\n    const maxCapacityHours = workingDays * variables.workingHoursPerDay;\r\n    \r\n    userUtilization.forEach((util, userId) => {\r\n      util.totalAllocatedHours = maxCapacityHours; // Assume full allocation for now\r\n      util.utilizationRate = util.totalWorkedHours / maxCapacityHours;\r\n      util.overallocation = util.utilizationRate > variables.maxAllocation;\r\n      util.availableCapacity = Math.max(0, maxCapacityHours - util.totalWorkedHours);\r\n      \r\n      // Calculate per-project utilization rates\r\n      util.projects.forEach(project => {\r\n        project.utilizationRate = project.workedHours / maxCapacityHours;\r\n        project.allocatedHours = maxCapacityHours * (project.workedHours / util.totalWorkedHours);\r\n      });\r\n    });\r\n    \r\n    return Array.from(userUtilization.values())\r\n      .sort((a, b) => b.utilizationRate - a.utilizationRate);\r\n  }\r\n  \r\n  // Helper methods\r\n  \r\n  private parseISO8601Duration(duration?: string): number {\r\n    if (!duration) {return 0;}\r\n    const match = duration.match(/^PT(?:(\\d+(?:\\.\\d+)?)H)?(?:(\\d+(?:\\.\\d+)?)D)?$/);\r\n    if (!match) {return 0;}\r\n    const hours = parseFloat(match[1] || '0');\r\n    const days = parseFloat(match[2] || '0');\r\n    return hours + (days * 8);\r\n  }\r\n  \r\n  private calculateWorkPackageDuration(wp: NativeWorkPackageData): number {\r\n    if (wp.startDate && wp.dueDate) {\r\n      const start = new Date(wp.startDate);\r\n      const end = new Date(wp.dueDate);\r\n      const diffDays = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));\r\n      return Math.max(1, diffDays);\r\n    }\r\n    \r\n    // Use estimated time if available\r\n    const estimatedHours = this.parseISO8601Duration(wp.estimatedTime);\r\n    if (estimatedHours > 0) {\r\n      return Math.ceil(estimatedHours / 8); // Convert hours to days\r\n    }\r\n    \r\n    return 1; // Default to 1 day\r\n  }\r\n  \r\n  private calculateEarliestTimes(nodes: Map<string, CriticalPathNode>): void {\r\n    const visited = new Set<string>();\r\n    \r\n    const calculateEarly = (nodeId: string): void => {\r\n      if (visited.has(nodeId)) {return;}\r\n      visited.add(nodeId);\r\n      \r\n      const node = nodes.get(nodeId)!;\r\n      let maxPredecessorFinish = 0;\r\n      \r\n      node.predecessors.forEach(predId => {\r\n        calculateEarly(predId);\r\n        const pred = nodes.get(predId)!;\r\n        maxPredecessorFinish = Math.max(maxPredecessorFinish, pred.earliestFinish);\r\n      });\r\n      \r\n      node.earliestStart = maxPredecessorFinish;\r\n      node.earliestFinish = node.earliestStart + node.duration;\r\n    };\r\n    \r\n    nodes.forEach((_, nodeId) => calculateEarly(nodeId));\r\n  }\r\n  \r\n  private calculateLatestTimes(nodes: Map<string, CriticalPathNode>, projectFinish: number): void {\r\n    const visited = new Set<string>();\r\n    \r\n    const calculateLate = (nodeId: string): void => {\r\n      if (visited.has(nodeId)) {return;}\r\n      visited.add(nodeId);\r\n      \r\n      const node = nodes.get(nodeId)!;\r\n      \r\n      if (node.successors.length === 0) {\r\n        // End node\r\n        node.latestFinish = projectFinish;\r\n      } else {\r\n        let minSuccessorStart = Infinity;\r\n        node.successors.forEach(succId => {\r\n          calculateLate(succId);\r\n          const succ = nodes.get(succId)!;\r\n          minSuccessorStart = Math.min(minSuccessorStart, succ.latestStart);\r\n        });\r\n        node.latestFinish = minSuccessorStart;\r\n      }\r\n      \r\n      node.latestStart = node.latestFinish - node.duration;\r\n    };\r\n    \r\n    nodes.forEach((_, nodeId) => calculateLate(nodeId));\r\n  }\r\n  \r\n  private determineOverallHealth(\r\n    cpi: number,\r\n    spi: number,\r\n    variables: PMOVariables\r\n  ): 'Green' | 'Yellow' | 'Red' {\r\n    const threshold = variables.costPerformanceThreshold;\r\n    const scheduleThreshold = variables.schedulePerformanceThreshold;\r\n    \r\n    if (cpi >= threshold && spi >= scheduleThreshold) {return 'Green';}\r\n    if (cpi >= threshold * 0.85 && spi >= scheduleThreshold * 0.85) {return 'Yellow';}\r\n    return 'Red';\r\n  }\r\n  \r\n  private determineCostStatus(cpi: number, threshold: number): EVMCalculation['costStatus'] {\r\n    // Normalize threshold around 1.0 PMI baseline\r\n    if (cpi >= 1.0) {return 'Under Budget';}\r\n    if (cpi >= threshold) {return 'Over Budget';}\r\n    return 'Seriously Over Budget';\r\n  }\r\n  \r\n  private determineScheduleStatus(spi: number, threshold: number): EVMCalculation['scheduleStatus'] {\r\n    if (spi >= 1.05) {return 'Ahead';}\r\n    if (spi >= threshold) {return 'On Track';}\r\n    if (spi >= threshold * 0.9) {return 'Behind';}\r\n    return 'Seriously Behind';\r\n  }\r\n  \r\n  private calculateConfidence(nativeData: NativeProjectMetrics, variables: PMOVariables): number {\r\n    // Calculate confidence based on data quality and completeness\r\n    let confidence = 0.5; // Base confidence\r\n    \r\n    // Increase confidence for more data points\r\n    if (nativeData.workPackages.length > 0) {confidence += 0.1;}\r\n    if (nativeData.timeEntries.length > 10) {confidence += 0.1;}\r\n    if (nativeData.totalEstimatedHours > 0) {confidence += 0.1;}\r\n    \r\n    // Increase confidence for project maturity\r\n    if (nativeData.overallPercentComplete > 25) {confidence += 0.1;}\r\n    if (nativeData.overallPercentComplete > 50) {confidence += 0.1;}\r\n    \r\n    return Math.min(1.0, confidence);\r\n  }\r\n  \r\n  private getRiskAdjustment(performanceIndex: number): number {\r\n    // Adjust forecasts based on current performance\r\n    if (performanceIndex > 1.1) {return 1.05;} // Good performance, slight optimism\r\n    if (performanceIndex < 0.8) {return 0.9;}  // Poor performance, add pessimism\r\n    return 1.0; // Normal performance\r\n  }\r\n  \r\n  private assessScheduleRisk(\r\n    projectDuration: number,\r\n    averageCriticalProgress: number,\r\n    nodes: Map<string, CriticalPathNode>\r\n  ): 'Low' | 'Medium' | 'High' {\r\n    const behindScheduleNodes = Array.from(nodes.values()).filter(\r\n      node => node.isCritical && node.percentComplete < 50\r\n    ).length;\r\n    \r\n    if (behindScheduleNodes === 0 && averageCriticalProgress > 75) {return 'Low';}\r\n    if (behindScheduleNodes <= 2 && averageCriticalProgress > 50) {return 'Medium';}\r\n    return 'High';\r\n  }\r\n  \r\n  private generateCPMRecommendations(\r\n    nodes: Map<string, CriticalPathNode>,\r\n    criticalPath: string[]\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    const behindCritical = criticalPath.filter(id => {\r\n      const node = nodes.get(id);\r\n      return node && node.percentComplete < 50;\r\n    });\r\n    \r\n    if (behindCritical.length > 0) {\r\n      recommendations.push(`Focus on ${behindCritical.length} critical path tasks that are behind schedule`);\r\n    }\r\n    \r\n    const highFloat = Array.from(nodes.values()).filter(node => node.totalFloat > 10);\r\n    if (highFloat.length > 0) {\r\n      recommendations.push(`Consider reallocating resources from ${highFloat.length} tasks with high float`);\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n  \r\n  private calculateWorkingDays(startDate: Date, endDate: Date, variables: PMOVariables): number {\r\n    const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n    const totalWeeks = Math.floor(totalDays / 7);\r\n    const remainingDays = totalDays % 7;\r\n    \r\n    return (totalWeeks * variables.workingDaysPerWeek) + Math.min(remainingDays, variables.workingDaysPerWeek);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const customCalculator = new CustomPMCalculator();","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/data/hybrid-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":281,"column":32,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":281,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":281,"column":65,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":281,"endColumn":75},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":285,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":285,"endColumn":26},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":287,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":287,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nativeData' is defined but never used. Allowed unused args must match /^_/u.","line":359,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":359,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cached' is defined but never used. Allowed unused args must match /^_/u.","line":367,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":367,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nativeData' is defined but never used. Allowed unused args must match /^_/u.","line":367,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":367,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctx' is defined but never used. Allowed unused args must match /^_/u.","line":373,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":373,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":374,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":374,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectsData' is defined but never used. Allowed unused args must match /^_/u.","line":392,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":392,"endColumn":17}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/data/hybrid-manager.ts\r\n// Use TypeScript source import without .js so ts-node/loader resolves correctly during tests\r\nimport { nativeExtractor } from \"./native-extractor\";\r\nimport { customCalculator } from \"./custom-calculator\";\r\nimport { cacheManager } from \"./cache-manager\";\r\nimport { variableManager } from \"./variable-manager\";\r\nimport type { \r\n  HybridProjectData, \r\n  NativeProjectMetrics,\r\n  PMOVariables,\r\n  EVMCalculation,\r\n  CriticalPathAnalysis,\r\n  ResourceUtilization\r\n} from \"../types/hybrid-data\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * Hybrid Data Manager - Central orchestrator for PMO data\r\n * \r\n * Coordinates between:\r\n * 1. Native OpenProject data extraction\r\n * 2. Custom enterprise calculations\r\n * 3. PMO variable management\r\n * 4. Intelligent caching\r\n * \r\n * Provides a unified interface for all PMO data needs while\r\n * maximizing performance and accuracy.\r\n */\r\nexport class HybridDataManager {\r\n  \r\n  /**\r\n   * Get complete project data using hybrid approach\r\n   */\r\n  async getProjectData(ctx: Ctx, projectId: string | number): Promise<HybridProjectData> {\r\n    const startTime = Date.now();\r\n    \r\n    // Always get fresh native data from OpenProject\r\n    const nativeData = await nativeExtractor.getProjectMetrics(ctx, projectId);\r\n    \r\n    // Get PMO variables (cached for session)\r\n    let variables = await cacheManager.getPMOVariables(projectId);\r\n    if (!variables) {\r\n      variables = await variableManager.getProjectVariables(ctx, projectId);\r\n      await cacheManager.cachePMOVariables(projectId, variables);\r\n    }\r\n    \r\n    // Get cached calculations or compute if needed\r\n    const calculations = await this.getCalculations(ctx, projectId, nativeData, variables);\r\n    \r\n    const executionTime = Date.now() - startTime;\r\n    \r\n    // Cache calculation metadata for performance monitoring\r\n    await cacheManager.cacheCalculationMetadata('hybridProjectData', projectId, {\r\n      executionTime,\r\n      inputDataSize: nativeData.workPackages.length + nativeData.timeEntries.length,\r\n      complexity: this.assessComplexity(nativeData),\r\n      dependencies: ['nativeData', 'variables', 'calculations']\r\n    });\r\n    \r\n    return {\r\n      native: nativeData,\r\n      variables,\r\n      calculations\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Get or compute enterprise calculations with intelligent caching\r\n   */\r\n  private async getCalculations(\r\n    ctx: Ctx,\r\n    projectId: string | number,\r\n    nativeData: NativeProjectMetrics,\r\n    variables: PMOVariables\r\n  ) {\r\n    const now = new Date().toISOString();\r\n    \r\n    // Try to get cached calculations\r\n    const cachedEVM = await cacheManager.getEVMCalculation(projectId);\r\n    const cachedCriticalPath = await cacheManager.getCriticalPathAnalysis(projectId);\r\n    const cachedResources = await cacheManager.getResourceUtilization(`project_${projectId}`);\r\n    \r\n    // Determine what needs to be recalculated\r\n    const needsEVMRecalc = !cachedEVM || this.shouldRecalculateEVM(cachedEVM, nativeData);\r\n    const needsCriticalPathRecalc = !cachedCriticalPath || this.shouldRecalculateCriticalPath(cachedCriticalPath, nativeData);\r\n    const needsResourceRecalc = !cachedResources || this.shouldRecalculateResources(cachedResources, nativeData);\r\n    \r\n    // Perform calculations in parallel for efficiency\r\n    const [evm, criticalPath, resourceUtilization] = await Promise.all([\r\n      needsEVMRecalc ? this.calculateAndCacheEVM(projectId, nativeData, variables) : cachedEVM,\r\n      needsCriticalPathRecalc ? this.calculateAndCacheCriticalPath(ctx, projectId, nativeData) : cachedCriticalPath,\r\n      needsResourceRecalc ? this.calculateAndCacheResourceUtilization(ctx, projectId, nativeData, variables) : cachedResources\r\n    ]);\r\n    \r\n    return {\r\n      evm,\r\n      criticalPath,\r\n      resourceUtilization,\r\n      lastUpdated: now,\r\n      ttl: 3600 // 1 hour\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Calculate and cache EVM analysis\r\n   */\r\n  private async calculateAndCacheEVM(\r\n    projectId: string | number,\r\n    nativeData: NativeProjectMetrics,\r\n    variables: PMOVariables\r\n  ): Promise<EVMCalculation> {\r\n    const evm = customCalculator.calculateEVM(nativeData, variables);\r\n    await cacheManager.cacheEVMCalculation(projectId, evm);\r\n    return evm;\r\n  }\r\n  \r\n  /**\r\n   * Calculate and cache critical path analysis\r\n   */\r\n  private async calculateAndCacheCriticalPath(\r\n    ctx: Ctx,\r\n    projectId: string | number,\r\n    nativeData: NativeProjectMetrics\r\n  ): Promise<CriticalPathAnalysis> {\r\n    // Get work package dependencies (simplified for now)\r\n    const dependencies = await this.getWorkPackageDependencies(ctx, projectId);\r\n    const criticalPath = customCalculator.calculateCriticalPath(nativeData, dependencies);\r\n    await cacheManager.cacheCriticalPathAnalysis(projectId, criticalPath);\r\n    return criticalPath;\r\n  }\r\n  \r\n  /**\r\n   * Calculate and cache resource utilization\r\n   */\r\n  private async calculateAndCacheResourceUtilization(\r\n    ctx: Ctx,\r\n    projectId: string | number,\r\n    nativeData: NativeProjectMetrics,\r\n    variables: PMOVariables\r\n  ): Promise<ResourceUtilization[]> {\r\n    // For single project analysis, create array with just this project\r\n    const projectsData = [nativeData];\r\n    const startDate = new Date();\r\n    startDate.setMonth(startDate.getMonth() - 1); // Last month\r\n    const endDate = new Date();\r\n    \r\n    const utilization = customCalculator.calculateResourceUtilization(\r\n      projectsData,\r\n      variables,\r\n      startDate,\r\n      endDate\r\n    );\r\n    \r\n    await cacheManager.cacheResourceUtilization(String(projectId), utilization);\r\n    return utilization;\r\n  }\r\n  \r\n  /**\r\n   * Get multiple projects data efficiently (for portfolio analysis)\r\n   */\r\n  async getMultipleProjectsData(\r\n    ctx: Ctx, \r\n    projectIds: (string | number)[]\r\n  ): Promise<HybridProjectData[]> {\r\n    // Warm cache for better performance\r\n    await cacheManager.warmCache(projectIds);\r\n    \r\n    // Process projects in parallel for efficiency\r\n    const projectDataPromises = projectIds.map(id => this.getProjectData(ctx, id));\r\n    \r\n    return await Promise.all(projectDataPromises);\r\n  }\r\n  \r\n  /**\r\n   * Get portfolio-level analytics across multiple projects\r\n   */\r\n  async getPortfolioAnalytics(\r\n    ctx: Ctx,\r\n    projectIds: (string | number)[]\r\n  ): Promise<{\r\n    totalProjects: number;\r\n    overallHealth: 'Green' | 'Yellow' | 'Red';\r\n    totalBudget: number;\r\n    totalSpent: number;\r\n    averageProgress: number;\r\n    riskProjects: string[];\r\n    resourceConflicts: {\r\n      userId: string;\r\n      overallocation: number;\r\n      projects: string[];\r\n    }[];\r\n    recommendations: string[];\r\n  }> {\r\n    const cacheKey = `portfolio_${projectIds.join('_')}`;\r\n    const cached = await cacheManager.get<any>('portfolioAnalytics', cacheKey);\r\n    \r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    \r\n    // Get all project data\r\n    const projectsData = await this.getMultipleProjectsData(ctx, projectIds);\r\n    \r\n    // Aggregate portfolio metrics\r\n    const totalProjects = projectsData.length;\r\n    let totalBudget = 0;\r\n    let totalSpent = 0;\r\n    let totalProgress = 0;\r\n    const riskProjects: string[] = [];\r\n    const allResourceUtilization: ResourceUtilization[] = [];\r\n    \r\n    projectsData.forEach(project => {\r\n      const evm = project.calculations?.evm;\r\n      if (evm) {\r\n        totalBudget += evm.budgetAtCompletion;\r\n        totalSpent += evm.actualCost;\r\n        \r\n        if (evm.overallHealth === 'Red') {\r\n          riskProjects.push(project.native.name);\r\n        }\r\n      }\r\n      \r\n      totalProgress += project.native.overallPercentComplete;\r\n      \r\n      if (project.calculations?.resourceUtilization) {\r\n        allResourceUtilization.push(...project.calculations.resourceUtilization);\r\n      }\r\n    });\r\n    \r\n    const averageProgress = totalProjects > 0 ? totalProgress / totalProjects : 0;\r\n    \r\n    // Identify resource conflicts\r\n    const resourceConflicts = this.identifyResourceConflicts(allResourceUtilization, projectsData);\r\n    \r\n    // Determine overall portfolio health\r\n    const overallHealth = this.determinePortfolioHealth(projectsData);\r\n    \r\n    // Generate recommendations\r\n    const recommendations = this.generatePortfolioRecommendations(projectsData, resourceConflicts);\r\n    \r\n    const result = {\r\n      totalProjects,\r\n      overallHealth,\r\n      totalBudget: Math.round(totalBudget * 100) / 100,\r\n      totalSpent: Math.round(totalSpent * 100) / 100,\r\n      averageProgress: Math.round(averageProgress * 100) / 100,\r\n      riskProjects,\r\n      resourceConflicts,\r\n      recommendations\r\n    };\r\n    \r\n    // Cache portfolio analytics for 2 hours\r\n    await cacheManager.set('portfolioAnalytics', result, cacheKey, 7200);\r\n    \r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Get real-time project status (never cached)\r\n   */\r\n  async getProjectStatus(ctx: Ctx, projectId: string | number): Promise<{\r\n    isOnline: boolean;\r\n    lastUpdate: string;\r\n    currentProgress: number;\r\n    todaysActivity: number;\r\n    upcomingDeadlines: Array<{ task: string; date: string; daysRemaining: number }>;\r\n    alerts: Array<{ level: 'info' | 'warning' | 'error'; message: string }>;\r\n  }> {\r\n    const nativeData = await nativeExtractor.getProjectMetrics(ctx, projectId);\r\n    const statusSummary = await nativeExtractor.getProjectStatusSummary(ctx, projectId);\r\n    \r\n    // Calculate today's activity\r\n    const today = new Date().toISOString().split('T')[0];\r\n    const todaysActivity = nativeData.timeEntries\r\n      .filter(te => te.spentOn === today)\r\n      .reduce((sum, te) => sum + te.hours, 0);\r\n    \r\n    // Find upcoming deadlines\r\n    const upcomingDeadlines = nativeData.workPackages\r\n      .filter(wp => wp.dueDate && new Date(wp.dueDate) > new Date())\r\n      .sort((a, b) => new Date(a.dueDate!).getTime() - new Date(b.dueDate!).getTime())\r\n      .slice(0, 5)\r\n      .map(wp => ({\r\n        task: wp.subject,\r\n        date: wp.dueDate!,\r\n        daysRemaining: Math.ceil(\r\n          (new Date(wp.dueDate!).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)\r\n        )\r\n      }));\r\n    \r\n    // Generate alerts\r\n    const alerts: Array<{ level: 'info' | 'warning' | 'error'; message: string }> = [];\r\n    \r\n    if (statusSummary.riskLevel === 'High') {\r\n      alerts.push({ level: 'error', message: 'Project is at high risk' });\r\n    }\r\n    \r\n    if (statusSummary.issueCount > 3) {\r\n      alerts.push({ level: 'warning', message: `${statusSummary.issueCount} open issues` });\r\n    }\r\n    \r\n    if (upcomingDeadlines.some(d => d.daysRemaining <= 3)) {\r\n      alerts.push({ level: 'warning', message: 'Deadlines approaching within 3 days' });\r\n    }\r\n    \r\n    if (todaysActivity === 0) {\r\n      alerts.push({ level: 'info', message: 'No activity logged today' });\r\n    }\r\n    \r\n    return {\r\n      isOnline: true, // OpenProject is responding\r\n      lastUpdate: new Date().toISOString(),\r\n      currentProgress: nativeData.overallPercentComplete,\r\n      todaysActivity,\r\n      upcomingDeadlines,\r\n      alerts\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Invalidate caches when project data changes\r\n   */\r\n  async invalidateProjectCache(projectId: string | number): Promise<void> {\r\n    await cacheManager.clearProject(projectId);\r\n    \r\n    // Also invalidate any portfolio caches that include this project\r\n    await cacheManager.invalidate('portfolio');\r\n  }\r\n  \r\n  /**\r\n   * Get cache performance metrics\r\n   */\r\n  async getCachePerformance(): Promise<{\r\n    statistics: ReturnType<typeof cacheManager.getCacheStatistics>;\r\n    health: ReturnType<typeof cacheManager.getHealthStatus>;\r\n  }> {\r\n    return {\r\n      statistics: cacheManager.getCacheStatistics(),\r\n      health: cacheManager.getHealthStatus()\r\n    };\r\n  }\r\n  \r\n  // Private helper methods\r\n  \r\n  private shouldRecalculateEVM(cached: EVMCalculation, nativeData: NativeProjectMetrics): boolean {\r\n    // Recalculate if progress has changed significantly\r\n    const cachedDate = new Date(cached.calculationDate);\r\n    const daysSinceCalculation = (Date.now() - cachedDate.getTime()) / (1000 * 60 * 60 * 24);\r\n    \r\n    // Always recalculate if more than 1 day old\r\n    if (daysSinceCalculation > 1) {return true;}\r\n    \r\n    // Recalculate if project has significant progress (>5% change expected)\r\n    if (nativeData.overallPercentComplete > 80 && daysSinceCalculation > 0.5) {return true;}\r\n    \r\n    return false;\r\n  }\r\n  \r\n  private shouldRecalculateCriticalPath(cached: CriticalPathAnalysis, nativeData: NativeProjectMetrics): boolean {\r\n    const cachedDate = new Date(cached.analysisDate);\r\n    const daysSinceCalculation = (Date.now() - cachedDate.getTime()) / (1000 * 60 * 60 * 24);\r\n    \r\n    // Recalculate if more than 0.5 days old (critical path changes frequently)\r\n    return daysSinceCalculation > 0.5;\r\n  }\r\n  \r\n  private shouldRecalculateResources(cached: ResourceUtilization[], nativeData: NativeProjectMetrics): boolean {\r\n    // Resource utilization should be recalculated daily\r\n    return true; // For now, always recalculate for fresh data\r\n  }\r\n  \r\n  private async getWorkPackageDependencies(\r\n    ctx: Ctx, \r\n    projectId: string | number\r\n  ): Promise<Array<{ fromId: string; toId: string; type: string; lag?: number }>> {\r\n    // Simplified dependency extraction - in a real implementation,\r\n    // this would query OpenProject's relations API\r\n    return [];\r\n  }\r\n  \r\n  private assessComplexity(nativeData: NativeProjectMetrics): 'low' | 'medium' | 'high' {\r\n    const workPackageCount = nativeData.workPackages.length;\r\n    const timeEntryCount = nativeData.timeEntries.length;\r\n    \r\n    if (workPackageCount < 20 && timeEntryCount < 100) {return 'low';}\r\n    if (workPackageCount < 100 && timeEntryCount < 500) {return 'medium';}\r\n    return 'high';\r\n  }\r\n  \r\n  private identifyResourceConflicts(\r\n    allResourceUtilization: ResourceUtilization[],\r\n    projectsData: HybridProjectData[]\r\n  ): Array<{ userId: string; overallocation: number; projects: string[] }> {\r\n    const userProjects = new Map<string, string[]>();\r\n    const conflicts: Array<{ userId: string; overallocation: number; projects: string[] }> = [];\r\n    \r\n    // Build user-to-projects mapping\r\n    allResourceUtilization.forEach(resource => {\r\n      if (resource.overallocation) {\r\n        const projects = resource.projects.map(p => p.projectName);\r\n        const userId = String(resource.userId);\r\n        userProjects.set(userId, projects);\r\n        conflicts.push({\r\n          userId,\r\n          overallocation: resource.utilizationRate,\r\n          projects\r\n        });\r\n      }\r\n    });\r\n    \r\n    return conflicts;\r\n  }\r\n  \r\n  private determinePortfolioHealth(projectsData: HybridProjectData[]): 'Green' | 'Yellow' | 'Red' {\r\n    const healthCounts = { Green: 0, Yellow: 0, Red: 0 };\r\n    \r\n    projectsData.forEach(project => {\r\n      const health = project.calculations?.evm?.overallHealth || 'Yellow';\r\n      healthCounts[health]++;\r\n    });\r\n    \r\n    const totalProjects = projectsData.length;\r\n    const redRatio = healthCounts.Red / totalProjects;\r\n    const greenRatio = healthCounts.Green / totalProjects;\r\n    \r\n    if (redRatio > 0.3) {return 'Red';}\r\n    if (greenRatio < 0.5) {return 'Yellow';}\r\n    return 'Green';\r\n  }\r\n  \r\n  private generatePortfolioRecommendations(\r\n    projectsData: HybridProjectData[],\r\n    resourceConflicts: Array<{ userId: string; overallocation: number; projects: string[] }>\r\n  ): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    const riskProjects = projectsData.filter(p => p.calculations?.evm?.overallHealth === 'Red');\r\n    if (riskProjects.length > 0) {\r\n      recommendations.push(`Focus attention on ${riskProjects.length} high-risk projects`);\r\n    }\r\n    \r\n    if (resourceConflicts.length > 0) {\r\n      recommendations.push(`Address resource conflicts for ${resourceConflicts.length} team members`);\r\n    }\r\n    \r\n    const avgProgress = projectsData.reduce((sum, p) => sum + p.native.overallPercentComplete, 0) / projectsData.length;\r\n    if (avgProgress < 50) {\r\n      recommendations.push('Overall portfolio progress is below 50% - consider acceleration strategies');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const hybridManager = new HybridDataManager();","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/data/native-extractor.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withQuery' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1602,1604],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2716,2718],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":82,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":82,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2830,2832],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":88,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":88,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3076,3078],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":89,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":89,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3121,3123],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":90,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":90,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3174,3176],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":93,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":93,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3261,3263],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3304,3306],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":98,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":98,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3456,3458],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":122,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":122,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4156,4158],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4224,4226],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":128,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":128,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4393,4395],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4436,4438],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":133,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":133,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4606,4608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":136,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":136,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4715,4717],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4761,4763],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":141,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":141,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4913,4915],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":19,"suggestions":[{"fix":{"range":[5677,5751],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":244,"column":102,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":244,"endColumn":104,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8541,8543],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":245,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":245,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8632,8634],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":246,"column":85,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":246,"endColumn":87,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8725,8727],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":247,"column":133,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":247,"endColumn":135,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8866,8868],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":19,"suggestions":[{"fix":{"range":[10155,10234],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":330,"column":32,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":330,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":330,"column":65,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":330,"endColumn":75},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":338,"column":15,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":338,"endColumn":41},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":340,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":340,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/data/native-extractor.ts\r\nimport { opFetch, parseCollectionMeta, withQuery } from \"../util/op\";\r\nimport type { \r\n  NativeProjectMetrics, \r\n  NativeWorkPackageData, \r\n  NativeTimeEntry, \r\n  NativeBudgetData \r\n} from \"../types/hybrid-data\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * Native OpenProject Data Extractor\r\n * \r\n * Extracts calculated data directly from OpenProject API without modification.\r\n * This leverages OpenProject's native calculation engine for maximum accuracy\r\n * and performance.\r\n */\r\nexport class NativeOpenProjectExtractor {\r\n  \r\n  /**\r\n   * Extract comprehensive project metrics using OpenProject's native calculations\r\n   */\r\n  async getProjectMetrics(ctx: Ctx, projectId: string | number): Promise<NativeProjectMetrics> {\r\n    const { env } = ctx;\r\n    \r\n    // Get project info\r\n    const { json: project } = await opFetch<any>(env, `/api/v3/projects/${projectId}`);\r\n    \r\n    // Get all work packages with their native calculated fields\r\n    const wpData = await this.getWorkPackagesData(ctx, projectId);\r\n    \r\n    // Get time entries for cost calculations\r\n    const timeEntries = await this.getTimeEntriesData(ctx, projectId);\r\n    \r\n    // Get budget data (limited by OpenProject API)\r\n    const budgetInfo = await this.getBudgetData(ctx, projectId);\r\n    \r\n    // Calculate aggregated metrics using OpenProject's native data\r\n    const metrics = this.calculateAggregatedMetrics(wpData.workPackages, timeEntries);\r\n    \r\n    return {\r\n      id: project.id,\r\n      name: project.name,\r\n      identifier: project.identifier,\r\n      status: project.status || 'active',\r\n      statusExplanation: project.statusExplanation,\r\n      \r\n      // Use OpenProject's native calculated values\r\n      ...metrics,\r\n      \r\n      // Raw data for custom calculations\r\n      workPackages: wpData.workPackages,\r\n      timeEntries,\r\n      budgetInfo,\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Get work packages with all native OpenProject calculated fields\r\n   */\r\n  private async getWorkPackagesData(ctx: Ctx, projectId: string | number): Promise<{\r\n    workPackages: NativeWorkPackageData[];\r\n    meta: any;\r\n  }> {\r\n    const { env } = ctx;\r\n    \r\n    // Get work packages with full details\r\n    const params: Record<string, unknown> = {\r\n      pageSize: 1000, // Large page size to get most projects in one call\r\n      sortBy: JSON.stringify([[\"id\", \"asc\"]]),\r\n      // Removed non-standard 'select' parameter to ensure compatibility\r\n    };\r\n    \r\n    const { json } = await opFetch<any>(env, `/api/v3/projects/${projectId}/work_packages`, {\r\n      params\r\n    });\r\n    \r\n    const meta = parseCollectionMeta(json);\r\n    const workPackages: NativeWorkPackageData[] = (json?._embedded?.elements || []).map((wp: any) => ({\r\n      id: wp.id,\r\n      subject: wp.subject,\r\n      percentageDone: wp.percentageDone || 0, // OpenProject's native calculation\r\n      estimatedTime: wp.estimatedTime,\r\n      spentTime: wp.spentTime,\r\n      startDate: wp.startDate,\r\n      dueDate: wp.dueDate,\r\n      status: {\r\n        id: wp._links?.status?.href?.split('/').pop() || 'unknown',\r\n        name: wp.status?.name || 'Unknown',\r\n        isClosed: wp.status?.isClosed || false\r\n      },\r\n      type: {\r\n        id: wp._links?.type?.href?.split('/').pop() || 'unknown',\r\n        name: wp.type?.name || 'Unknown'\r\n      },\r\n      assignee: wp._links?.assignee ? {\r\n        id: wp._links.assignee.href.split('/').pop(),\r\n        name: wp.assignee?.name || 'Unknown'\r\n      } : undefined,\r\n      _links: wp._links\r\n    }));\r\n    \r\n    return { workPackages, meta };\r\n  }\r\n  \r\n  /**\r\n   * Get time entries with native OpenProject data\r\n   */\r\n  private async getTimeEntriesData(ctx: Ctx, projectId: string | number): Promise<NativeTimeEntry[]> {\r\n    const { env } = ctx;\r\n    \r\n    const params: Record<string, unknown> = {\r\n      pageSize: 1000,\r\n      sortBy: JSON.stringify([['spentOn', 'desc']]),\r\n      filters: JSON.stringify([\r\n        { project: { operator: '=', values: [String(projectId)] }}\r\n      ])\r\n    };\r\n    \r\n    const { json } = await opFetch<any>(env, '/api/v3/time_entries', { params });\r\n    \r\n    return (json?._embedded?.elements || []).map((te: any) => ({\r\n      id: te.id,\r\n      hours: te.hours || 0, // OpenProject's native hours tracking\r\n      spentOn: te.spentOn,\r\n      comment: te.comment,\r\n      user: {\r\n        id: te._links?.user?.href?.split('/').pop() || 'unknown',\r\n        name: te.user?.name || 'Unknown'\r\n      },\r\n      workPackage: te._links?.workPackage ? {\r\n        id: te._links.workPackage.href.split('/').pop(),\r\n        subject: te.workPackage?.subject || 'Unknown'\r\n      } : undefined,\r\n      project: {\r\n        id: te._links?.project?.href?.split('/').pop() || projectId,\r\n        name: te.project?.name || 'Unknown'\r\n      },\r\n      activity: te._links?.activity ? {\r\n        id: te._links.activity.href.split('/').pop(),\r\n        name: te.activity?.name || 'Unknown'\r\n      } : undefined\r\n    }));\r\n  }\r\n  \r\n  /**\r\n   * Get budget data (currently limited by OpenProject API)\r\n   */\r\n  private async getBudgetData(ctx: Ctx, projectId: string | number): Promise<NativeBudgetData | undefined> {\r\n    const { env } = ctx;\r\n    \r\n    try {\r\n      const { json } = await opFetch<any>(env, `/api/v3/projects/${projectId}/budgets`);\r\n      \r\n      if (json?._embedded?.elements?.length > 0) {\r\n        const budget = json._embedded.elements[0];\r\n        return {\r\n          id: budget.id,\r\n          subject: budget.subject\r\n          // Note: OpenProject budget API is minimal, we'll extend via custom fields\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // Budget module might not be enabled or no budgets exist\r\n      console.warn(`No budget data available for project ${projectId}:`, error);\r\n    }\r\n    \r\n    return undefined;\r\n  }\r\n  \r\n  /**\r\n   * Calculate aggregated metrics from native OpenProject data\r\n   */\r\n  private calculateAggregatedMetrics(\r\n    workPackages: NativeWorkPackageData[], \r\n    timeEntries: NativeTimeEntry[]\r\n  ) {\r\n    // Use OpenProject's native calculated values where possible\r\n    const totalEstimatedHours = workPackages.reduce((sum, wp) => {\r\n      const hours = this.parseISO8601Duration(wp.estimatedTime);\r\n      return sum + hours;\r\n    }, 0);\r\n    \r\n    const totalSpentHours = timeEntries.reduce((sum, te) => sum + te.hours, 0);\r\n    \r\n    // Calculate overall completion using OpenProject's percentageDone values\r\n    const totalWorkPackages = workPackages.length;\r\n    const completedWorkPackages = workPackages.filter(wp => wp.status.isClosed).length;\r\n    const activeWorkPackages = totalWorkPackages - completedWorkPackages;\r\n    \r\n    // Weighted average completion based on estimated hours\r\n    let totalWeightedCompletion = 0;\r\n    let totalWeight = 0;\r\n    \r\n    workPackages.forEach(wp => {\r\n      const weight = this.parseISO8601Duration(wp.estimatedTime) || 1; // Default weight of 1 if no estimate\r\n      totalWeightedCompletion += (wp.percentageDone / 100) * weight;\r\n      totalWeight += weight;\r\n    });\r\n    \r\n    const overallPercentComplete = totalWeight > 0 ? (totalWeightedCompletion / totalWeight) * 100 : 0;\r\n    \r\n    return {\r\n      totalEstimatedHours,\r\n      totalSpentHours,\r\n      overallPercentComplete: Math.round(overallPercentComplete * 100) / 100,\r\n      activeWorkPackages,\r\n      completedWorkPackages,\r\n      totalWorkPackages\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Parse ISO 8601 duration to hours (OpenProject format: PT8H, PT1D, etc.)\r\n   */\r\n  private parseISO8601Duration(duration?: string): number {\r\n    if (!duration) {return 0;}\r\n    \r\n    // Match PT followed by numbers and units (H for hours, D for days)\r\n    const match = duration.match(/^PT(?:(\\d+(?:\\.\\d+)?)H)?(?:(\\d+(?:\\.\\d+)?)D)?$/);\r\n    if (!match) {return 0;}\r\n    \r\n    const hours = parseFloat(match[1] || '0');\r\n    const days = parseFloat(match[2] || '0');\r\n    \r\n    // Assume 8 hours per day for day-to-hour conversion\r\n    return hours + (days * 8);\r\n  }\r\n  \r\n  /**\r\n   * Get project-specific configuration data from OpenProject\r\n   */\r\n  async getProjectConfiguration(ctx: Ctx, projectId: string | number): Promise<{\r\n    types: any[];\r\n    statuses: any[];\r\n    priorities: any[];\r\n    users: any[];\r\n    customFields: any[];\r\n  }> {\r\n    const { env } = ctx;\r\n    \r\n    // Get all configuration data in parallel for efficiency\r\n    const [typesData, statusesData, prioritiesData, usersData, customFieldsData] = await Promise.all([\r\n      opFetch<any>(env, `/api/v3/projects/${projectId}/types`).then(r => r.json?._embedded?.elements || []),\r\n      opFetch<any>(env, '/api/v3/statuses').then(r => r.json?._embedded?.elements || []),\r\n      opFetch<any>(env, '/api/v3/priorities').then(r => r.json?._embedded?.elements || []),\r\n      opFetch<any>(env, `/api/v3/projects/${projectId}/memberships`).then(r => r.json?._embedded?.elements?.map((m: any) => m.user) || []),\r\n      this.getProjectCustomFields(ctx, projectId)\r\n    ]);\r\n    \r\n    return {\r\n      types: typesData,\r\n      statuses: statusesData,\r\n      priorities: prioritiesData,\r\n      users: usersData,\r\n      customFields: customFieldsData\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Get project custom fields (for PMO variables storage)\r\n   */\r\n  private async getProjectCustomFields(ctx: Ctx, projectId: string | number): Promise<any[]> {\r\n    const { env } = ctx;\r\n    \r\n    try {\r\n      // Get project schema which includes custom field definitions\r\n      const { json: schema } = await opFetch<any>(env, `/api/v3/projects/${projectId}/form`);\r\n      \r\n      // Extract custom field definitions from schema\r\n      const customFields: any[] = [];\r\n      \r\n      if (schema?._embedded?.schema) {\r\n        Object.entries(schema._embedded.schema).forEach(([key, value]: [string, any]) => {\r\n          if (key.startsWith('customField')) {\r\n            customFields.push({\r\n              key,\r\n              name: value.name,\r\n              type: value.type,\r\n              required: value.required,\r\n              hasDefault: value.hasDefault,\r\n              writable: value.writable\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      return customFields;\r\n    } catch (error) {\r\n      console.warn(`Could not fetch custom fields for project ${projectId}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get real-time project status summary\r\n   */\r\n  async getProjectStatusSummary(ctx: Ctx, projectId: string | number): Promise<{\r\n    isHealthy: boolean;\r\n    issueCount: number;\r\n    riskLevel: 'Low' | 'Medium' | 'High';\r\n    nextMilestone?: {\r\n      name: string;\r\n      date: string;\r\n      daysRemaining: number;\r\n    };\r\n  }> {\r\n    const metrics = await this.getProjectMetrics(ctx, projectId);\r\n    \r\n    // Calculate health based on native OpenProject data\r\n    const completionRate = metrics.overallPercentComplete;\r\n    const hasOverdueItems = metrics.workPackages.some(wp => \r\n      wp.dueDate && new Date(wp.dueDate) < new Date() && !wp.status.isClosed\r\n    );\r\n    \r\n    const issueCount = metrics.workPackages.filter(wp => \r\n      wp.subject.toLowerCase().includes('issue') || \r\n      wp.subject.toLowerCase().includes('bug') ||\r\n      wp.subject.toLowerCase().includes('problem')\r\n    ).length;\r\n    \r\n    // Simple risk assessment based on native data\r\n    let riskLevel: 'Low' | 'Medium' | 'High' = 'Low';\r\n    if (hasOverdueItems || completionRate < 50) {riskLevel = 'Medium';}\r\n    if (issueCount > 5 || completionRate < 25) {riskLevel = 'High';}\r\n    \r\n    // Find next milestone\r\n    const upcomingMilestone = metrics.workPackages\r\n      .filter(wp => wp.dueDate && new Date(wp.dueDate) > new Date())\r\n      .sort((a, b) => new Date(a.dueDate!).getTime() - new Date(b.dueDate!).getTime())[0];\r\n    \r\n    return {\r\n      isHealthy: !hasOverdueItems && completionRate > 25 && issueCount <= 5,\r\n      issueCount,\r\n      riskLevel,\r\n      nextMilestone: upcomingMilestone ? {\r\n        name: upcomingMilestone.subject,\r\n        date: upcomingMilestone.dueDate!,\r\n        daysRemaining: Math.ceil(\r\n          (new Date(upcomingMilestone.dueDate!).getTime() - new Date().getTime()) / \r\n          (1000 * 60 * 60 * 24)\r\n        )\r\n      } : undefined\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const nativeExtractor = new NativeOpenProjectExtractor();","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/data/variable-manager.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4216,4218],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":19,"suggestions":[{"fix":{"range":[7635,7710],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":19,"suggestions":[{"fix":{"range":[9072,9141],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'current' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":299,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctx' is defined but never used. Allowed unused args must match /^_/u.","line":466,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":466,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":467,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":468,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":468,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctx' is defined but never used. Allowed unused args must match /^_/u.","line":485,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":485,"endColumn":34}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/data/variable-manager.ts\r\nimport { opFetch } from \"../util/op\";\r\nimport { PMOVariablesSchema, DEFAULT_PMO_VARIABLES } from \"../types/hybrid-data\";\r\nimport type { PMOVariables } from \"../types/hybrid-data\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * PMO Variable Manager\r\n * \r\n * Manages PMO variables using OpenProject's custom field system.\r\n * Provides a bridge between PMO configuration needs and OpenProject's\r\n * extensible custom field architecture.\r\n * \r\n * Variables are stored as:\r\n * 1. Project custom fields for project-specific variables\r\n * 2. System-wide defaults for organizational standards\r\n * 3. User custom fields for user-specific rates/preferences\r\n */\r\nexport class PMOVariableManager {\r\n  \r\n  // Custom field name mapping for PMO variables\r\n  private readonly customFieldMapping = {\r\n    standardLaborRate: 'pmo_standard_labor_rate',\r\n    overtimeMultiplier: 'pmo_overtime_multiplier',\r\n    contingencyPercentage: 'pmo_contingency_percentage',\r\n    managementReservePercentage: 'pmo_management_reserve_percentage',\r\n    costPerformanceThreshold: 'pmo_cost_performance_threshold',\r\n    schedulePerformanceThreshold: 'pmo_schedule_performance_threshold',\r\n    qualityThreshold: 'pmo_quality_threshold',\r\n    defaultUtilizationRate: 'pmo_default_utilization_rate',\r\n    maxAllocation: 'pmo_max_allocation',\r\n    workingHoursPerDay: 'pmo_working_hours_per_day',\r\n    workingDaysPerWeek: 'pmo_working_days_per_week',\r\n    riskTolerance: 'pmo_risk_tolerance',\r\n    riskAppetite: 'pmo_risk_appetite',\r\n    evmMethod: 'pmo_evm_method',\r\n    forecastMethod: 'pmo_forecast_method',\r\n    industryType: 'pmo_industry_type',\r\n    complexityFactor: 'pmo_complexity_factor',\r\n    technologyRiskFactor: 'pmo_technology_risk_factor',\r\n    approvalThreshold: 'pmo_approval_threshold',\r\n    changeControlThreshold: 'pmo_change_control_threshold',\r\n    escalationThreshold: 'pmo_escalation_threshold'\r\n  };\r\n  \r\n  /**\r\n   * Get PMO variables for a specific project\r\n   * Combines project-specific overrides with organizational defaults\r\n   */\r\n  async getProjectVariables(ctx: Ctx, projectId: string | number): Promise<PMOVariables> {\r\n    // Start with default values\r\n    let variables: PMOVariables = { ...DEFAULT_PMO_VARIABLES };\r\n    \r\n    // Get organizational defaults (if configured)\r\n    const orgDefaults = await this.getOrganizationalDefaults(ctx);\r\n    if (orgDefaults) {\r\n      variables = { ...variables, ...orgDefaults } as PMOVariables;\r\n    }\r\n    \r\n    // Get project-specific overrides\r\n    const projectOverrides = await this.getProjectSpecificVariables(ctx, projectId);\r\n    if (projectOverrides) {\r\n      variables = { ...variables, ...projectOverrides } as PMOVariables;\r\n    }\r\n    \r\n    // Validate and return\r\n    return variables;\r\n  }\r\n  \r\n  /**\r\n   * Set PMO variables for a project using custom fields\r\n   */\r\n  async setProjectVariables(\r\n    ctx: Ctx, \r\n    projectId: string | number, \r\n    variables: Partial<PMOVariables>\r\n  ): Promise<PMOVariables> {\r\n    const { env } = ctx;\r\n    \r\n    // Validate input\r\n    const currentVariables = await this.getProjectVariables(ctx, projectId);\r\n    const validatedVariables = { ...currentVariables, ...variables } as PMOVariables;\r\n    \r\n    // Convert to custom field format\r\n    const customFieldUpdates: any = {};\r\n    \r\n    Object.entries(variables).forEach(([key, value]) => {\r\n      const customFieldName = this.customFieldMapping[key as keyof PMOVariables];\r\n      if (customFieldName && value !== undefined) {\r\n        customFieldUpdates[`customField_${customFieldName}`] = this.serializeValue(value);\r\n      }\r\n    });\r\n    \r\n    // Update project custom fields via form API\r\n    const { json: form } = await opFetch<any>(env, `/api/v3/projects/${projectId}/form`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(customFieldUpdates)\r\n    });\r\n    \r\n    if (form?.validationErrors && Object.keys(form.validationErrors).length > 0) {\r\n      throw new Error(`Validation errors: ${JSON.stringify(form.validationErrors)}`);\r\n    }\r\n    \r\n    // Commit the changes if form is valid\r\n    if (form?._links?.commit) {\r\n      await opFetch<any>(env, form._links.commit.href, {\r\n        method: form._links.commit.method || 'PATCH',\r\n        body: JSON.stringify(form.payload)\r\n      });\r\n    }\r\n    \r\n    return validatedVariables;\r\n  }\r\n  \r\n  /**\r\n   * Get organizational default variables (stored at system level)\r\n   */\r\n  async getOrganizationalDefaults(ctx: Ctx): Promise<Partial<PMOVariables> | null> {\r\n    // In a real implementation, this could be stored as:\r\n    // 1. Global custom fields\r\n    // 2. Configuration in a special \"PMO Settings\" project\r\n    // 3. Environment variables\r\n    // 4. Database configuration table\r\n    \r\n    // For now, we'll try to get from environment or use defaults\r\n    const { env } = ctx;\r\n    \r\n    const orgDefaults: Partial<PMOVariables> = {};\r\n    \r\n    // Try to get from environment variables (prefixed with PMO_DEFAULT_)\r\n    if (env.PMO_DEFAULT_STANDARD_LABOR_RATE) {\r\n      orgDefaults.standardLaborRate = parseFloat(env.PMO_DEFAULT_STANDARD_LABOR_RATE);\r\n    }\r\n    \r\n    if (env.PMO_DEFAULT_WORKING_HOURS_PER_DAY) {\r\n      orgDefaults.workingHoursPerDay = parseInt(env.PMO_DEFAULT_WORKING_HOURS_PER_DAY);\r\n    }\r\n    \r\n    if (env.PMO_DEFAULT_UTILIZATION_RATE) {\r\n      orgDefaults.defaultUtilizationRate = parseFloat(env.PMO_DEFAULT_UTILIZATION_RATE);\r\n    }\r\n    \r\n    if (env.PMO_DEFAULT_RISK_TOLERANCE) {\r\n      orgDefaults.riskTolerance = env.PMO_DEFAULT_RISK_TOLERANCE as PMOVariables['riskTolerance'];\r\n    }\r\n    \r\n    if (env.PMO_DEFAULT_INDUSTRY_TYPE) {\r\n      orgDefaults.industryType = env.PMO_DEFAULT_INDUSTRY_TYPE;\r\n    }\r\n    \r\n    return Object.keys(orgDefaults).length > 0 ? orgDefaults : null;\r\n  }\r\n  \r\n  /**\r\n   * Set organizational default variables\r\n   */\r\n  async setOrganizationalDefaults(\r\n    ctx: Ctx, \r\n    defaults: Partial<PMOVariables>\r\n  ): Promise<void> {\r\n    // In a production system, this would store the defaults in a persistent way\r\n    // For now, we'll just validate the input\r\n    const currentDefaults = await this.getOrganizationalDefaults(ctx) || {};\r\n    const updatedDefaults = { ...DEFAULT_PMO_VARIABLES, ...currentDefaults, ...defaults };\r\n    \r\n    // Ensure all required fields are present and validate\r\n    const completeDefaults = { ...DEFAULT_PMO_VARIABLES, ...updatedDefaults };\r\n    PMOVariablesSchema.parse(completeDefaults);\r\n    \r\n    // In a real implementation, persist these defaults\r\n  import('../util/logger').then(m => m.log.debug('org_defaults_stub_persist', { count: Object.keys(defaults).length })).catch(()=>{});\r\n  }\r\n  \r\n  /**\r\n   * Get project-specific variable overrides from custom fields\r\n   */\r\n  private async getProjectSpecificVariables(\r\n    ctx: Ctx, \r\n    projectId: string | number\r\n  ): Promise<Partial<PMOVariables> | null> {\r\n    const { env } = ctx;\r\n    \r\n    try {\r\n      // Get project with custom fields\r\n      const { json: project } = await opFetch<any>(env, `/api/v3/projects/${projectId}`);\r\n      \r\n      const variables: Partial<PMOVariables> = {};\r\n      \r\n      // Extract custom field values\r\n      Object.entries(this.customFieldMapping).forEach(([varKey, customFieldName]) => {\r\n        const customFieldKey = `customField${customFieldName}`;\r\n        const value = project[customFieldKey];\r\n        \r\n        if (value !== undefined && value !== null) {\r\n          (variables as any)[varKey] = this.deserializeValue(value, varKey as keyof PMOVariables);\r\n        }\r\n      });\r\n      \r\n      return Object.keys(variables).length > 0 ? variables : null;\r\n    } catch (error) {\r\n      console.warn(`Could not fetch project variables for ${projectId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get user-specific variables (rates, preferences, etc.)\r\n   */\r\n  async getUserVariables(ctx: Ctx, userId: string | number): Promise<{\r\n    laborRate?: number;\r\n    utilizationRate?: number;\r\n    workingHoursPerDay?: number;\r\n    overtimeMultiplier?: number;\r\n    skillLevel?: 'junior' | 'intermediate' | 'senior' | 'expert';\r\n    costCenter?: string;\r\n  }> {\r\n    const { env } = ctx;\r\n    \r\n    try {\r\n      const { json: user } = await opFetch<any>(env, `/api/v3/users/${userId}`);\r\n      \r\n      const userVars: any = {};\r\n      \r\n      // Map user custom fields to variables\r\n      if (user.customField_labor_rate) {\r\n        userVars.laborRate = parseFloat(user.customField_labor_rate);\r\n      }\r\n      \r\n      if (user.customField_utilization_rate) {\r\n        userVars.utilizationRate = parseFloat(user.customField_utilization_rate);\r\n      }\r\n      \r\n      if (user.customField_working_hours_per_day) {\r\n        userVars.workingHoursPerDay = parseInt(user.customField_working_hours_per_day);\r\n      }\r\n      \r\n      if (user.customField_skill_level) {\r\n        userVars.skillLevel = user.customField_skill_level;\r\n      }\r\n      \r\n      if (user.customField_cost_center) {\r\n        userVars.costCenter = user.customField_cost_center;\r\n      }\r\n      \r\n      return userVars;\r\n    } catch (error) {\r\n      console.warn(`Could not fetch user variables for ${userId}:`, error);\r\n      return {};\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get variables for multiple projects efficiently\r\n   */\r\n  async getMultipleProjectVariables(\r\n    ctx: Ctx, \r\n    projectIds: (string | number)[]\r\n  ): Promise<Map<string | number, PMOVariables>> {\r\n    const variablesMap = new Map<string | number, PMOVariables>();\r\n    \r\n    // Process in parallel for efficiency\r\n    const promises = projectIds.map(async (projectId) => {\r\n      const variables = await this.getProjectVariables(ctx, projectId);\r\n      variablesMap.set(projectId, variables);\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    return variablesMap;\r\n  }\r\n  \r\n  /**\r\n   * Validate variable changes against organizational policies\r\n   */\r\n  async validateVariableChanges(\r\n    ctx: Ctx,\r\n    projectId: string | number,\r\n    changes: Partial<PMOVariables>\r\n  ): Promise<{\r\n    isValid: boolean;\r\n    violations: Array<{\r\n      field: string;\r\n      value: any;\r\n      violation: string;\r\n      severity: 'error' | 'warning';\r\n    }>;\r\n    warnings: string[];\r\n  }> {\r\n    const violations: Array<{\r\n      field: string;\r\n      value: any;\r\n      violation: string;\r\n      severity: 'error' | 'warning';\r\n    }> = [];\r\n    \r\n    const warnings: string[] = [];\r\n    \r\n    // Get current variables for comparison\r\n    const current = await this.getProjectVariables(ctx, projectId);\r\n    const orgDefaults = await this.getOrganizationalDefaults(ctx);\r\n    \r\n    // Validate against organizational policies\r\n    Object.entries(changes).forEach(([field, value]) => {\r\n      switch (field) {\r\n        case 'standardLaborRate':\r\n          if (typeof value === 'number') {\r\n            if (value < 20) {\r\n              violations.push({\r\n                field,\r\n                value,\r\n                violation: 'Labor rate below minimum threshold ($20/hour)',\r\n                severity: 'error'\r\n              });\r\n            } else if (value > 200) {\r\n              warnings.push(`High labor rate (${value}/hour) - consider approval`);\r\n            }\r\n          }\r\n          break;\r\n          \r\n        case 'costPerformanceThreshold':\r\n          if (typeof value === 'number' && value < 0.8) {\r\n            violations.push({\r\n              field,\r\n              value,\r\n              violation: 'Cost performance threshold too low (minimum 0.8)',\r\n              severity: 'error'\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case 'maxAllocation':\r\n          if (typeof value === 'number' && value > 1.5) {\r\n            violations.push({\r\n              field,\r\n              value,\r\n              violation: 'Maximum allocation exceeds 150% - requires approval',\r\n              severity: 'warning'\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case 'workingHoursPerDay':\r\n          if (typeof value === 'number' && value > 10) {\r\n            violations.push({\r\n              field,\r\n              value,\r\n              violation: 'Working hours per day exceeds 10 hours',\r\n              severity: 'warning'\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    });\r\n    \r\n    // Check for significant deviations from organizational defaults\r\n    if (orgDefaults) {\r\n      Object.entries(changes).forEach(([field, value]) => {\r\n        const orgDefault = (orgDefaults as any)[field];\r\n        if (orgDefault !== undefined && typeof value === 'number' && typeof orgDefault === 'number') {\r\n          const deviation = Math.abs((value - orgDefault) / orgDefault);\r\n          if (deviation > 0.5) { // 50% deviation\r\n            warnings.push(`${field} deviates significantly from organizational default`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    return {\r\n      isValid: violations.filter(v => v.severity === 'error').length === 0,\r\n      violations,\r\n      warnings\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Export variables for backup or migration\r\n   */\r\n  async exportProjectVariables(\r\n    ctx: Ctx, \r\n    projectIds: (string | number)[]\r\n  ): Promise<{\r\n    exportDate: string;\r\n    organizationalDefaults: Partial<PMOVariables> | null;\r\n    projects: Array<{\r\n      projectId: string | number;\r\n      projectName: string;\r\n      variables: PMOVariables;\r\n    }>;\r\n  }> {\r\n    const projectVariables = await this.getMultipleProjectVariables(ctx, projectIds);\r\n    const orgDefaults = await this.getOrganizationalDefaults(ctx);\r\n    \r\n    const projects = await Promise.all(\r\n      Array.from(projectVariables.entries()).map(async ([projectId, variables]) => {\r\n        // Get project name\r\n        const { json: project } = await opFetch<any>(ctx.env, `/api/v3/projects/${projectId}`);\r\n        \r\n        return {\r\n          projectId,\r\n          projectName: project.name,\r\n          variables\r\n        };\r\n      })\r\n    );\r\n    \r\n    return {\r\n      exportDate: new Date().toISOString(),\r\n      organizationalDefaults: orgDefaults,\r\n      projects\r\n    };\r\n  }\r\n  \r\n  // Helper methods\r\n  \r\n  private serializeValue(value: any): string {\r\n    if (typeof value === 'object') {\r\n      return JSON.stringify(value);\r\n    }\r\n    return String(value);\r\n  }\r\n  \r\n  private deserializeValue(value: string, key: keyof PMOVariables): any {\r\n    // Handle different data types based on the key\r\n    switch (key) {\r\n      case 'riskTolerance':\r\n      case 'riskAppetite':\r\n      case 'evmMethod':\r\n      case 'forecastMethod':\r\n      case 'industryType':\r\n        return value; // String values\r\n        \r\n      case 'standardLaborRate':\r\n      case 'overtimeMultiplier':\r\n      case 'contingencyPercentage':\r\n      case 'managementReservePercentage':\r\n      case 'costPerformanceThreshold':\r\n      case 'schedulePerformanceThreshold':\r\n      case 'qualityThreshold':\r\n      case 'defaultUtilizationRate':\r\n      case 'maxAllocation':\r\n      case 'complexityFactor':\r\n      case 'technologyRiskFactor':\r\n        return parseFloat(value);\r\n        \r\n      case 'workingHoursPerDay':\r\n      case 'workingDaysPerWeek':\r\n      case 'approvalThreshold':\r\n      case 'changeControlThreshold':\r\n      case 'escalationThreshold':\r\n        return parseInt(value);\r\n        \r\n      default:\r\n        // Try to parse as JSON first, then as string\r\n        try {\r\n          return JSON.parse(value);\r\n        } catch {\r\n          return value;\r\n        }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get variable history and audit trail\r\n   */\r\n  async getVariableHistory(\r\n    ctx: Ctx, \r\n    projectId: string | number,\r\n    field?: keyof PMOVariables\r\n  ): Promise<Array<{\r\n    timestamp: string;\r\n    field: string;\r\n    oldValue: any;\r\n    newValue: any;\r\n    changedBy: string;\r\n    reason?: string;\r\n  }>> {\r\n    // In a real implementation, this would query an audit log\r\n    // For now, return empty array\r\n    return [];\r\n  }\r\n  \r\n  /**\r\n   * Create custom fields for PMO variables if they don't exist\r\n   */\r\n  async ensurePMOCustomFields(ctx: Ctx): Promise<void> {\r\n    // In a real implementation, this would:\r\n    // 1. Check if PMO custom fields exist\r\n    // 2. Create them if they don't exist\r\n    // 3. Set appropriate permissions and validations\r\n    \r\n  import('../util/logger').then(m => m.log.debug('pmo_custom_fields_stub')).catch(()=>{});\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const variableManager = new PMOVariableManager();","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/index.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/index.ts\r\nimport { Hono } from \"hono\";\r\nimport { cors } from \"hono/cors\";\r\nimport { StreamableHTTPTransport } from \"@hono/mcp\";\r\nimport { securityMiddleware, trackSseConnection } from './middleware/security';\r\nimport { buildServer } from \"./server\";\r\nimport { handleSSEConnection } from \"./sse\";\r\n\r\ntype Bindings = {\r\n  OP_BASE_URL: string;\r\n  OP_TOKEN: string;\r\n  ALLOWED_ORIGINS?: string;\r\n  OP_ALLOW_INSECURE_HTTP?: string;\r\n  SENTRY_DSN?: string;\r\n  SSE_ENABLED?: string;\r\n};\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>();\r\n\r\n// CORS: allow inspector origins + mcp-session-id header + SSE headers\r\nconst corsConfig = {\r\n  origin: (origin: string | undefined, c: any) => {\r\n    const allow = c.env.ALLOWED_ORIGINS?.split(',').map((s: string) => s.trim()).filter(Boolean) ?? [];\r\n    if (!allow.length) {return '';}\r\n    if (!origin) {return allow[0];}\r\n    return allow.includes(origin) ? origin : '';\r\n  },\r\n  allowHeaders: [\"Content-Type\", \"mcp-session-id\", \"Last-Event-ID\", \"Cache-Control\", \"x-mcp-auth\"],\r\n  allowMethods: [\"GET\", \"POST\", \"DELETE\", \"OPTIONS\"],\r\n  exposeHeaders: [\"Content-Type\", \"Cache-Control\"],\r\n};\r\n\r\napp.use(\"/mcp\", cors(corsConfig));\r\n// Phase 2 security middleware (rate limit, headers, size limit, optional auth)\r\napp.use('*', securityMiddleware({\r\n  requestsPerWindow: 200,\r\n  windowMs: 60_000,\r\n  maxBodyBytes: 512 * 1024,\r\n  requireAuthHeader: false\r\n}));\r\n\r\n// Optional SSE route (disabled by default per project philosophy)\r\napp.use(\"/sse\", cors(corsConfig));\r\napp.get(\"/sse\", async (c) => {\r\n  // Check if SSE is enabled via environment variable\r\n  const sseEnabled = c.env.SSE_ENABLED?.toLowerCase() === \"true\";\r\n  \r\n  if (!sseEnabled) {\r\n    return c.json({ \r\n      error: \"SSE endpoint is disabled\", \r\n      message: \"Set SSE_ENABLED=true to enable Server-Sent Events\" \r\n    }, 404);\r\n  }\r\n\r\n  // Set global ENV for this request context\r\n  (globalThis as any).ENV = c.env;\r\n\r\n  return trackSseConnection(() => handleSSEConnection(c), 25).catch(() => c.json({ error: 'too_many_sse_connections' }, 429));\r\n});\r\n\r\n// MCP route using our modular server (primary transport)\r\napp.all(\"/mcp\", async (c) => {\r\n  // Enforce JSON-RPC over POST; return consistent 405 for other methods (improves test stability vs ambiguous 406)\r\n  if (c.req.method !== 'POST') {\r\n    return c.json({ error: 'Method Not Allowed', allowed: ['POST'] }, 405);\r\n  }\r\n  const transport = new StreamableHTTPTransport();\r\n  const server = buildServer();\r\n\r\n  // Set global ENV for this request context\r\n  (globalThis as any).ENV = c.env;\r\n\r\n  await server.connect(transport as any);\r\n  return transport.handleRequest(c);\r\n});\r\n\r\nexport default app;","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/middleware/security.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":36,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":36,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2136,2138],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":38,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":38,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2377,2379],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":48,"column":116,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":48,"endColumn":128}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/middleware/security.ts\r\nimport type { Context, Next } from 'hono';\r\nimport { recordRequest, recordRateLimited } from '../observability/metrics';\r\nimport { log } from '../util/logger';\r\n\r\n// In-memory rate limit store (per process). For production, replace with durable store.\r\ntype RateRecord = { count: number; reset: number };\r\nconst rateMap = new Map<string, RateRecord>();\r\n\r\nexport interface SecurityOptions {\r\n  requestsPerWindow: number;      // e.g. 100\r\n  windowMs: number;               // e.g. 60_000\r\n  maxBodyBytes: number;           // e.g. 128 * 1024\r\n  requireAuthHeader?: boolean;    // if MCP_SERVER_TOKEN set\r\n}\r\n\r\nfunction readInt(env: any, key: string, fallback: number): number {\r\n  const raw = env?.[key];\r\n  if (raw === undefined || raw === null || raw === '') {return fallback;}\r\n  const n = parseInt(String(raw), 10);\r\n  return Number.isFinite(n) && n > 0 ? n : fallback;\r\n}\r\n\r\nexport function securityMiddleware(base: SecurityOptions) {\r\n  // HMAC / nonce replay store\r\n  type NonceRec = { ts: number };\r\n  const nonceCache = new Map<string, NonceRec>();\r\n  function prune(max: number) { if (nonceCache.size <= max) {return;} let i=0; for (const k of nonceCache.keys()) { nonceCache.delete(k); if (++i >= (nonceCache.size-max)) {break;} } }\r\n  function timingSafe(a: string,b: string){ if(a.length!==b.length){return false;} let r=0; for(let i=0;i<a.length;i++) {r|=a.charCodeAt(i)^b.charCodeAt(i);} return r===0; }\r\n  async function verifyHmac(raw: string, c: Context) {\r\n    const secret = (c.env as any)?.MCP_HMAC_SECRET; if (!secret) {return null;}\r\n    const sig = c.req.header('x-mcp-signature'); const tsStr = c.req.header('x-mcp-timestamp'); const nonce = c.req.header('x-mcp-nonce');\r\n    if (!sig || !tsStr || !nonce) {return { code: 'missing_signature', message: 'Missing HMAC headers' };}\r\n    if (!sig.startsWith('v1=')) {return { code: 'bad_signature', message: 'Unsupported signature format' };}\r\n    const ts = parseInt(tsStr,10); if(!Number.isFinite(ts)) {return { code: 'bad_signature', message: 'Invalid timestamp' };}\r\n    const skew = parseInt((c.env as any)?.MCP_HMAC_MAX_SKEW_SEC||'300',10)||300; const now=Math.floor(Date.now()/1000);\r\n    if (Math.abs(now-ts) > skew) {return { code: 'stale_timestamp', message: 'Timestamp outside allowed skew' };}\r\n    const limit = parseInt((c.env as any)?.MCP_HMAC_NONCE_CACHE_SIZE||'1000',10)||1000; if (nonceCache.has(nonce)) {return { code:'replay_nonce', message:'Nonce replay detected' };}\r\n    const enc = new TextEncoder(); const key = await crypto.subtle.importKey('raw', enc.encode(secret), {name:'HMAC', hash:'SHA-256'}, false, ['sign']);\r\n    const data = enc.encode(`${ts}.${nonce}.${raw}`); const sigBuf = await crypto.subtle.sign('HMAC', key, data);\r\n    const calc = Array.from(new Uint8Array(sigBuf)).map(b=>b.toString(16).padStart(2,'0')).join('');\r\n    const provided = sig.slice(3);\r\n    if (!timingSafe(calc, provided)) {return { code: 'bad_signature', message: 'Signature mismatch' };}\r\n    prune(limit); nonceCache.set(nonce,{ts}); return null;\r\n  }\r\n\r\n  interface GuardLimits { maxArray:number; maxString:number; maxDepth:number; maxFilters:number; }\r\n  function guard(obj:any, limits:GuardLimits){ const stack=[{v:obj,d:0,p:'$'}]; while(stack.length){ const {v,d,p}=stack.pop()!; if(d>limits.maxDepth) {throw { code:'input_limit_exceeded', message:'Max depth exceeded', detail:{ path:p, limit:limits.maxDepth }};} if(Array.isArray(v)){ if(v.length>limits.maxArray) {throw { code:'input_limit_exceeded', message:'Array too large', detail:{ path:p, limit:limits.maxArray, actual:v.length }};} v.forEach((x,i)=>stack.push({v:x,d:d+1,p:`${p}[${i}]`})); } else if(v && typeof v==='object'){ for(const [k,val] of Object.entries(v)){ if(k==='filters' && Array.isArray(val) && val.length>limits.maxFilters) {throw { code:'input_limit_exceeded', message:'Too many filters', detail:{ path:`${p}.filters`, limit:limits.maxFilters, actual:val.length }};} stack.push({v:val,d:d+1,p:`${p}.${k}`}); } } else if(typeof v==='string'){ if(v.length>limits.maxString) {throw { code:'input_limit_exceeded', message:'String too long', detail:{ path:p, limit:limits.maxString, actual:v.length }};} } } }\r\n\r\n  return async (c: Context, next: Next) => {\r\n    const start = Date.now();\r\n    const ip = c.req.header('x-forwarded-for')?.split(',')[0].trim() || 'local';\r\n    recordRequest();\r\n    let rid = c.req.header('x-request-id'); if(!rid || rid.length>64) {rid = crypto.randomUUID();} c.header('x-request-id', rid);\r\n    const key = `rl:${ip}`;\r\n    const now = Date.now();\r\n    const opts: SecurityOptions = {\r\n      requestsPerWindow: readInt(c.env, 'MCP_RATE_LIMIT', base.requestsPerWindow),\r\n      windowMs: readInt(c.env, 'MCP_RATE_WINDOW_MS', base.windowMs),\r\n      maxBodyBytes: readInt(c.env, 'MCP_MAX_BODY_BYTES', base.maxBodyBytes),\r\n      requireAuthHeader: base.requireAuthHeader || !!(c.env as any)?.MCP_SERVER_TOKEN\r\n    };\r\n\r\n    const rec = rateMap.get(key);\r\n    if (!rec || rec.reset < now) {\r\n      rateMap.set(key, { count: 1, reset: now + opts.windowMs });\r\n    } else {\r\n      rec.count++;\r\n      if (rec.count > opts.requestsPerWindow) {\r\n        const retryAfterMs = rec.reset - now;\r\n        c.header('Retry-After', String(Math.ceil(retryAfterMs / 1000)));\r\n        recordRateLimited();\r\n        return c.json({ error: 'rate_limited', retryAfterMs }, 429);\r\n      }\r\n    }\r\n\r\n    // Optional shared secret auth (server-to-server protection)\r\n    if (opts.requireAuthHeader) {\r\n      const expected = (c.env as any)?.MCP_SERVER_TOKEN;\r\n      if (expected) {\r\n        const provided = c.req.header('x-mcp-auth');\r\n        if (!provided || provided !== expected) {\r\n          return c.json({ error: 'unauthorized' }, 401);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enforce body size limit for JSON requests\r\n  if (c.req.method === 'POST') {\r\n      const contentType = c.req.header('content-type') || '';\r\n      if (contentType.includes('application/json')) {\r\n        const raw = await c.req.raw.clone().text();\r\n        if (raw.length > opts.maxBodyBytes) { return c.json({ error: 'payload_too_large', limit: opts.maxBodyBytes }, 413); }\r\n        const hErr = await verifyHmac(raw, c); if (hErr) {return c.json({ error:'auth_failed', code:hErr.code, message:hErr.message }, 401);}\r\n        try {\r\n          const parsed = JSON.parse(raw);\r\n          const limits: GuardLimits = {\r\n            maxArray: readInt(c.env,'MCP_MAX_ARRAY_ITEMS',200),\r\n            maxString: readInt(c.env,'MCP_MAX_STRING_LENGTH',5000),\r\n            maxDepth: readInt(c.env,'MCP_MAX_NESTING_DEPTH',8),\r\n            maxFilters: readInt(c.env,'MCP_MAX_FILTERS',25)\r\n          };\r\n          guard(parsed, limits);\r\n        } catch (g:any) {\r\n          if (g?.code === 'input_limit_exceeded') {return c.json({ error:'validation_error', code:g.code, detail:g.detail, message:g.message }, 422);}\r\n        }\r\n        (c.req as any)._cachedJsonText = raw;\r\n      }\r\n    }\r\n\r\n    // Security headers\r\n    await next();\r\n    const res = c.res;\r\n    res.headers.set('X-Content-Type-Options', 'nosniff');\r\n    res.headers.set('Referrer-Policy', 'no-referrer');\r\n    res.headers.set('X-Frame-Options', 'DENY');\r\n    res.headers.set('Permissions-Policy', 'geolocation=(), camera=(), microphone=()');\r\n    res.headers.set('Cache-Control', 'no-store');\r\n    // Basic CSP for API (restrict everything by default)\r\n    res.headers.set('Content-Security-Policy', \"default-src 'none'; frame-ancestors 'none'; base-uri 'none'\");\r\n\r\n    // Minimal structured access log (redacted)\r\n    const duration = Date.now() - start;\r\n    try {\r\n      let logIp = ip; const salt = (c.env as any)?.MCP_IP_HASH_SALT; if (salt) { const buf = new TextEncoder().encode(`${salt}:${ip}`); const dig = await crypto.subtle.digest('SHA-256', buf); logIp = 'h:' + Array.from(new Uint8Array(dig)).map(b=>b.toString(16).padStart(2,'0')).join('').slice(0,12); }\r\n  log.info('access', { method: c.req.method, path: c.req.path, ip: logIp, status: res.status, ms: duration, rid });\r\n    } catch {}\r\n  };\r\n}\r\n\r\n// Harden CORS origin evaluation: returns empty string for disallowed instead of wildcard.\r\nexport function isOriginAllowed(origin: string | undefined, allowedList: string[]): string | '' {\r\n  if (!origin) {return allowedList[0] || '';}\r\n  return allowedList.includes(origin) ? origin : '';\r\n}\r\n\r\n// Simple SSE connection tracking. In a multi-process/worker deployment this is per-instance.\r\nlet activeSse = 0;\r\nexport function trackSseConnection<T>(handler: () => Promise<T>, maxConnections: number): Promise<T> {\r\n  if (activeSse >= maxConnections) {\r\n    return Promise.reject(new Error('sse_connection_limit'));\r\n  }\r\n  activeSse++;\r\n  return handler().finally(() => { activeSse = Math.max(0, activeSse - 1); });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/observability/metrics.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// In-memory metrics (ephemeral per instance)\r\nexport type ToolOutcome = 'success' | 'error' | 'timeout';\r\nconst counters: Record<string, number> = Object.create(null);\r\nconst BUCKETS = [50, 200, 1000];\r\n\r\nfunction inc(name: string, by = 1) { counters[name] = (counters[name] || 0) + by; }\r\nexport function recordRequest() { inc('requests_total'); }\r\nexport function recordRateLimited() { inc('rate_limited_total'); }\r\nexport function recordToolCall(tool: string, outcome: ToolOutcome) { inc(`tool_calls_total|${tool}|${outcome}`); }\r\nexport function observeToolLatency(tool: string, ms: number) {\r\n  let binned = false;\r\n  for (const b of BUCKETS) { if (ms <= b) { inc(`tool_latency_ms_bucket|${tool}|<=${b}`); binned = true; break; } }\r\n  if (!binned) {inc(`tool_latency_ms_bucket|${tool}|>1000`);}\r\n}\r\nexport function getMetricsSnapshot() { return { counters: { ...counters } }; }","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/observability/sentry.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/observability/sentry.ts\r\n// Lightweight helpers for capturing tool-level errors where desired.\r\n// Using @sentry/cloudflare wrapper in index.ts already instruments the Worker.\r\n\r\nimport * as Sentry from \"@sentry/cloudflare\";\r\n\r\nexport function captureError(e: unknown, context?: Record<string, unknown>) {\r\n  try {\r\n    Sentry.captureException(e, (scope) => {\r\n      if (context) {scope.setContext(\"tool\", context);}\r\n      return scope;\r\n    });\r\n  } catch {\r\n    // no-op\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/server.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":243,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":243,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8653,8655],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":248,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":248,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8967,8969],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9369,9371],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":835,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":835,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28170,28172],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":838,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":838,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28370,28372],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":839,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":839,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28449,28451],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":840,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":840,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28530,28532],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":841,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":841,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28629,28631],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":843,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":843,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28744,28746],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":844,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":844,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28829,28831],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":845,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":845,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28904,28906],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":858,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":858,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[29589,29591],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/server.ts\r\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\r\nimport { getMetricsSnapshot, observeToolLatency, recordToolCall } from './observability/metrics.js';\r\nimport { VERSION } from \"./constants/version\";\r\nimport { z } from \"zod\";\r\nimport {\r\n  listProjects,\r\n  listProjectsInput,\r\n  listTypes,\r\n  listTypesInput,\r\n  listWorkPackages,\r\n  listWPsInput,\r\n  createWorkPackageViaForm,\r\n  createWPInput,\r\n  updateWorkPackage,\r\n  updateWPInput,\r\n  listQueries,\r\n  listQueriesInput,\r\n  runQuery,\r\n  runQueryInput,\r\n  attachToWorkPackage,\r\n  attachInput,\r\n} from \"./tools\";\r\n\r\n// Import new tool modules\r\nimport { healthCheck, healthCheckInput } from \"./tools/health\";\r\nimport { listStatuses, listStatusesInput } from \"./tools/statuses\";\r\nimport { listPriorities, listPrioritiesInput } from \"./tools/priorities\";\r\nimport { listVersions, listVersionsInput } from \"./tools/versions\";\r\nimport { searchUsers, searchUsersInput, getCurrentUser, getCurrentUserInput } from \"./tools/users\";\r\n\r\n// Import enhanced notification tools\r\nimport { \r\n  listNotifications, listNotificationsInput,\r\n  markNotificationsRead, markNotificationsReadInput,\r\n  getNotificationSettings, getNotificationSettingsInput,\r\n  createReminder, createReminderInput,\r\n  getNotificationStats, getNotificationStatsInput\r\n} from \"./tools/notifications\";\r\n\r\n// Import enhanced comments tools\r\nimport {\r\n  checkCommentCapabilities, checkCommentCapabilitiesInput,\r\n  addInternalComment, addInternalCommentInput,\r\n  listComments, listCommentsInput,\r\n  updateComment, updateCommentInput,\r\n  deleteComment, deleteCommentInput\r\n} from \"./tools/comments\";\r\n\r\n// Import webhooks tools\r\nimport {\r\n  createWebhook, createWebhookInput,\r\n  listWebhooks, listWebhooksInput,\r\n  updateWebhook, updateWebhookInput,\r\n  deleteWebhook, deleteWebhookInput,\r\n  testWebhook, testWebhookInput,\r\n  getWebhookLogs, getWebhookLogsInput,\r\n  validateWebhookSignature, validateWebhookSignatureInput\r\n} from \"./tools/webhooks\";\r\n\r\n// Import enterprise tool modules\r\nimport { \r\n  createProject, createProjectInput,\r\n  updateProject, updateProjectInput,\r\n  archiveProject, archiveProjectInput,\r\n  listProjectsEnterprise, listProjectsEnterpriseInput \r\n} from \"./tools/projects\";\r\n\r\nimport {\r\n  createWorkPackageEnterprise, createWorkPackageEnterpriseInput,\r\n  updateWorkPackageEnterprise, updateWorkPackageEnterpriseInput,\r\n  listWorkPackagesEnterprise, listWorkPackagesEnterpriseInput\r\n} from \"./tools/workPackagesEnterprise\";\r\n\r\nimport {\r\n  logTimeEntryEnterprise, logTimeEntryEnterpriseInput,\r\n  updateTimeEntryEnterprise, updateTimeEntryEnterpriseInput,\r\n  generateTimesheet, generateTimesheetInput,\r\n  allocateResource, allocateResourceInput,\r\n  generateResourceUtilization, generateResourceUtilizationInput\r\n} from \"./tools/timeTrackingEnterprise\";\r\n\r\nimport {\r\n  createMilestoneEnterprise, createMilestoneEnterpriseInput,\r\n  updateMilestoneEnterprise, updateMilestoneEnterpriseInput,\r\n  processPhaseGate, processPhaseGateInput,\r\n  getMilestoneProgress, getMilestoneProgressInput\r\n} from \"./tools/milestonesEnterprise\";\r\n\r\nimport {\r\n  createDependency, createDependencyInput,\r\n  updateDependency, updateDependencyInput,\r\n  analyzeDependencies, analyzeDependenciesInput,\r\n  removeDependency, removeDependencyInput,\r\n  manageRelationStructure, manageRelationStructureInput\r\n} from \"./tools/dependenciesEnterprise\";\r\n\r\nimport {\r\n  generateEarnedValue, generateEarnedValueInput,\r\n  generateCriticalPath, generateCriticalPathInput,\r\n  generateProjectDashboard, generateProjectDashboardInput\r\n} from \"./tools/reportingEnterprise\";\r\n\r\n// Import Phase 2 Advanced PM tool modules\r\nimport {\r\n  createPortfolio, createPortfolioInput,\r\n  listProjectsPortfolio, listProjectsPortfolioInput,\r\n  balanceResources, balanceResourcesInput,\r\n  generateHealthDashboard, generateHealthDashboardInput,\r\n  trackBenefits, trackBenefitsInput\r\n} from \"./tools/portfolioManagement\";\r\n\r\nimport {\r\n  createRiskRegister, createRiskRegisterInput,\r\n  performQuantitativeAnalysis, performQuantitativeAnalysisInput,\r\n  trackMitigation, trackMitigationInput,\r\n  generateRiskBurndown, generateRiskBurndownInput\r\n} from \"./tools/riskManagement\";\r\n\r\nimport {\r\n  predictProjectSuccess, predictProjectSuccessInput,\r\n  recommendActions, recommendActionsInput,\r\n  benchmarkPerformance, benchmarkPerformanceInput\r\n} from \"./tools/predictiveAnalytics\";\r\n\r\nimport {\r\n  createProgram, createProgramInput,\r\n  coordinateDeliveries, coordinateDeliveriesInput,\r\n  trackProgramBenefits, trackProgramBenefitsInput,\r\n  manageProgramStakeholders, manageProgramStakeholdersInput\r\n} from \"./tools/programManagement\";\r\n\r\n// Import hybrid tools for v3.0.0 dynamic PMO functionality\r\nimport {\r\n  getProjectData, getProjectDataInput,\r\n  getProjectStatus, getProjectStatusInput,\r\n  getPortfolioAnalytics, getPortfolioAnalyticsInput,\r\n  getProjectVariables, getProjectVariablesInput,\r\n  setProjectVariables, setProjectVariablesInput,\r\n  getOrganizationalDefaults, getOrganizationalDefaultsInput,\r\n  setOrganizationalDefaults, setOrganizationalDefaultsInput,\r\n  getUserVariables, getUserVariablesInput,\r\n  getMultipleProjectsData, getMultipleProjectsDataInput,\r\n  getCachePerformance, getCachePerformanceInput,\r\n  clearProjectCache, clearProjectCacheInput,\r\n  warmCache, warmCacheInput,\r\n  exportProjectVariables, exportProjectVariablesInput,\r\n  analyzeEVMWithBenchmark, analyzeEVMWithBenchmarkInput,\r\n  getSystemHealth, getSystemHealthInput\r\n} from \"./tools/hybridTools\";\r\n\r\n// ---------- helper types ----------\r\ntype InferInput<T> =\r\n  T extends z.AnyZodObject\r\n    ? z.infer<T>\r\n    : T extends Record<string, z.ZodTypeAny>\r\n      ? z.infer<z.ZodObject<T>>\r\n      : never;\r\n\r\n// Convert z.object(...) -> raw field map, or pass through a field map\r\nfunction toFieldMap(schema: any): Record<string, z.ZodTypeAny> {\r\n  // Already a field map?\r\n  const isFieldMap =\r\n    schema &&\r\n    typeof schema === \"object\" &&\r\n    !schema?.safeParse &&\r\n    Object.values(schema).every((v) => typeof (v as any)?.safeParse === \"function\");\r\n  if (isFieldMap) {return schema as Record<string, z.ZodTypeAny>;}\r\n\r\n  // z.object(...) -> extract its shape\r\n  if (schema?.safeParse) {\r\n    const def = (schema as z.AnyZodObject)._def as any;\r\n    const shape =\r\n      typeof def?.shape === \"function\" ? def.shape() :\r\n      (schema as any).shape ??\r\n      undefined;\r\n    if (shape && typeof shape === \"object\") {return shape as Record<string, z.ZodTypeAny>;}\r\n  }\r\n\r\n  throw new Error(\"tool(): `schema` must be a Zod object or a record of Zod fields.\");\r\n}\r\n\r\n// Pretty-printer for the text content block\r\nconst toPretty = (v: unknown) => {\r\n  if (typeof v === \"string\") {return v;}\r\n  try { return JSON.stringify(v, null, 2); } catch { return String(v); }\r\n};\r\n\r\n// Modern registerTool wrapper that:\r\n//  - always supplies a field-map inputSchema (SDK-friendly across versions)\r\n//  - returns { content: [...], structuredContent } on success\r\n//  - returns { isError: true, ... } on failure\r\n// Tool execution timeout helper\r\nasync function withTimeout<T>(promise: Promise<T>, ms: number, name: string): Promise<T> {\r\n  let timer: any;\r\n  const timeout = new Promise<never>((_, reject) => {\r\n    timer = setTimeout(() => reject(new Error(`tool_timeout: ${name} exceeded ${ms}ms`)), ms);\r\n  });\r\n  try {\r\n    return await Promise.race([promise, timeout]);\r\n  } finally {\r\n    clearTimeout(timer);\r\n  }\r\n}\r\n\r\nfunction registerToolHelper<\r\n  T extends z.AnyZodObject | Record<string, z.ZodTypeAny>\r\n>(\r\n  server: McpServer,\r\n  name: string,\r\n  description: string,\r\n  schema: T,\r\n  // NOTE: your tool handlers in tools.ts expect (ctx, input) — two args.\r\n  handler: (ctx: { env: any }, input: InferInput<T>) => Promise<any>,\r\n) {\r\n  const inputFieldMap = toFieldMap(schema);\r\n\r\n  (server as any).registerTool(\r\n    name,\r\n    {\r\n      title: name,\r\n      description,\r\n      inputSchema: inputFieldMap as any, // SDK builds a Zod object from this\r\n    },\r\n    async (input: any, extra?: { requestInfo?: any }) => {\r\n      const env =\r\n        extra?.requestInfo?.env ??\r\n        (globalThis as any)?.ENV ??\r\n        {};\r\n\r\n      try {\r\n        const typedInput = input as InferInput<T>;\r\n        const execTimeout = perToolTimeout(name, env);\r\n        const t0 = Date.now();\r\n        const result = await withTimeout(handler({ env }, typedInput), execTimeout, name);\r\n        observeToolLatency(name, Date.now() - t0);\r\n        recordToolCall(name, 'success');\r\n        return {\r\n          content: [{ type: \"text\", text: toPretty(result) }],\r\n          structuredContent: result,\r\n        };\r\n      } catch (e: any) {\r\n        const isTimeout = /tool_timeout/.test(e?.message || '');\r\n        recordToolCall(name, isTimeout ? 'timeout' : 'error');\r\n        const status = e?.status ?? e?.code ?? undefined;\r\n        const body = e?.body ?? undefined;\r\n        const msg = e?.message ? String(e.message) : \"Tool execution failed\";\r\n        const code = isTimeout ? 'tool_timeout' : (e?.code || 'upstream_error');\r\n        const errJson = { code, message: msg, status, body };\r\n        return {\r\n          content: [{ type: \"text\", text: `Error: ${msg}\\n${toPretty(errJson)}` }],\r\n          structuredContent: errJson,\r\n          isError: true,\r\n        };\r\n      }\r\n    },\r\n  );\r\n}\r\n\r\nfunction perToolTimeout(tool: string, env: any): number {\r\n  const base = parseInt(env?.MCP_TOOL_TIMEOUT_MS || '15000', 10) || 15000;\r\n  const raw = env?.MCP_TOOL_TIMEOUT_MAP;\r\n  if (!raw) {return base;}\r\n  try {\r\n    const map = JSON.parse(raw);\r\n    const v = map[tool];\r\n    if (Number.isFinite(v) && v > 0 && v <= 60000) {return v;}\r\n  } catch {}\r\n  return base;\r\n}\r\n\r\nexport function buildServer() {\r\n  const server = new McpServer({\r\n    name: \"openproject-mcp\",\r\n    version: VERSION,\r\n  });\r\n\r\n  // Health check\r\n  registerToolHelper(server, \"op.health\",\r\n    \"Check OpenProject connectivity and authentication.\",\r\n    healthCheckInput,\r\n    healthCheck,\r\n  );\r\n\r\n  // Projects\r\n  registerToolHelper(server, \"projects.list\",\r\n    \"List OpenProject projects (optional substring filter).\",\r\n    listProjectsInput,\r\n    listProjects,\r\n  );\r\n\r\n  // Types\r\n  registerToolHelper(server, \"types.list\",\r\n    \"Return work package types available in a project (or globally when projectId omitted).\",\r\n    listTypesInput,\r\n    listTypes,\r\n  );\r\n\r\n  // Work packages\r\n  registerToolHelper(server, \"wp.list\",\r\n    \"List work packages in a project. Supports subject~ and status filtering.\",\r\n    listWPsInput,\r\n    listWorkPackages,\r\n  );\r\n\r\n  registerToolHelper(server, \"wp.create\",\r\n    \"Create via /form + commit. Required: projectId, typeId, subject. Optional: description, statusId, assignedToId, startDate, dueDate. Set dryRun=true to validate only.\",\r\n    createWPInput,\r\n    createWorkPackageViaForm,\r\n  );\r\n\r\n  registerToolHelper(server, \"wp.update\",\r\n    \"Update a work package by id using lockVersion. Set dryRun=true to validate via form without committing.\",\r\n    updateWPInput,\r\n    updateWorkPackage,\r\n  );\r\n\r\n  // Saved queries\r\n  registerToolHelper(server, \"queries.list\",\r\n    \"List saved queries (optionally filter by projectId or name substring).\",\r\n    listQueriesInput,\r\n    listQueries,\r\n  );\r\n\r\n  registerToolHelper(server, \"queries.run\",\r\n    \"Run a saved query by id. You may override filters/sortBy/pageSize/offset.\",\r\n    runQueryInput,\r\n    runQuery,\r\n  );\r\n\r\n  // Attachments\r\n  registerToolHelper(server, \"wp.attach\",\r\n    \"Attach a file (base64) to a work package using multipart/form-data.\",\r\n    attachInput,\r\n    attachToWorkPackage,\r\n  );\r\n\r\n  // Statuses\r\n  registerToolHelper(server, \"statuses.list\",\r\n    \"List work package statuses (global or per-project).\",\r\n    listStatusesInput,\r\n    listStatuses,\r\n  );\r\n\r\n  // Priorities\r\n  registerToolHelper(server, \"priorities.list\",\r\n    \"List work package priorities (global or per-project).\",\r\n    listPrioritiesInput,\r\n    listPriorities,\r\n  );\r\n\r\n  // Versions\r\n  registerToolHelper(server, \"versions.list\",\r\n    \"List project versions/milestones.\",\r\n    listVersionsInput,\r\n    listVersions,\r\n  );\r\n\r\n  // Users\r\n  registerToolHelper(server, \"users.search\",\r\n    \"Search users by name/login (empty query returns all users).\",\r\n    searchUsersInput,\r\n    searchUsers,\r\n  );\r\n\r\n  registerToolHelper(server, \"users.me\",\r\n    \"Get current authenticated user info.\",\r\n    getCurrentUserInput,\r\n    getCurrentUser,\r\n  );\r\n\r\n  // Enhanced Notifications (OpenProject 2024-2025 features)\r\n  registerToolHelper(server, \"notifications.list\",\r\n    \"List notifications with enhanced filtering by reason, project, date range, and read status.\",\r\n    listNotificationsInput,\r\n    listNotifications,\r\n  );\r\n\r\n  registerToolHelper(server, \"notifications.markRead\",\r\n    \"Mark specific notifications or all notifications as read.\",\r\n    markNotificationsReadInput,\r\n    markNotificationsRead,\r\n  );\r\n\r\n  registerToolHelper(server, \"notifications.getSettings\",\r\n    \"Get notification preferences and capabilities for a user.\",\r\n    getNotificationSettingsInput,\r\n    getNotificationSettings,\r\n  );\r\n\r\n  registerToolHelper(server, \"notifications.createReminder\",\r\n    \"Create work package reminders with notification options (OpenProject 15.2+).\",\r\n    createReminderInput,\r\n    createReminder,\r\n  );\r\n\r\n  registerToolHelper(server, \"notifications.getStats\",\r\n    \"Get notification statistics and analytics for a date range.\",\r\n    getNotificationStatsInput,\r\n    getNotificationStats,\r\n  );\r\n\r\n  // Enhanced Comments with Internal Support (OpenProject 2024-2025 features)\r\n  registerToolHelper(server, \"comments.checkCapabilities\",\r\n    \"Check comment capabilities and permissions for a work package using Capabilities API.\",\r\n    checkCommentCapabilitiesInput,\r\n    checkCommentCapabilities,\r\n  );\r\n\r\n  registerToolHelper(server, \"comments.addInternal\",\r\n    \"Add internal comment to work package with proper permission checking.\",\r\n    addInternalCommentInput,\r\n    addInternalComment,\r\n  );\r\n\r\n  registerToolHelper(server, \"comments.list\",\r\n    \"List work package comments with internal/public filtering and permission checking.\",\r\n    listCommentsInput,\r\n    listComments,\r\n  );\r\n\r\n  registerToolHelper(server, \"comments.update\",\r\n    \"Update/edit a comment if user has permission.\",\r\n    updateCommentInput,\r\n    updateComment,\r\n  );\r\n\r\n  registerToolHelper(server, \"comments.delete\",\r\n    \"Delete a comment if user has permission.\",\r\n    deleteCommentInput,\r\n    deleteComment,\r\n  );\r\n\r\n  // Real-time Webhooks Integration (OpenProject 2024-2025 features)\r\n  registerToolHelper(server, \"webhooks.create\",\r\n    \"Create webhook for real-time OpenProject event notifications.\",\r\n    createWebhookInput,\r\n    createWebhook,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.list\",\r\n    \"List configured webhooks with filtering options.\",\r\n    listWebhooksInput,\r\n    listWebhooks,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.update\",\r\n    \"Update webhook configuration (URL, events, filters).\",\r\n    updateWebhookInput,\r\n    updateWebhook,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.delete\",\r\n    \"Delete webhook configuration.\",\r\n    deleteWebhookInput,\r\n    deleteWebhook,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.test\",\r\n    \"Test webhook delivery and connectivity.\",\r\n    testWebhookInput,\r\n    testWebhook,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.getLogs\",\r\n    \"Get webhook delivery logs and performance statistics.\",\r\n    getWebhookLogsInput,\r\n    getWebhookLogs,\r\n  );\r\n\r\n  registerToolHelper(server, \"webhooks.validateSignature\",\r\n    \"Validate incoming webhook signatures for security.\",\r\n    validateWebhookSignatureInput,\r\n    validateWebhookSignature,\r\n  );\r\n\r\n  // === ENTERPRISE PROJECT MANAGEMENT TOOLS ===\r\n  \r\n  // Enterprise Projects\r\n  registerToolHelper(server, \"projects.create\",\r\n    \"Create project with full enterprise schema (hierarchy, custom fields, governance).\",\r\n    createProjectInput,\r\n    createProject,\r\n  );\r\n\r\n  registerToolHelper(server, \"projects.update\",\r\n    \"Update project with complete field support and enterprise metadata.\",\r\n    updateProjectInput,\r\n    updateProject,\r\n  );\r\n\r\n  registerToolHelper(server, \"projects.archive\",\r\n    \"Archive project with reason tracking.\",\r\n    archiveProjectInput,\r\n    archiveProject,\r\n  );\r\n\r\n  registerToolHelper(server, \"projects.listEnterprise\",\r\n    \"List projects with enterprise filtering (hierarchy, custom fields, advanced criteria).\",\r\n    listProjectsEnterpriseInput,\r\n    listProjectsEnterprise,\r\n  );\r\n\r\n  // Enterprise Work Packages\r\n  registerToolHelper(server, \"wp.createEnterprise\",\r\n    \"Create work packages with full scheduling, resources, and enterprise features.\",\r\n    createWorkPackageEnterpriseInput,\r\n    createWorkPackageEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"wp.updateEnterprise\",\r\n    \"Update work packages with complete scheduling control and enterprise metadata.\",\r\n    updateWorkPackageEnterpriseInput,\r\n    updateWorkPackageEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"wp.listEnterprise\",\r\n    \"List work packages with advanced filtering, analytics, and schedule metrics.\",\r\n    listWorkPackagesEnterpriseInput,\r\n    listWorkPackagesEnterprise,\r\n  );\r\n\r\n  // Enterprise Time Tracking & Resource Management\r\n  registerToolHelper(server, \"time.logEnterprise\",\r\n    \"Log time with cost accounting, billable hours, and enterprise tracking.\",\r\n    logTimeEntryEnterpriseInput,\r\n    logTimeEntryEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"time.updateEnterprise\",\r\n    \"Update time entries with enterprise cost and billing features.\",\r\n    updateTimeEntryEnterpriseInput,\r\n    updateTimeEntryEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"time.generateTimesheet\",\r\n    \"Generate comprehensive timesheets with analytics and cost reporting.\",\r\n    generateTimesheetInput,\r\n    generateTimesheet,\r\n  );\r\n\r\n  registerToolHelper(server, \"resources.allocate\",\r\n    \"Allocate resources with capacity planning and cost management (MS Project style).\",\r\n    allocateResourceInput,\r\n    allocateResource,\r\n  );\r\n\r\n  registerToolHelper(server, \"resources.utilization\",\r\n    \"Generate resource utilization reports with capacity analysis.\",\r\n    generateResourceUtilizationInput,\r\n    generateResourceUtilization,\r\n  );\r\n\r\n  // Enterprise Milestone & Phase Gate Management\r\n  registerToolHelper(server, \"milestones.createEnterprise\",\r\n    \"Create milestones with phase gates, approval workflows, and enterprise governance.\",\r\n    createMilestoneEnterpriseInput,\r\n    createMilestoneEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"milestones.updateEnterprise\",\r\n    \"Update milestones with enterprise features and stakeholder management.\",\r\n    updateMilestoneEnterpriseInput,\r\n    updateMilestoneEnterprise,\r\n  );\r\n\r\n  registerToolHelper(server, \"milestones.processPhaseGate\",\r\n    \"Process phase gate approvals with conditional approval and audit trail.\",\r\n    processPhaseGateInput,\r\n    processPhaseGate,\r\n  );\r\n\r\n  registerToolHelper(server, \"milestones.progress\",\r\n    \"Get milestone progress with enterprise analytics and risk assessment.\",\r\n    getMilestoneProgressInput,\r\n    getMilestoneProgress,\r\n  );\r\n\r\n  // Enterprise Dependency & Critical Path Management\r\n  registerToolHelper(server, \"dependencies.create\",\r\n    \"Create dependencies with lead/lag, response modes, and enterprise risk management.\",\r\n    createDependencyInput,\r\n    createDependency,\r\n  );\r\n\r\n  registerToolHelper(server, \"dependencies.update\",\r\n    \"Update dependencies with enterprise metadata and constraint management.\",\r\n    updateDependencyInput,\r\n    updateDependency,\r\n  );\r\n\r\n  registerToolHelper(server, \"dependencies.analyze\",\r\n    \"Analyze dependencies with critical path calculation and risk assessment.\",\r\n    analyzeDependenciesInput,\r\n    analyzeDependencies,\r\n  );\r\n\r\n  registerToolHelper(server, \"dependencies.remove\",\r\n    \"Remove dependencies with audit trail and impact analysis.\",\r\n    removeDependencyInput,\r\n    removeDependency,\r\n  );\r\n\r\n  registerToolHelper(server, \"dependencies.manageStructure\",\r\n    \"Manage work package relations using OpenProject 2024-2025 two-level structure with negative lag support.\",\r\n    manageRelationStructureInput,\r\n    manageRelationStructure,\r\n  );\r\n\r\n  // Enterprise Reporting & Analytics\r\n  registerToolHelper(server, \"reports.earnedValue\",\r\n    \"Generate earned value management (EVM) reports with PMBOK standard calculations.\",\r\n    generateEarnedValueInput,\r\n    generateEarnedValue,\r\n  );\r\n\r\n  registerToolHelper(server, \"reports.criticalPath\",\r\n    \"Generate critical path analysis with float calculations and schedule risk.\",\r\n    generateCriticalPathInput,\r\n    generateCriticalPath,\r\n  );\r\n\r\n  registerToolHelper(server, \"reports.projectDashboard\",\r\n    \"Generate comprehensive project dashboard with KPIs and performance metrics.\",\r\n    generateProjectDashboardInput,\r\n    generateProjectDashboard,\r\n  );\r\n\r\n  // === PHASE 2: ADVANCED PM CAPABILITIES ===\r\n  \r\n  // Portfolio Management\r\n  registerToolHelper(server, \"portfolio.create\",\r\n    \"Create enterprise portfolio with strategic objectives, budget allocation, and project hierarchy.\",\r\n    createPortfolioInput,\r\n    createPortfolio,\r\n  );\r\n\r\n  registerToolHelper(server, \"portfolio.listProjects\", \r\n    \"List projects in portfolio with hierarchy, custom fields, and status information.\",\r\n    listProjectsPortfolioInput,\r\n    listProjectsPortfolio,\r\n  );\r\n\r\n  registerToolHelper(server, \"portfolio.balanceResources\",\r\n    \"Balance resources across portfolio projects with optimization and conflict detection.\",\r\n    balanceResourcesInput,\r\n    balanceResources,\r\n  );\r\n\r\n  registerToolHelper(server, \"portfolio.generateHealthDashboard\",\r\n    \"Generate portfolio health dashboard with KPIs, risk scores, and executive metrics.\",\r\n    generateHealthDashboardInput,\r\n    generateHealthDashboard,\r\n  );\r\n\r\n  registerToolHelper(server, \"portfolio.trackBenefits\",\r\n    \"Track benefits realization across portfolio with projections and baseline comparison.\",\r\n    trackBenefitsInput,\r\n    trackBenefits,\r\n  );\r\n\r\n  // Risk Management\r\n  registerToolHelper(server, \"risk.createRegister\",\r\n    \"Create comprehensive risk register with probability, impact, and response planning.\",\r\n    createRiskRegisterInput,\r\n    createRiskRegister,\r\n  );\r\n\r\n  registerToolHelper(server, \"risk.performQuantitativeAnalysis\",\r\n    \"Perform quantitative risk analysis using Monte Carlo, sensitivity analysis, and risk modeling.\",\r\n    performQuantitativeAnalysisInput,\r\n    performQuantitativeAnalysis,\r\n  );\r\n\r\n  registerToolHelper(server, \"risk.trackMitigation\",\r\n    \"Track risk mitigation progress with effectiveness measurement and residual risk calculation.\",\r\n    trackMitigationInput,\r\n    trackMitigation,\r\n  );\r\n\r\n  registerToolHelper(server, \"risk.generateBurndown\",\r\n    \"Generate risk burndown charts with trend analysis and categorical breakdown.\",\r\n    generateRiskBurndownInput,\r\n    generateRiskBurndown,\r\n  );\r\n\r\n  // Predictive Analytics\r\n  registerToolHelper(server, \"analytics.predictSuccess\",\r\n    \"Predict project success probability using machine learning and pattern analysis.\",\r\n    predictProjectSuccessInput,\r\n    predictProjectSuccess,\r\n  );\r\n\r\n  registerToolHelper(server, \"analytics.recommendActions\",\r\n    \"Recommend project actions using AI analysis and optimization algorithms.\",\r\n    recommendActionsInput,\r\n    recommendActions,\r\n  );\r\n\r\n  registerToolHelper(server, \"analytics.benchmarkPerformance\",\r\n    \"Benchmark project performance against industry standards and organizational history.\",\r\n    benchmarkPerformanceInput,\r\n    benchmarkPerformance,\r\n  );\r\n\r\n  // Program Management\r\n  registerToolHelper(server, \"program.create\",\r\n    \"Create enterprise program with benefit tracking, governance, and stakeholder management.\",\r\n    createProgramInput,\r\n    createProgram,\r\n  );\r\n\r\n  registerToolHelper(server, \"program.coordinateDeliveries\",\r\n    \"Coordinate deliveries across program projects with dependency management and milestone alignment.\",\r\n    coordinateDeliveriesInput,\r\n    coordinateDeliveries,\r\n  );\r\n\r\n  registerToolHelper(server, \"program.trackBenefits\",\r\n    \"Track program-level benefits realization with project contribution analysis and forecasting.\",\r\n    trackProgramBenefitsInput,\r\n    trackProgramBenefits,\r\n  );\r\n\r\n  registerToolHelper(server, \"program.manageStakeholders\", \r\n    \"Manage program stakeholders with influence mapping, engagement planning, and communication matrix.\",\r\n    manageProgramStakeholdersInput,\r\n    manageProgramStakeholders,\r\n  );\r\n\r\n  // === v3.0.0 HYBRID DATA & DYNAMIC VARIABLES TOOLS ===\r\n  \r\n  // Hybrid Project Data Access\r\n  registerToolHelper(server, \"hybrid.getProjectData\",\r\n    \"Get comprehensive project data using hybrid OpenProject native + custom calculations.\",\r\n    getProjectDataInput,\r\n    getProjectData,\r\n  );\r\n  \r\n  registerToolHelper(server, \"hybrid.getProjectStatus\",\r\n    \"Get real-time project status (never cached) with alerts and upcoming deadlines.\",\r\n    getProjectStatusInput,\r\n    getProjectStatus,\r\n  );\r\n  \r\n  registerToolHelper(server, \"hybrid.getMultipleProjectsData\",\r\n    \"Get data for multiple projects efficiently with intelligent caching.\",\r\n    getMultipleProjectsDataInput,\r\n    getMultipleProjectsData,\r\n  );\r\n  \r\n  // Portfolio Analytics\r\n  registerToolHelper(server, \"hybrid.getPortfolioAnalytics\",\r\n    \"Get comprehensive portfolio analytics with resource conflicts and recommendations.\",\r\n    getPortfolioAnalyticsInput,\r\n    getPortfolioAnalytics,\r\n  );\r\n  \r\n  // PMO Variable Management\r\n  registerToolHelper(server, \"variables.getProjectVariables\",\r\n    \"Get PMO variables for a specific project (combines defaults + overrides).\",\r\n    getProjectVariablesInput,\r\n    getProjectVariables,\r\n  );\r\n  \r\n  registerToolHelper(server, \"variables.setProjectVariables\",\r\n    \"Set PMO variables for a project with validation and policy checking.\",\r\n    setProjectVariablesInput,\r\n    setProjectVariables,\r\n  );\r\n  \r\n  registerToolHelper(server, \"variables.getOrganizationalDefaults\",\r\n    \"Get organizational default PMO variables.\",\r\n    getOrganizationalDefaultsInput,\r\n    getOrganizationalDefaults,\r\n  );\r\n  \r\n  registerToolHelper(server, \"variables.setOrganizationalDefaults\",\r\n    \"Set organizational default PMO variables.\",\r\n    setOrganizationalDefaultsInput,\r\n    setOrganizationalDefaults,\r\n  );\r\n  \r\n  registerToolHelper(server, \"variables.getUserVariables\",\r\n    \"Get user-specific variables (rates, preferences, skill level, etc.).\",\r\n    getUserVariablesInput,\r\n    getUserVariables,\r\n  );\r\n  \r\n  registerToolHelper(server, \"variables.export\",\r\n    \"Export PMO variables for backup or migration purposes.\",\r\n    exportProjectVariablesInput,\r\n    exportProjectVariables,\r\n  );\r\n  \r\n  // Cache Management\r\n  registerToolHelper(server, \"cache.getPerformance\",\r\n    \"Get cache performance statistics and health information.\",\r\n    getCachePerformanceInput,\r\n    getCachePerformance,\r\n  );\r\n  \r\n  registerToolHelper(server, \"cache.clearProject\",\r\n    \"Clear cached data for a specific project.\",\r\n    clearProjectCacheInput,\r\n    clearProjectCache,\r\n  );\r\n  \r\n  registerToolHelper(server, \"cache.warm\",\r\n    \"Pre-warm cache for frequently accessed projects.\",\r\n    warmCacheInput,\r\n    warmCache,\r\n  );\r\n  \r\n  // Enhanced Analytics\r\n  registerToolHelper(server, \"analytics.evmWithBenchmark\",\r\n    \"Analyze EVM performance with benchmark comparison and industry standards.\",\r\n    analyzeEVMWithBenchmarkInput,\r\n    analyzeEVMWithBenchmark,\r\n  );\r\n  \r\n  // System Health\r\n  registerToolHelper(server, \"system.getHealth\",\r\n    \"Get comprehensive system health including cache performance and feature status.\",\r\n    getSystemHealthInput,\r\n    getSystemHealth,\r\n  );\r\n\r\n  registerToolHelper(server, 'system.getCapabilities', 'Get server capabilities, limits, and feature flags.', z.object({}), async ({ env }) => {\r\n    const extra = (env as any)?.MCP_EGRESS_ALLOW;\r\n    const baseHost = new URL(env.OP_BASE_URL).host;\r\n    const allowedHosts = [baseHost, ...(extra ? String(extra).split(',').map((s)=>s.trim()).filter(Boolean) : [])];\r\n    return {\r\n      name: 'openproject-mcp', version: VERSION, protocolRevision: '2025-06-18',\r\n      toolCount: (server as any).tools?.size || undefined,\r\n      features: { sse: true, webhooks: true, hybridData: true, enterprise: true, predictiveAnalytics: true },\r\n      limits: {\r\n        rateLimit: parseInt((env as any)?.MCP_RATE_LIMIT || '200',10),\r\n        rateWindowMs: parseInt((env as any)?.MCP_RATE_WINDOW_MS || '60000',10),\r\n        maxBodyBytes: parseInt((env as any)?.MCP_MAX_BODY_BYTES || String(512*1024),10),\r\n        defaultToolTimeoutMs: parseInt((env as any)?.MCP_TOOL_TIMEOUT_MS || '15000',10),\r\n        sseMaxConnections: 25,\r\n        maxArrayItems: parseInt((env as any)?.MCP_MAX_ARRAY_ITEMS || '200',10),\r\n        maxStringLength: parseInt((env as any)?.MCP_MAX_STRING_LENGTH || '5000',10),\r\n        maxFilters: parseInt((env as any)?.MCP_MAX_FILTERS || '25',10)\r\n      },\r\n      security: { rateLimiting: true, bodyLimit: true, egressAllowlist: true, timeouts: true, sseCap: true, hmacEnabled: !!(env as any)?.MCP_HMAC_SECRET, ipPrivacy: !!(env as any)?.MCP_IP_HASH_SALT },\r\n      egress: { allowedHosts }\r\n    };\r\n  });\r\n\r\n  // Tool listing (introspection) for validation/diagnostics\r\n  registerToolHelper(server, 'system.listTools', 'List registered tool names.', z.object({}), async () => {\r\n    let names: string[] = [];\r\n    const raw = (server as any).tools;\r\n    if (raw) {\r\n      if (typeof raw.keys === 'function') {names = Array.from(raw.keys());}\r\n      else if (Array.isArray(raw)) {names = raw.map((t: any)=>String(t?.name||''));}\r\n      else if (typeof raw === 'object') {names = Object.keys(raw);}\r\n    }\r\n    names = names.filter(Boolean).sort();\r\n    return { tools: names, count: names.length };\r\n  });\r\n\r\n  registerToolHelper(server, 'system.getMetrics', 'Get in-memory metrics counters.', z.object({}), async () => getMetricsSnapshot());\r\n\r\n  return server;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/sse.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/sse.ts\r\nimport { Context } from \"hono\";\r\nimport { z } from \"zod\";\r\n\r\n// SSE Connection management\r\ninterface SSEConnection {\r\n  id: string;\r\n  context: Context;\r\n  filters: SSEFilters;\r\n  lastEventId?: string;\r\n  isActive: boolean;\r\n  send: (payload: string) => boolean; // push event to client\r\n}\r\n\r\n// SSE Event filters\r\ninterface SSEFilters {\r\n  projectIds?: string[];\r\n  workPackageIds?: string[];\r\n  toolTypes?: string[];\r\n  eventTypes?: string[];\r\n}\r\n\r\n// SSE Event types\r\ntype SSEEventType = \r\n  | 'project_update'\r\n  | 'work_package_update' \r\n  | 'time_entry_update'\r\n  | 'tool_execution'\r\n  | 'error'\r\n  | 'heartbeat';\r\n\r\ninterface SSEEvent {\r\n  id: string;\r\n  type: SSEEventType;\r\n  data: any;\r\n  timestamp: string;\r\n  projectId?: string;\r\n  workPackageId?: string;\r\n}\r\n\r\n// Global connection store (in production, use Redis or similar)\r\nconst connections = new Map<string, SSEConnection>();\r\nconst encoder = new TextEncoder();\r\nlet eventCounter = 0;\r\n\r\n// SSE subscription schema\r\nexport const sseSubscribeInput = z.object({\r\n  projectIds: z.array(z.string()).optional(),\r\n  workPackageIds: z.array(z.string()).optional(), \r\n  toolTypes: z.array(z.string()).optional(),\r\n  eventTypes: z.array(z.string()).optional(),\r\n  lastEventId: z.string().optional()\r\n});\r\n\r\n/**\r\n * Handle SSE connection establishment\r\n */\r\nexport async function handleSSEConnection(c: Context): Promise<Response> {\r\n  const url = new URL(c.req.url);\r\n  const filters: SSEFilters = {\r\n    projectIds: url.searchParams.getAll('projectId'),\r\n    workPackageIds: url.searchParams.getAll('workPackageId'),\r\n    toolTypes: url.searchParams.getAll('toolType'),\r\n    eventTypes: url.searchParams.getAll('eventType')\r\n  };\r\n  \r\n  const lastEventId = c.req.header('Last-Event-ID');\r\n  const connectionId = generateConnectionId();\r\n\r\n  // Set SSE headers according to WHATWG specification\r\n  const headers = new Headers({\r\n    'Content-Type': 'text/event-stream; charset=utf-8',\r\n    'Cache-Control': 'no-cache',\r\n    'Connection': 'keep-alive',\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Cache-Control',\r\n    'Access-Control-Expose-Headers': 'Content-Type',\r\n  });\r\n\r\n  // Create readable stream for SSE\r\n  const stream = new ReadableStream({\r\n    start(controller) {\r\n      let controllerOpen = true;\r\n      const connection: SSEConnection = {\r\n        id: connectionId,\r\n        context: c,\r\n        filters,\r\n        lastEventId,\r\n        isActive: true,\r\n        send: (payload: string) => {\r\n          if (!controllerOpen) {return false;}\r\n          try {\r\n            controller.enqueue(encoder.encode(payload));\r\n            return true;\r\n          } catch {\r\n            controllerOpen = false;\r\n            return false;\r\n          }\r\n        }\r\n      };\r\n\r\n      // Store connection\r\n      connections.set(connectionId, connection);\r\n\r\n      // Send initial connection event\r\n      const initEvent = formatSSEEvent({\r\n        id: generateEventId(),\r\n        type: 'heartbeat',\r\n        data: { message: 'Connected', connectionId },\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n  connection.send(initEvent);\r\n\r\n      // Send missed events if lastEventId provided\r\n      if (lastEventId) {\r\n        // In production, implement event replay from persistent storage\r\n        const missedEvent = formatSSEEvent({\r\n          id: generateEventId(),\r\n          type: 'heartbeat',\r\n          data: { message: 'Replay not implemented in demo', lastEventId },\r\n          timestamp: new Date().toISOString()\r\n        });\r\n  connection.send(missedEvent);\r\n      }\r\n\r\n      // Setup heartbeat to prevent connection timeout\r\n      const heartbeatInterval = setInterval(() => {\r\n        if (connection.isActive) {\r\n          const heartbeat = formatSSEEvent({\r\n            id: generateEventId(),\r\n            type: 'heartbeat',\r\n            data: { timestamp: new Date().toISOString() },\r\n            timestamp: new Date().toISOString()\r\n          });\r\n          \r\n          if (!connection.send(heartbeat)) {cleanup();}\r\n        } else {\r\n          cleanup();\r\n        }\r\n      }, 30000); // 30 second heartbeat\r\n\r\n      // Cleanup function\r\n      const cleanup = () => {\r\n        connection.isActive = false;\r\n        connections.delete(connectionId);\r\n        clearInterval(heartbeatInterval);\r\n  try { controller.close(); } catch {}\r\n  controllerOpen = false;\r\n      };\r\n\r\n      // Handle client disconnect\r\n      c.req.raw.signal?.addEventListener('abort', cleanup);\r\n    },\r\n\r\n    cancel() {\r\n      const connection = connections.get(connectionId);\r\n      if (connection) {\r\n        connection.isActive = false;\r\n        connections.delete(connectionId);\r\n      }\r\n    }\r\n  });\r\n\r\n  return new Response(stream, { headers });\r\n}\r\n\r\n/**\r\n * Broadcast event to all matching connections\r\n */\r\nexport function broadcastSSEEvent(event: SSEEvent): void {\r\n  const message = formatSSEEvent(event);\r\n  connections.forEach((connection) => {\r\n    if (!connection.isActive) {\r\n      connections.delete(connection.id);\r\n      return;\r\n    }\r\n    if (!eventMatchesFilters(event, connection.filters)) {return;}\r\n    const ok = connection.send(message);\r\n    if (!ok) {\r\n      connection.isActive = false;\r\n      connections.delete(connection.id);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Format event according to SSE specification\r\n */\r\nfunction formatSSEEvent(event: SSEEvent): string {\r\n  const lines: string[] = [];\r\n  \r\n  // Add event ID\r\n  if (event.id) {\r\n    lines.push(`id: ${event.id}`);\r\n  }\r\n  \r\n  // Add event type (default SSE event type is 'message')\r\n  if (event.type) {\r\n    lines.push(`event: ${event.type}`);\r\n  }\r\n  \r\n  // Add data (can be multiple lines)\r\n  const dataStr = typeof event.data === 'string' \r\n    ? event.data \r\n    : JSON.stringify(event.data);\r\n    \r\n  dataStr.split('\\n').forEach(line => {\r\n    lines.push(`data: ${line}`);\r\n  });\r\n  \r\n  // Add empty line to trigger event dispatch\r\n  lines.push('');\r\n  \r\n  return lines.join('\\n');\r\n}\r\n\r\n/**\r\n * Check if event matches connection filters\r\n */\r\nfunction eventMatchesFilters(event: SSEEvent, filters: SSEFilters): boolean {\r\n  // Filter by project IDs\r\n  if (filters.projectIds?.length && event.projectId) {\r\n    if (!filters.projectIds.includes(event.projectId)) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Filter by work package IDs\r\n  if (filters.workPackageIds?.length && event.workPackageId) {\r\n    if (!filters.workPackageIds.includes(event.workPackageId)) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Filter by event types\r\n  if (filters.eventTypes?.length) {\r\n    if (!filters.eventTypes.includes(event.type)) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return true;\r\n}\r\n\r\n/**\r\n * Generate unique connection ID\r\n */\r\nfunction generateConnectionId(): string {\r\n  return `sse_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\n/**\r\n * Generate unique event ID\r\n */\r\nfunction generateEventId(): string {\r\n  return `${Date.now()}_${++eventCounter}`;\r\n}\r\n\r\n/**\r\n * Helper functions for tool integrations\r\n */\r\nexport function notifyProjectUpdate(projectId: string, data: any): void {\r\n  broadcastSSEEvent({\r\n    id: generateEventId(),\r\n    type: 'project_update',\r\n    data,\r\n    timestamp: new Date().toISOString(),\r\n    projectId\r\n  });\r\n}\r\n\r\nexport function notifyWorkPackageUpdate(workPackageId: string, projectId: string, data: any): void {\r\n  broadcastSSEEvent({\r\n    id: generateEventId(),\r\n    type: 'work_package_update', \r\n    data,\r\n    timestamp: new Date().toISOString(),\r\n    projectId,\r\n    workPackageId\r\n  });\r\n}\r\n\r\nexport function notifyToolExecution(toolName: string, projectId: string, data: any): void {\r\n  broadcastSSEEvent({\r\n    id: generateEventId(),\r\n    type: 'tool_execution',\r\n    data: { toolName, ...data },\r\n    timestamp: new Date().toISOString(),\r\n    projectId\r\n  });\r\n}\r\n\r\n/**\r\n * Get connection statistics for monitoring\r\n */\r\nexport function getSSEStats(): { activeConnections: number; totalConnections: number } {\r\n  const activeConnections = Array.from(connections.values()).filter(c => c.isActive).length;\r\n  return {\r\n    activeConnections,\r\n    totalConnections: connections.size\r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[931,933],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[954,956],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":121,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":121,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5188,5190],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":151,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":151,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6479,6481],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal, withQuery } from \"./util/op\";\r\n\r\nexport type Ctx = { env: any };\r\n\r\n//\r\n// Projects\r\n//\r\nexport const listProjectsInput = z.object({\r\n  q: z.string().optional().describe(\"Optional name/identifier substring match (client-side)\"),\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n});\r\n\r\nexport async function listProjects({ env }: Ctx, input: z.infer<typeof listProjectsInput>) {\r\n  const { json } = await opFetch<any>(env, \"/api/v3/projects\", {\r\n    params: { offset: input.offset, pageSize: input.pageSize },\r\n  });\r\n  // OpenProject collections carry total/count/pageSize/offset.\r\n  const meta = parseCollectionMeta(json);\r\n  let elements = json?._embedded?.elements ?? [];\r\n  if (input.q) {\r\n    const q = input.q.toLowerCase();\r\n    elements = elements.filter((p: any) => `${p?.name || \"\"} ${p?.identifier || \"\"}`.toLowerCase().includes(q));\r\n  }\r\n  return { elements, ...meta };\r\n}\r\n\r\n//\r\n// Types (global or per project)\r\n//\r\nexport const listTypesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional(),\r\n});\r\nexport async function listTypes({ env }: Ctx, input: z.infer<typeof listTypesInput>) {\r\n  const path = input.projectId ? `/api/v3/projects/${input.projectId}/types` : \"/api/v3/types\";\r\n  const { json } = await opFetch<any>(env, path);\r\n  return json?._embedded?.elements ?? [];\r\n}\r\n\r\n//\r\n// Work packages: list\r\n//\r\n// Stricter filter & sort schemas while still allowing raw pre-encoded strings for backward compatibility\r\nconst filterClause = z.record(z.object({ operator: z.string(), values: z.array(z.any()) }));\r\nconst filtersArraySchema = z.array(filterClause);\r\nconst sortTuple = z.tuple([z.string(), z.enum([\"asc\", \"desc\"])]);\r\nconst sortBySchema = z.array(sortTuple);\r\nexport const listWPsInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional(),\r\n  filters: z.union([z.string(), filtersArraySchema]).optional().describe(\"Array of filter objects or JSON string\"),\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n  sortBy: z.union([z.string(), sortBySchema]).optional().describe('Array like [[\"id\",\"asc\"]] or JSON string'),\r\n});\r\nexport async function listWorkPackages({ env }: Ctx, input: z.infer<typeof listWPsInput>) {\r\n  const base = input.projectId ? `/api/v3/projects/${input.projectId}/work_packages` : \"/api/v3/work_packages\";\r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n  };\r\n  if (input.filters !== undefined) {params.filters = input.filters;}\r\n  if (input.sortBy !== undefined) {params.sortBy = input.sortBy;}\r\n\r\n  const path = withQuery(base, params);\r\n  const { json } = await opFetch<any>(env, path);\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, ...meta, _links: json?._links };\r\n}\r\n\r\n//\r\n// Work package: create (forms-first)\r\n//\r\nexport const createWPInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  typeId: z.union([z.string(), z.number()]),\r\n  subject: z.string().min(1),\r\n  description: z\r\n    .object({ format: z.string().default(\"markdown\"), raw: z.string().default(\"\"), html: z.string().optional() })\r\n    .partial()\r\n    .optional(),\r\n  assigneeId: z.union([z.string(), z.number()]).optional(),\r\n  priorityId: z.union([z.string(), z.number()]).optional(),\r\n  parentId: z.union([z.string(), z.number()]).optional(),\r\n  startDate: z.string().optional(), // YYYY-MM-DD\r\n  dueDate: z.string().optional(),\r\n  notify: z.boolean().default(false),\r\n  dryRun: z.boolean().default(false),\r\n});\r\n\r\nexport async function createWorkPackageViaForm({ env }: Ctx, input: z.infer<typeof createWPInput>) {\r\n  const payload: any = {\r\n    subject: input.subject,\r\n    _links: {\r\n      project: hal.project(input.projectId),\r\n      type: hal.type(input.typeId),\r\n    },\r\n  };\r\n  if (input.description) {payload.description = input.description;}\r\n  if (input.assigneeId) {payload._links.assignee = hal.user(input.assigneeId);}\r\n  if (input.priorityId) {payload._links.priority = hal.priority(input.priorityId);}\r\n  if (input.parentId) {payload._links.parent = hal.workPackage(input.parentId);}\r\n  if (input.startDate) {payload.startDate = input.startDate;}\r\n  if (input.dueDate) {payload.dueDate = input.dueDate;}\r\n\r\n  const { json: form } = await opFetch<any>(env, \"/api/v3/work_packages/form\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ ...payload, _meta: { sendNotifications: input.notify } }),\r\n  });\r\n  // Forms expose \"validationErrors\" and a \"commit\" link with method (POST for create).\r\n  const errors = form?.validationErrors ?? {};\r\n  const hasErrors = errors && Object.keys(errors).length > 0;\r\n  if (input.dryRun || hasErrors) {\r\n    return { ok: !hasErrors, validationErrors: errors, payload: form?.payload, schema: form?.schema };\r\n  }\r\n  const commit = form?._links?.commit;\r\n  if (!commit?.href) {throw new Error(\"Form commit link missing\");}\r\n  const { json: created } = await opFetch<any>(env, commit.href, {\r\n    method: commit.method || \"POST\",\r\n    body: JSON.stringify(form.payload),\r\n  });\r\n  return { ok: true, workPackage: created };\r\n}\r\n\r\n//\r\n// Work package: update (PATCH; optional dry-run via forms)\r\n//\r\nexport const updateWPInput = z.object({\r\n  id: z.union([z.string(), z.number()]),\r\n  lockVersion: z.number().int().min(0),\r\n  subject: z.string().optional(),\r\n  description: z.object({ format: z.string(), raw: z.string(), html: z.string().optional() }).partial().optional(),\r\n  typeId: z.union([z.string(), z.number()]).optional(),\r\n  statusId: z.union([z.string(), z.number()]).optional(),\r\n  assigneeId: z.union([z.string(), z.number()]).optional(),\r\n  priorityId: z.union([z.string(), z.number()]).optional(),\r\n  parentId: z.union([z.string(), z.number()]).optional(),\r\n  startDate: z.string().optional(),\r\n  dueDate: z.string().optional(),\r\n  notify: z.boolean().default(false),\r\n  dryRun: z.boolean().default(false),\r\n});\r\n\r\nexport async function updateWorkPackage({ env }: Ctx, input: z.infer<typeof updateWPInput>) {\r\n  // Build payload for PATCH /api/v3/work_packages/{id} per spec.\r\n  const body: any = { lockVersion: input.lockVersion };\r\n  if (input.subject !== undefined) {body.subject = input.subject;}\r\n  if (input.description) {body.description = input.description;}\r\n  body._links = body._links || {};\r\n  if (input.typeId) {body._links.type = hal.type(input.typeId);}\r\n  if (input.statusId) {body._links.status = hal.status(input.statusId);}\r\n  if (input.assigneeId) {body._links.assignee = hal.user(input.assigneeId);}\r\n  if (input.priorityId) {body._links.priority = hal.priority(input.priorityId);}\r\n  if (input.parentId) {body._links.parent = hal.workPackage(input.parentId);}\r\n  if (input.startDate) {body.startDate = input.startDate;}\r\n  if (input.dueDate) {body.dueDate = input.dueDate;}\r\n\r\n  if (input.dryRun) {\r\n    // Validate via forms mechanism (do not commit).\r\n    const { json: form } = await opFetch<any>(env, `/api/v3/work_packages/${input.id}/form`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ ...body, _meta: { sendNotifications: input.notify } }),\r\n    });\r\n    const errors = form?.validationErrors ?? {};\r\n    const hasErrors = errors && Object.keys(errors).length > 0;\r\n    return { ok: !hasErrors, validationErrors: errors, payload: form?.payload, schema: form?.schema };\r\n  }\r\n\r\n  const { json: updated } = await opFetch<any>(env, `/api/v3/work_packages/${input.id}`, {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({ ...body, _meta: { sendNotifications: input.notify } }),\r\n  });\r\n  return { ok: true, workPackage: updated };\r\n}\r\n\r\n//\r\n// Attachments: add file to a WP (multipart/form-data)\r\n//\r\nexport const attachInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()]),\r\n  fileName: z.string().min(1),\r\n  dataBase64: z.string().min(1),\r\n  contentType: z.string().default(\"application/octet-stream\"),\r\n  description: z.string().optional(),\r\n});\r\n\r\nconst MAX_ATTACHMENT_BYTES = 5 * 1024 * 1024; // 5MB safeguard\r\nexport async function attachToWorkPackage({ env }: Ctx, input: z.infer<typeof attachInput>) {\r\n  const b64 = input.dataBase64.trim();\r\n  const padding = (b64.endsWith(\"==\") ? 2 : b64.endsWith(\"=\") ? 1 : 0);\r\n  const approxSize = Math.floor((b64.length * 3) / 4) - padding;\r\n  if (approxSize > MAX_ATTACHMENT_BYTES) {\r\n    throw new Error(`Attachment exceeds max size of ${MAX_ATTACHMENT_BYTES} bytes (approx ${approxSize}).`);\r\n  }\r\n  const form = new FormData();\r\n  const metadata = {\r\n    fileName: input.fileName,\r\n    description: input.description ? { format: \"plain\", raw: input.description } : undefined,\r\n  };\r\n  form.append(\"metadata\", new Blob([JSON.stringify(metadata)], { type: \"application/json\" }), \"metadata.json\");\r\n  let bytes: Uint8Array;\r\n  try {\r\n    bytes = Uint8Array.from(atob(b64), (c) => c.charCodeAt(0));\r\n  } catch {\r\n    throw new Error(\"Invalid base64 data\");\r\n  }\r\n  // Cast to ArrayBuffer to satisfy TS in some environments\r\n  const pureBuffer = new Uint8Array(bytes).buffer; // guarantee ArrayBuffer instance\r\n  form.append(\"file\", new Blob([pureBuffer], { type: input.contentType }), input.fileName);\r\n  const { json } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}/attachments`, {\r\n    method: \"POST\",\r\n    body: form as any,\r\n    headers: {},\r\n  });\r\n  return json;\r\n}\r\n\r\n//\r\n// Queries: list & run\r\n//\r\nexport const listQueriesInput = z.object({\r\n  // optional filters JSON for the queries collection (e.g., [{\"starred\":{\"operator\":\"=\",\"values\":[\"t\"]}}])\r\n  filters: z.any().optional(),\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n});\r\n\r\nexport async function listQueries({ env }: Ctx, input: z.infer<typeof listQueriesInput>) {\r\n  const params: Record<string, unknown> = { offset: input.offset, pageSize: input.pageSize };\r\n  if (input.filters !== undefined) {params.filters = input.filters;}\r\n  const { json } = await opFetch<any>(env, \"/api/v3/queries\", { params });\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, ...meta };\r\n}\r\n\r\nexport const runQueryInput = z.object({\r\n  id: z.union([z.string(), z.number()]),\r\n  // Optional overrides per spec: filters/offset/pageSize/sortBy/groupBy/showSums/timestamps.\r\n  filters: z.any().optional(),\r\n  offset: z.number().int().min(0).optional(),\r\n  pageSize: z.number().int().min(1).max(200).optional(),\r\n  sortBy: z.any().optional(),\r\n  groupBy: z.string().optional(),\r\n  showSums: z.boolean().optional(),\r\n  timestamps: z.string().optional(),\r\n});\r\n\r\nexport async function runQuery({ env }: Ctx, input: z.infer<typeof runQueryInput>) {\r\n  const params: Record<string, unknown> = {};\r\n  for (const k of [\"filters\", \"offset\", \"pageSize\", \"sortBy\", \"groupBy\", \"showSums\", \"timestamps\"] as const) {\r\n    const v = (input as any)[k];\r\n    if (v !== undefined) {params[k] = v;}\r\n  }\r\n  const { json: q } = await opFetch<any>(env, `/api/v3/queries/${input.id}`, { params });\r\n\r\n  // If results are embedded, return them; otherwise follow the \"results\" link described by docs.\r\n  if (q?._embedded?.results) {\r\n    const meta = parseCollectionMeta(q._embedded.results);\r\n    const elements = q._embedded.results?._embedded?.elements ?? [];\r\n    return { query: q, results: { elements, ...meta, _links: q._embedded.results?._links } };\r\n  }\r\n\r\n  const href: string | undefined = q?._links?.results?.href;\r\n  if (!href) {return { query: q, results: null };}\r\n\r\n  const { json } = await opFetch<any>(env, href);\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { query: q, results: { elements, ...meta, _links: json?._links } };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/comments.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2315,2317],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":73,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":165,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":165,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5523,5525],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":248,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":248,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8113,8115],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":272,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":272,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8907,8909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":324,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":324,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10467,10469],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":331,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":331,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10609,10611],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":372,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":372,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11901,11903],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/comments.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * Enhanced Comments API Tools\r\n * \r\n * Leverages OpenProject's latest internal comments capabilities including:\r\n * - Capabilities API checking for comment permissions\r\n * - Internal vs public comment support\r\n * - Enhanced security for team discussions\r\n */\r\n\r\n// Check comment capabilities for a work package\r\nexport const checkCommentCapabilitiesInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package ID to check comment capabilities for\")\r\n}).strict();\r\n\r\nexport async function checkCommentCapabilities({ env }: Ctx, input: z.infer<typeof checkCommentCapabilitiesInput>) {\r\n  try {\r\n    // Get work package with capabilities\r\n    const { json: workPackage } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}`);\r\n    \r\n    const capabilities = {\r\n      workPackageId: input.workPackageId,\r\n      canComment: false,\r\n      canCreateInternalComments: false,\r\n      canViewInternalComments: false,\r\n      canEditComments: false,\r\n      canDeleteComments: false,\r\n      availableActivities: [] as string[]\r\n    };\r\n    \r\n    // Check available capabilities from _links\r\n    if (workPackage?._links) {\r\n      const links = workPackage._links;\r\n      \r\n      // Check if user can add activities (comments)\r\n      if (links.addComment || links.activities) {\r\n        capabilities.canComment = true;\r\n      }\r\n      \r\n      // Check specific internal comment capabilities\r\n      if (links.addInternalComment) {\r\n        capabilities.canCreateInternalComments = true;\r\n      }\r\n      \r\n      // Check edit capabilities\r\n      if (links.update || links.updateImmediately) {\r\n        capabilities.canEditComments = true;\r\n      }\r\n    }\r\n    \r\n    // Get available activity types via capabilities API\r\n    try {\r\n      const { json: activitiesForm } = await opFetch<any>(\r\n        env, \r\n        `/api/v3/work_packages/${input.workPackageId}/activities/form`\r\n      );\r\n      \r\n      if (activitiesForm?._embedded?.schema?.activity?._embedded?.allowedValues) {\r\n        capabilities.availableActivities = activitiesForm._embedded.schema.activity._embedded.allowedValues\r\n          .map((activity: any) => activity.name || activity.id);\r\n      }\r\n      \r\n      // Check for internal comment type\r\n      if (capabilities.availableActivities.includes('Internal comment')) {\r\n        capabilities.canCreateInternalComments = true;\r\n      }\r\n      \r\n    } catch (error) {\r\n      // Form might not be available, capabilities already checked via _links\r\n    }\r\n    \r\n    return capabilities;\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      workPackageId: input.workPackageId,\r\n      error: `Failed to check capabilities: ${error.message}`,\r\n      canComment: false,\r\n      canCreateInternalComments: false,\r\n      canViewInternalComments: false,\r\n      canEditComments: false,\r\n      canDeleteComments: false,\r\n      availableActivities: []\r\n    };\r\n  }\r\n}\r\n\r\n// Add internal comment to work package\r\nexport const addInternalCommentInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package ID to add comment to\"),\r\n  comment: z.string().min(1)\r\n    .describe(\"Comment text\"),\r\n  format: z.enum(['markdown', 'textile', 'plain']).default('markdown')\r\n    .describe(\"Comment format\"),\r\n  internal: z.boolean().default(true)\r\n    .describe(\"Make comment internal (visible only to team members)\"),\r\n  notifyWatchers: z.boolean().default(false)\r\n    .describe(\"Notify watchers about this internal comment\")\r\n}).strict();\r\n\r\nexport async function addInternalComment({ env }: Ctx, input: z.infer<typeof addInternalCommentInput>) {\r\n  try {\r\n    // First check capabilities\r\n    const capabilities = await checkCommentCapabilities({ env }, { workPackageId: input.workPackageId });\r\n    \r\n    if (!capabilities.canCreateInternalComments && input.internal) {\r\n      return {\r\n        success: false,\r\n        error: \"User does not have permission to create internal comments\",\r\n        capabilities\r\n      };\r\n    }\r\n    \r\n    if (!capabilities.canComment) {\r\n      return {\r\n        success: false,\r\n        error: \"User does not have permission to add comments\",\r\n        capabilities\r\n      };\r\n    }\r\n    \r\n    const payload = {\r\n      comment: {\r\n        format: input.format,\r\n        raw: input.comment\r\n      },\r\n      notify: input.notifyWatchers\r\n    };\r\n    \r\n    // Add internal comment type if available and requested\r\n    if (input.internal && capabilities.availableActivities.includes('Internal comment')) {\r\n      (payload as any).activity = {\r\n        href: `/api/v3/activity/${capabilities.availableActivities.indexOf('Internal comment')}`\r\n      };\r\n    }\r\n    \r\n    // Create form first to validate\r\n    const { json: form } = await opFetch<any>(\r\n      env, \r\n      `/api/v3/work_packages/${input.workPackageId}/activities/form`,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(payload)\r\n      }\r\n    );\r\n    \r\n    if (form?.validationErrors && Object.keys(form.validationErrors).length > 0) {\r\n      return {\r\n        success: false,\r\n        error: \"Comment validation failed\",\r\n        validationErrors: form.validationErrors,\r\n        capabilities\r\n      };\r\n    }\r\n    \r\n    // Commit the comment\r\n    if (form?._links?.commit) {\r\n      const { json: result } = await opFetch<any>(env, form._links.commit.href, {\r\n        method: form._links.commit.method || 'POST',\r\n        body: JSON.stringify(form.payload)\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        comment: {\r\n          id: result?.id,\r\n          workPackageId: input.workPackageId,\r\n          comment: input.comment,\r\n          internal: input.internal,\r\n          createdAt: result?.createdAt,\r\n          user: result?._links?.user,\r\n          activity: result\r\n        },\r\n        capabilities\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: \"Could not create comment - no commit link available\",\r\n      capabilities\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n// List comments with internal/public filtering\r\nexport const listCommentsInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package ID to get comments for\"),\r\n  includeInternal: z.boolean().default(true)\r\n    .describe(\"Include internal comments (requires permission)\"),\r\n  includePublic: z.boolean().default(true)\r\n    .describe(\"Include public comments\"),\r\n  sortBy: z.array(z.tuple([\r\n    z.enum(['id', 'createdAt', 'updatedAt']),\r\n    z.enum(['asc', 'desc'])\r\n  ])).default([['createdAt', 'desc']]).describe(\"Sort activities\"),\r\n  pageSize: z.number().int().min(1).max(100).default(20),\r\n  offset: z.number().int().min(0).default(0)\r\n}).strict();\r\n\r\nexport async function listComments({ env }: Ctx, input: z.infer<typeof listCommentsInput>) {\r\n  try {\r\n    // Check capabilities first\r\n    const capabilities = await checkCommentCapabilities({ env }, { workPackageId: input.workPackageId });\r\n    \r\n    const params: any = {\r\n      pageSize: input.pageSize,\r\n      offset: input.offset,\r\n      sortBy: JSON.stringify(input.sortBy)\r\n    };\r\n    \r\n    // Build filters for comment types\r\n    const filters: any[] = [];\r\n    \r\n    if (!input.includeInternal || !capabilities.canViewInternalComments) {\r\n      // Exclude internal comments if not requested or no permission\r\n      filters.push({\r\n        type: { operator: '!', values: ['Activity::Comment-Internal'] }\r\n      });\r\n    }\r\n    \r\n    if (!input.includePublic) {\r\n      // Exclude public comments if not requested\r\n      filters.push({\r\n        type: { operator: '!', values: ['Activity::Comment'] }\r\n      });\r\n    }\r\n    \r\n    if (filters.length > 0) {\r\n      params.filters = JSON.stringify(filters);\r\n    }\r\n    \r\n    const { json } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}/activities`, { params });\r\n    \r\n    const activities = json?._embedded?.elements || [];\r\n    \r\n    // Filter and categorize comments\r\n    const comments = activities\r\n      .filter((activity: any) => \r\n        activity._type === 'Activity::Comment' || \r\n        activity._type === 'Activity::Comment-Internal'\r\n      )\r\n      .map((activity: any) => ({\r\n        id: activity.id,\r\n        type: activity._type,\r\n        internal: activity._type === 'Activity::Comment-Internal',\r\n        comment: activity.comment,\r\n        createdAt: activity.createdAt,\r\n        updatedAt: activity.updatedAt,\r\n        user: activity._links?.user,\r\n        canEdit: !!activity._links?.update,\r\n        canDelete: !!activity._links?.delete,\r\n        _links: activity._links\r\n      }));\r\n    \r\n    return {\r\n      workPackageId: input.workPackageId,\r\n      comments,\r\n      total: json?.total || 0,\r\n      count: comments.length,\r\n      pageSize: input.pageSize,\r\n      offset: input.offset,\r\n      capabilities,\r\n      _links: json?._links\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      workPackageId: input.workPackageId,\r\n      error: error.message,\r\n      comments: [],\r\n      capabilities: null\r\n    };\r\n  }\r\n}\r\n\r\n// Update/edit a comment (if user has permission)\r\nexport const updateCommentInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package ID\"),\r\n  commentId: z.union([z.string(), z.number()])\r\n    .describe(\"Comment/activity ID to update\"),\r\n  comment: z.string().min(1)\r\n    .describe(\"Updated comment text\"),\r\n  format: z.enum(['markdown', 'textile', 'plain']).default('markdown')\r\n    .describe(\"Comment format\")\r\n}).strict();\r\n\r\nexport async function updateComment({ env }: Ctx, input: z.infer<typeof updateCommentInput>) {\r\n  try {\r\n    // Check if the specific comment can be edited\r\n    const { json: activity } = await opFetch<any>(env, `/api/v3/activities/${input.commentId}`);\r\n    \r\n    if (!activity?._links?.update) {\r\n      return {\r\n        success: false,\r\n        error: \"User does not have permission to edit this comment\",\r\n        commentId: input.commentId\r\n      };\r\n    }\r\n    \r\n    const payload = {\r\n      comment: {\r\n        format: input.format,\r\n        raw: input.comment\r\n      }\r\n    };\r\n    \r\n    // Update the comment\r\n    const { json: result } = await opFetch<any>(env, activity._links.update.href, {\r\n      method: activity._links.update.method || 'PATCH',\r\n      body: JSON.stringify(payload)\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      comment: {\r\n        id: result?.id || input.commentId,\r\n        workPackageId: input.workPackageId,\r\n        comment: input.comment,\r\n        updatedAt: result?.updatedAt,\r\n        internal: result?._type === 'Activity::Comment-Internal',\r\n        activity: result\r\n      }\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      commentId: input.commentId\r\n    };\r\n  }\r\n}\r\n\r\n// Delete a comment (if user has permission)\r\nexport const deleteCommentInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package ID\"),\r\n  commentId: z.union([z.string(), z.number()])\r\n    .describe(\"Comment/activity ID to delete\")\r\n}).strict();\r\n\r\nexport async function deleteComment({ env }: Ctx, input: z.infer<typeof deleteCommentInput>) {\r\n  try {\r\n    // Check if the specific comment can be deleted\r\n    const { json: activity } = await opFetch<any>(env, `/api/v3/activities/${input.commentId}`);\r\n    \r\n    if (!activity?._links?.delete) {\r\n      return {\r\n        success: false,\r\n        error: \"User does not have permission to delete this comment\",\r\n        commentId: input.commentId\r\n      };\r\n    }\r\n    \r\n    // Delete the comment\r\n    await opFetch<any>(env, activity._links.delete.href, {\r\n      method: activity._links.delete.method || 'DELETE'\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      commentId: input.commentId,\r\n      workPackageId: input.workPackageId,\r\n      deletedAt: new Date().toISOString()\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      commentId: input.commentId\r\n    };\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/dependenciesEnterprise.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseCollectionMeta' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enterpriseMetadata' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":144,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":27},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":226,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":226,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10116,10118],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":264,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":16},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":301,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":301,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13275,13277],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'wpMap' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":343,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":343,"endColumn":16},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15136,15138],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'criticalPath' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":376,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":376,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'workPackage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":489,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":489,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":492,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":492,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20538,20540],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/dependenciesEnterprise.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Enterprise Dependency & Critical Path Management\r\n//\r\n\r\n// Complete dependency types (MS Project standard)\r\nconst RelationTypeSchema = z.enum([\r\n  'follows',      // Finish-Start (FS) - Default, B starts after A finishes\r\n  'blocks',       // Start-Start (SS) - B starts when A starts\r\n  'precedes',     // Finish-Finish (FF) - B finishes when A finishes  \r\n  'duplicates',   // Duplicate relationship\r\n  'relates',      // General relationship (no scheduling impact)\r\n  'starts',       // Start-Finish (SF) - B finishes when A starts (rare)\r\n]).describe(\"Dependency relationship type\");\r\n\r\n// Response modes (Monday.com style)\r\nconst ResponseModeSchema = z.enum([\r\n  'flexible',  // Allow manual adjustments without cascading\r\n  'strict',    // Automatically adjust dependent tasks\r\n  'no_action'  // Maintain relationships but don't auto-adjust dates\r\n]).describe(\"How dependent tasks respond to changes\");\r\n\r\n// Enhanced duration schema for lead/lag with negative lag support (OpenProject 2024-2025)\r\nconst DurationSchema = z.string().regex(/^-?P(?:\\d+D)?(?:T(?:\\d+H)?(?:\\d+M)?(?:\\d+S)?)?$/).optional().describe(\"Lead/lag duration (P2D = 2 days lag, -P1D = 1 day negative lag/lead)\");\r\n\r\n// External dependency types\r\nconst ExternalDependencyTypeSchema = z.enum([\r\n  'vendor',        // Vendor/supplier dependency\r\n  'client',        // Client/customer dependency  \r\n  'regulatory',    // Regulatory approval\r\n  'infrastructure',// Infrastructure/system dependency\r\n  'resource',      // Shared resource dependency\r\n  'cross_project'  // Other project dependency\r\n]).describe(\"Type of external dependency\");\r\n\r\n//\r\n// Create Work Package Dependencies (Enterprise)\r\n//\r\nexport const createDependencyInput = z.object({\r\n  fromWorkPackageId: z.union([z.string(), z.number()]).describe(\"Source work package ID\"),\r\n  toWorkPackageId: z.union([z.string(), z.number()]).describe(\"Target work package ID\"),\r\n  \r\n  // Complete dependency types (MS Project standard)\r\n  relationType: RelationTypeSchema.default('follows'),\r\n  \r\n  // Lead/Lag time (critical path method)\r\n  lag: DurationSchema.describe(\"Lag time (PT2D = 2 days after) or lead time (-PT1D = 1 day before)\"),\r\n  \r\n  // Dependency modes (Monday.com style)\r\n  responseMode: ResponseModeSchema.default('flexible').describe(\"How tasks respond to schedule changes\"),\r\n  \r\n  // Enterprise dependency features  \r\n  mandatory: z.boolean().default(true).describe(\"Hard constraint vs soft constraint\"),\r\n  external: z.boolean().default(false).describe(\"Cross-project or external dependency\"),\r\n  externalType: ExternalDependencyTypeSchema.optional().describe(\"Type of external dependency\"),\r\n  externalDescription: z.string().optional().describe(\"Description of external dependency\"),\r\n  \r\n  // Risk and impact\r\n  riskLevel: z.enum(['low', 'medium', 'high', 'critical']).default('medium').describe(\"Risk level if dependency fails\"),\r\n  businessImpact: z.enum(['minimal', 'moderate', 'significant', 'severe']).default('moderate').describe(\"Business impact of delay\"),\r\n  \r\n  // Dependency metadata\r\n  description: z.string().optional().describe(\"Detailed dependency description\"),\r\n  rationale: z.string().optional().describe(\"Why this dependency exists\"),\r\n  \r\n  // Stakeholder management\r\n  contactPersonId: z.union([z.string(), z.number()]).optional().describe(\"Contact person for external dependencies\"),\r\n}).strict();\r\n\r\n// Helper function for negative lag validation and conversion\r\nfunction validateAndConvertLag(lag?: string): { isValid: boolean; days: number; type: 'lead' | 'lag' | 'none'; displayText: string } {\r\n  if (!lag) {return { isValid: true, days: 0, type: 'none', displayText: 'No lead/lag' };}\r\n  \r\n  const match = lag.match(/^(-?)P(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/);\r\n  if (!match) {return { isValid: false, days: 0, type: 'none', displayText: 'Invalid format' };}\r\n  \r\n  const [, sign, days = '0', hours = '0', minutes = '0', seconds = '0'] = match;\r\n  const totalDays = parseInt(days) + (parseInt(hours) / 24) + (parseInt(minutes) / (24 * 60)) + (parseInt(seconds) / (24 * 60 * 60));\r\n  const isNegative = sign === '-';\r\n  const actualDays = isNegative ? -totalDays : totalDays;\r\n  \r\n  return {\r\n    isValid: true,\r\n    days: actualDays,\r\n    type: isNegative ? 'lead' : totalDays > 0 ? 'lag' : 'none',\r\n    displayText: isNegative \r\n      ? `${totalDays} day${totalDays !== 1 ? 's' : ''} lead (starts before predecessor finishes)`\r\n      : totalDays > 0 \r\n        ? `${totalDays} day${totalDays !== 1 ? 's' : ''} lag (starts after predecessor finishes)`\r\n        : 'No lead/lag'\r\n  };\r\n}\r\n\r\nexport async function createDependency({ env }: Ctx, input: z.infer<typeof createDependencyInput>) {\r\n  // Validate negative lag support (OpenProject 2024-2025 feature)\r\n  const lagValidation = validateAndConvertLag(input.lag);\r\n  if (!lagValidation.isValid) {\r\n    return {\r\n      ok: false,\r\n      error: `Invalid lag format: ${input.lag}. Use ISO 8601 format like P1D for 1 day lag or -P1D for 1 day lead (negative lag).`,\r\n      lagValidation\r\n    };\r\n  }\r\n  \r\n  // Build dependency payload\r\n  const payload: any = {\r\n    _links: {\r\n      from: hal.workPackage(input.fromWorkPackageId),\r\n      to: hal.workPackage(input.toWorkPackageId),\r\n    },\r\n  };\r\n\r\n  // Map relation type to OpenProject format\r\n  payload.type = input.relationType;\r\n  \r\n  // Add lag/lead time with proper OpenProject format\r\n  if (input.lag) {\r\n    payload.lag = Math.abs(lagValidation.days);\r\n    if (lagValidation.type === 'lead') {\r\n      payload.lag = -payload.lag; // OpenProject uses negative values for lead time\r\n    }\r\n  }\r\n  \r\n  // Add description combining all metadata with enhanced negative lag info\r\n  const descriptionParts = [];\r\n  if (input.description) {descriptionParts.push(input.description);}\r\n  if (input.rationale) {descriptionParts.push(`**Rationale**: ${input.rationale}`);}\r\n  if (input.external) {descriptionParts.push(`**External Dependency**: ${input.externalType || 'General'}`);}\r\n  if (input.externalDescription) {descriptionParts.push(`**External Details**: ${input.externalDescription}`);}\r\n  if (input.riskLevel !== 'medium') {descriptionParts.push(`**Risk Level**: ${input.riskLevel}`);}\r\n  if (input.businessImpact !== 'moderate') {descriptionParts.push(`**Business Impact**: ${input.businessImpact}`);}\r\n  if (input.lag) {descriptionParts.push(`**Timing**: ${lagValidation.displayText}`);}\r\n  if (!input.mandatory) {descriptionParts.push(`**Type**: Soft constraint`);}\r\n  \r\n  if (descriptionParts.length > 0) {\r\n    payload.description = descriptionParts.join('\\n\\n');\r\n  }\r\n\r\n  // Store enterprise metadata in custom fields if available\r\n  const enterpriseMetadata = {\r\n    responseMode: input.responseMode,\r\n    mandatory: input.mandatory,\r\n    external: input.external,\r\n    externalType: input.externalType,\r\n    riskLevel: input.riskLevel,\r\n    businessImpact: input.businessImpact,\r\n    lag: input.lag,\r\n    contactPersonId: input.contactPersonId,\r\n  };\r\n\r\n  // Create the relation\r\n  const { json: created } = await opFetch<any>(env, \"/api/v3/relations\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    dependency: created,\r\n    dependencyUrl: created?._links?.self?.href,\r\n    enterpriseFeatures: {\r\n      relationType: input.relationType,\r\n      responseMode: input.responseMode,\r\n      mandatory: input.mandatory,\r\n      external: input.external,\r\n      riskLevel: input.riskLevel,\r\n      criticalPath: input.relationType === 'follows' && input.mandatory,\r\n      // Enhanced negative lag support (OpenProject 2024-2025)\r\n      lagInfo: lagValidation,\r\n      supportsNegativeLag: true\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Update Dependencies (Enterprise)\r\n//\r\nexport const updateDependencyInput = z.object({\r\n  relationId: z.union([z.string(), z.number()]).describe(\"Relation ID to update\"),\r\n  \r\n  // Updatable fields\r\n  relationType: RelationTypeSchema.optional(),\r\n  lag: DurationSchema,\r\n  responseMode: ResponseModeSchema.optional(),\r\n  mandatory: z.boolean().optional(),\r\n  riskLevel: z.enum(['low', 'medium', 'high', 'critical']).optional(),\r\n  businessImpact: z.enum(['minimal', 'moderate', 'significant', 'severe']).optional(),\r\n  description: z.string().optional(),\r\n  \r\n  // External dependency updates\r\n  external: z.boolean().optional(),\r\n  externalType: ExternalDependencyTypeSchema.optional(),\r\n  externalDescription: z.string().optional(),\r\n  contactPersonId: z.union([z.string(), z.number()]).optional(),\r\n}).strict();\r\n\r\nexport async function updateDependency({ env }: Ctx, input: z.infer<typeof updateDependencyInput>) {\r\n  // Get current relation\r\n  const { json: current } = await opFetch<any>(env, `/api/v3/relations/${input.relationId}`);\r\n  \r\n  const payload: any = {};\r\n\r\n  // Update core fields\r\n  if (input.relationType !== undefined) {payload.type = input.relationType;}\r\n  \r\n  // Build updated description with enterprise metadata\r\n  const descriptionParts = [];\r\n  if (input.description !== undefined) {descriptionParts.push(input.description);}\r\n  \r\n  // Add enterprise metadata to description\r\n  const updates: string[] = [];\r\n  if (input.external !== undefined) {updates.push(`External: ${input.external}`);}\r\n  if (input.externalType !== undefined) {updates.push(`External Type: ${input.externalType}`);}\r\n  if (input.externalDescription !== undefined) {updates.push(`External Details: ${input.externalDescription}`);}\r\n  if (input.riskLevel !== undefined) {updates.push(`Risk Level: ${input.riskLevel}`);}\r\n  if (input.businessImpact !== undefined) {updates.push(`Business Impact: ${input.businessImpact}`);}\r\n  if (input.lag !== undefined) {updates.push(`Lead/Lag: ${input.lag}`);}\r\n  if (input.mandatory !== undefined) {updates.push(`Mandatory: ${input.mandatory}`);}\r\n  if (input.responseMode !== undefined) {updates.push(`Response Mode: ${input.responseMode}`);}\r\n  \r\n  if (updates.length > 0) {\r\n    const existingDescription = current.description || \"\";\r\n    const updatedMetadata = `\\n\\n**Dependency Metadata**:\\n${updates.join('\\n')}`;\r\n    payload.description = existingDescription.replace(/\\n\\n\\*\\*Dependency Metadata\\*\\*:[\\s\\S]*$/, '') + updatedMetadata;\r\n  }\r\n\r\n  const { json: updated } = await opFetch<any>(env, `/api/v3/relations/${input.relationId}`, {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    dependency: updated,\r\n    updatedFields: Object.keys(payload)\r\n  };\r\n}\r\n\r\n//\r\n// Dependency Analysis & Critical Path\r\n//\r\nexport const analyzeDependenciesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional().describe(\"Analyze specific project\"),\r\n  workPackageId: z.union([z.string(), z.number()]).optional().describe(\"Analyze specific work package\"),\r\n  \r\n  // Analysis options\r\n  includeCriticalPath: z.boolean().default(true).describe(\"Calculate critical path\"),\r\n  includeFloatAnalysis: z.boolean().default(true).describe(\"Calculate float/slack times\"),\r\n  includeRiskAnalysis: z.boolean().default(false).describe(\"Analyze dependency risks\"),\r\n  \r\n  // Filtering\r\n  relationType: RelationTypeSchema.optional().describe(\"Filter by relation type\"),\r\n  mandatoryOnly: z.boolean().default(false).describe(\"Show only mandatory dependencies\"),\r\n  externalOnly: z.boolean().default(false).describe(\"Show only external dependencies\"),\r\n  riskLevel: z.enum(['low', 'medium', 'high', 'critical']).optional().describe(\"Filter by risk level\"),\r\n}).strict();\r\n\r\nexport async function analyzeDependencies({ env }: Ctx, input: z.infer<typeof analyzeDependenciesInput>) {\r\n  // Build query to get relations\r\n  const filters: any[] = [];\r\n  \r\n  // Get work packages for the project if specified\r\n  let workPackages: any[] = [];\r\n  if (input.projectId) {\r\n    const { json: wpData } = await opFetch<any>(env, `/api/v3/projects/${input.projectId}/work_packages`, {\r\n      params: { pageSize: 1000 } // Get comprehensive data for analysis\r\n    });\r\n    workPackages = wpData?._embedded?.elements ?? [];\r\n  } else if (input.workPackageId) {\r\n    const { json: wp } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}`);\r\n    workPackages = [wp];\r\n  }\r\n\r\n  // Get all relations for analysis\r\n  const { json: relationsData } = await opFetch<any>(env, \"/api/v3/relations\", {\r\n    params: { pageSize: 1000 }\r\n  });\r\n  const allRelations = relationsData?._embedded?.elements ?? [];\r\n\r\n  // Filter relations based on work packages in scope\r\n  const wpIds = new Set(workPackages.map((wp: any) => wp.id));\r\n  const relevantRelations = allRelations.filter((rel: any) => {\r\n    const fromId = rel._links?.from?.href?.split('/').pop();\r\n    const toId = rel._links?.to?.href?.split('/').pop();\r\n    return wpIds.has(fromId) || wpIds.has(toId);\r\n  });\r\n\r\n  // Apply additional filters\r\n  let filteredRelations = relevantRelations;\r\n  \r\n  if (input.relationType) {\r\n    filteredRelations = filteredRelations.filter((rel: any) => rel.type === input.relationType);\r\n  }\r\n\r\n  // Parse enterprise metadata from descriptions\r\n  const enhancedRelations = filteredRelations.map((rel: any) => {\r\n    const description = rel.description || \"\";\r\n    const metadata: any = {};\r\n    \r\n    // Parse metadata from description\r\n    if (description.includes('External: true')) {metadata.external = true;}\r\n    if (description.includes('Mandatory: false')) {metadata.mandatory = false;}\r\n    else {metadata.mandatory = true;}\r\n    \r\n    // Extract risk level\r\n    const riskMatch = description.match(/Risk Level: (\\w+)/);\r\n    if (riskMatch) {metadata.riskLevel = riskMatch[1];}\r\n    else {metadata.riskLevel = 'medium';}\r\n    \r\n    // Extract business impact  \r\n    const impactMatch = description.match(/Business Impact: (\\w+)/);\r\n    if (impactMatch) {metadata.businessImpact = impactMatch[1];}\r\n    \r\n    // Extract lag time\r\n    const lagMatch = description.match(/Lead\\/Lag: ([^\\\\n]+)/);\r\n    if (lagMatch) {metadata.lag = lagMatch[1];}\r\n\r\n    return { ...rel, metadata };\r\n  });\r\n\r\n  // Apply enterprise filters\r\n  if (input.mandatoryOnly) {\r\n    filteredRelations = enhancedRelations.filter((rel: any) => rel.metadata.mandatory !== false);\r\n  }\r\n  \r\n  if (input.externalOnly) {\r\n    filteredRelations = enhancedRelations.filter((rel: any) => rel.metadata.external === true);\r\n  }\r\n  \r\n  if (input.riskLevel) {\r\n    filteredRelations = enhancedRelations.filter((rel: any) => rel.metadata.riskLevel === input.riskLevel);\r\n  }\r\n\r\n  // Critical Path Analysis\r\n  let criticalPathAnalysis = {};\r\n  if (input.includeCriticalPath) {\r\n    // Build dependency graph\r\n    const dependencyGraph = new Map<string, any>();\r\n    const wpMap = new Map(workPackages.map((wp: any) => [wp.id, wp]));\r\n    \r\n    // Initialize nodes\r\n    workPackages.forEach((wp: any) => {\r\n      dependencyGraph.set(wp.id, {\r\n        id: wp.id,\r\n        name: wp.subject,\r\n        duration: calculateDuration(wp.startDate, wp.dueDate),\r\n        dependencies: [],\r\n        dependents: [],\r\n        earliestStart: new Date(wp.startDate || new Date()),\r\n        latestStart: null,\r\n        float: 0,\r\n      });\r\n    });\r\n\r\n    // Add dependencies\r\n    filteredRelations.forEach((rel: any) => {\r\n      const fromId = rel._links?.from?.href?.split('/').pop();\r\n      const toId = rel._links?.to?.href?.split('/').pop();\r\n      \r\n      if (rel.type === 'follows' && rel.metadata.mandatory !== false) {\r\n        const fromNode = dependencyGraph.get(fromId);\r\n        const toNode = dependencyGraph.get(toId);\r\n        \r\n        if (fromNode && toNode) {\r\n          fromNode.dependents.push(toId);\r\n          toNode.dependencies.push(fromId);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate critical path (simplified)\r\n    const criticalPath = [];\r\n    let longestPath = 0;\r\n    \r\n    // Forward pass - calculate earliest start times\r\n    const visited = new Set<string>();\r\n    const calculateEarliestStart = (nodeId: string): number => {\r\n      if (visited.has(nodeId)) {return 0;}\r\n      visited.add(nodeId);\r\n      \r\n      const node = dependencyGraph.get(nodeId);\r\n      if (!node) {return 0;}\r\n      \r\n      let maxPredecessorEnd = 0;\r\n      node.dependencies.forEach((depId: string) => {\r\n        const depNode = dependencyGraph.get(depId);\r\n        if (depNode) {\r\n          const depEnd = calculateEarliestStart(depId) + depNode.duration;\r\n          maxPredecessorEnd = Math.max(maxPredecessorEnd, depEnd);\r\n        }\r\n      });\r\n      \r\n      return maxPredecessorEnd;\r\n    };\r\n\r\n    // Find critical path nodes\r\n    workPackages.forEach((wp: any) => {\r\n      const totalDuration = calculateEarliestStart(wp.id) + calculateDuration(wp.startDate, wp.dueDate);\r\n      if (totalDuration > longestPath) {\r\n        longestPath = totalDuration;\r\n      }\r\n    });\r\n\r\n    criticalPathAnalysis = {\r\n      totalProjectDuration: longestPath,\r\n      criticalPathExists: longestPath > 0,\r\n      criticalPathLength: Math.round(longestPath),\r\n      dependencyChains: filteredRelations.length,\r\n      riskySections: filteredRelations.filter((rel: any) => \r\n        rel.metadata.riskLevel === 'high' || rel.metadata.riskLevel === 'critical'\r\n      ).length,\r\n    };\r\n  }\r\n\r\n  // Float Analysis\r\n  let floatAnalysis = {};\r\n  if (input.includeFloatAnalysis) {\r\n    floatAnalysis = {\r\n      zeroFloatTasks: 0, // Tasks on critical path\r\n      positiveFloatTasks: 0, // Tasks with scheduling flexibility\r\n      averageFloat: 0,\r\n      maxFloat: 0,\r\n    };\r\n  }\r\n\r\n  // Risk Analysis\r\n  let riskAnalysis = {};\r\n  if (input.includeRiskAnalysis) {\r\n    const riskCounts = {\r\n      low: filteredRelations.filter((rel: any) => rel.metadata.riskLevel === 'low').length,\r\n      medium: filteredRelations.filter((rel: any) => rel.metadata.riskLevel === 'medium').length,\r\n      high: filteredRelations.filter((rel: any) => rel.metadata.riskLevel === 'high').length,\r\n      critical: filteredRelations.filter((rel: any) => rel.metadata.riskLevel === 'critical').length,\r\n    };\r\n    \r\n    riskAnalysis = {\r\n      totalRiskyDependencies: riskCounts.high + riskCounts.critical,\r\n      riskDistribution: riskCounts,\r\n      externalDependencies: filteredRelations.filter((rel: any) => rel.metadata.external).length,\r\n      mandatoryDependencies: filteredRelations.filter((rel: any) => rel.metadata.mandatory !== false).length,\r\n    };\r\n  }\r\n\r\n  return {\r\n    dependencyAnalysis: {\r\n      totalDependencies: filteredRelations.length,\r\n      dependencies: filteredRelations,\r\n      criticalPath: input.includeCriticalPath ? criticalPathAnalysis : undefined,\r\n      floatAnalysis: input.includeFloatAnalysis ? floatAnalysis : undefined,\r\n      riskAnalysis: input.includeRiskAnalysis ? riskAnalysis : undefined,\r\n      \r\n      // Summary metrics\r\n      summary: {\r\n        follows: filteredRelations.filter((rel: any) => rel.type === 'follows').length,\r\n        blocks: filteredRelations.filter((rel: any) => rel.type === 'blocks').length,\r\n        external: filteredRelations.filter((rel: any) => rel.metadata.external).length,\r\n        highRisk: filteredRelations.filter((rel: any) => \r\n          rel.metadata.riskLevel === 'high' || rel.metadata.riskLevel === 'critical'\r\n        ).length,\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Remove Dependencies\r\n//\r\nexport const removeDependencyInput = z.object({\r\n  relationId: z.union([z.string(), z.number()]).describe(\"Relation ID to remove\"),\r\n  reason: z.string().optional().describe(\"Reason for removing dependency\"),\r\n}).strict();\r\n\r\n// Enhanced relation management (OpenProject 2024-2025 two-level structure)\r\nexport const manageRelationStructureInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package to manage relations for\"),\r\n  action: z.enum(['list_primary', 'list_other', 'reorganize'])\r\n    .describe(\"Action to perform on relation structure\"),\r\n  relationCategory: z.enum(['primary', 'other']).optional()\r\n    .describe(\"Category of relations (primary: related_to, predecessor, successor, child, parent; other: duplicates, blocks, requires)\"),\r\n}).strict();\r\n\r\nexport async function manageRelationStructure({ env }: Ctx, input: z.infer<typeof manageRelationStructureInput>) {\r\n  try {\r\n    const { json: workPackage } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}`);\r\n    const { json: relations } = await opFetch<any>(env, `/api/v3/work_packages/${input.workPackageId}/relations`);\r\n    \r\n    const allRelations = relations?._embedded?.elements || [];\r\n    \r\n    // Categorize relations according to new OpenProject 2024-2025 UI structure\r\n    const primaryRelations = allRelations.filter((rel: any) => \r\n      ['relates', 'follows', 'precedes', 'parent', 'child'].includes(rel.type)\r\n    );\r\n    \r\n    const otherRelations = allRelations.filter((rel: any) => \r\n      ['duplicates', 'blocks', 'requires', 'starts'].includes(rel.type)\r\n    );\r\n    \r\n    // Add enhanced negative lag information\r\n    const enhanceRelationWithLag = (relation: any) => {\r\n      const lagInfo = relation.lag \r\n        ? validateAndConvertLag(relation.lag > 0 ? `P${relation.lag}D` : `-P${Math.abs(relation.lag)}D`)\r\n        : validateAndConvertLag();\r\n      \r\n      return {\r\n        ...relation,\r\n        lagInfo,\r\n        supportsNegativeLag: true,\r\n        canHaveNegativeLag: ['follows', 'precedes'].includes(relation.type)\r\n      };\r\n    };\r\n    \r\n    switch (input.action) {\r\n      case 'list_primary':\r\n        return {\r\n          workPackageId: input.workPackageId,\r\n          category: 'primary',\r\n          relations: primaryRelations.map(enhanceRelationWithLag),\r\n          count: primaryRelations.length,\r\n          availableTypes: [\r\n            { type: 'relates', name: 'Related to', supportsLag: false },\r\n            { type: 'follows', name: 'Predecessor', supportsLag: true, supportsNegativeLag: true },\r\n            { type: 'precedes', name: 'Successor', supportsLag: true, supportsNegativeLag: true },\r\n            { type: 'child', name: '(New) Child', supportsLag: false },\r\n            { type: 'parent', name: 'Parent', supportsLag: false }\r\n          ]\r\n        };\r\n        \r\n      case 'list_other':\r\n        return {\r\n          workPackageId: input.workPackageId,\r\n          category: 'other',\r\n          relations: otherRelations.map(enhanceRelationWithLag),\r\n          count: otherRelations.length,\r\n          availableTypes: [\r\n            { type: 'duplicates', name: 'Duplicates', supportsLag: false },\r\n            { type: 'blocks', name: 'Blocks', supportsLag: true, supportsNegativeLag: false },\r\n            { type: 'requires', name: 'Requires', supportsLag: true, supportsNegativeLag: false }\r\n          ]\r\n        };\r\n        \r\n      case 'reorganize':\r\n        return {\r\n          workPackageId: input.workPackageId,\r\n          structure: {\r\n            primary: {\r\n              name: 'Primary Relations',\r\n              description: 'Most common relations shown directly in UI',\r\n              relations: primaryRelations.map(enhanceRelationWithLag),\r\n              count: primaryRelations.length\r\n            },\r\n            other: {\r\n              name: 'Other Relations',\r\n              description: 'Less frequently used options grouped together',\r\n              relations: otherRelations.map(enhanceRelationWithLag),\r\n              count: otherRelations.length\r\n            }\r\n          },\r\n          newFeatures2025: {\r\n            negativeLagSupport: true,\r\n            twoLevelStructure: true,\r\n            enhancedUX: 'Primary choices visible at a glance, with organized secondary options'\r\n          }\r\n        };\r\n        \r\n      default:\r\n        return {\r\n          error: 'Invalid action specified',\r\n          validActions: ['list_primary', 'list_other', 'reorganize']\r\n        };\r\n    }\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      error: `Failed to manage relation structure: ${error.message}`,\r\n      workPackageId: input.workPackageId\r\n    };\r\n  }\r\n}\r\n\r\nexport async function removeDependency({ env }: Ctx, input: z.infer<typeof removeDependencyInput>) {\r\n  // Get relation details before deletion\r\n  const { json: relation } = await opFetch<any>(env, `/api/v3/relations/${input.relationId}`);\r\n  \r\n  // Delete the relation\r\n  await opFetch<any>(env, `/api/v3/relations/${input.relationId}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    removedDependency: {\r\n      id: relation.id,\r\n      from: relation._links?.from?.title,\r\n      to: relation._links?.to?.title,\r\n      type: relation.type,\r\n      reason: input.reason,\r\n    }\r\n  };\r\n}\r\n\r\n// Helper function to calculate duration in days\r\nfunction calculateDuration(startDate?: string, endDate?: string): number {\r\n  if (!startDate || !endDate) {return 1;} // Default 1 day\r\n  \r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n  const diffTime = Math.abs(end.getTime() - start.getTime());\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  \r\n  return Math.max(1, diffDays);\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/health.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":17,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":17,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[545,547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":18,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":18,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[587,589],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/health.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\nimport { notifyToolExecution } from \"../sse\";\r\n\r\n//\r\n// Health: check OpenProject connectivity and auth\r\n//\r\nexport const healthCheckInput = z.object({});\r\n\r\nexport async function healthCheck({ env }: Ctx, _input: z.infer<typeof healthCheckInput>) {\r\n  const { json, res } = await opFetch<any>(env, \"/api/v3/\");\r\n  const result = {\r\n    status: \"ok\",\r\n    statusCode: res.status,\r\n    instanceName: json?.instanceName || \"unknown\",\r\n    version: json?.version || \"unknown\",\r\n    _links: json?._links,\r\n  };\r\n  \r\n  // Notify SSE clients about health check execution\r\n  notifyToolExecution('op.health', 'global', {\r\n    result,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n  \r\n  return result;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/hybridTools.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":110,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctx' is defined but never used. Allowed unused args must match /^_/u.","line":155,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":155,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":155,"endColumn":58},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":228,"column":63,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":228,"endColumn":67,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8211,8212],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":229,"column":63,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":229,"endColumn":67,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8328,8329],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":237,"column":44,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":237,"endColumn":48,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8789,8790],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":237,"column":72,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":237,"endColumn":102,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8843,8844],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":237,"column":72,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":237,"endColumn":97,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8838,8839],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":238,"column":44,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":238,"endColumn":48,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8926,8927],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":238,"column":76,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":238,"endColumn":106,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8984,8985],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":238,"column":76,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":238,"endColumn":101,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8979,8980],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctx' is defined but never used. Allowed unused args must match /^_/u.","line":268,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":268,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":54}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/hybridTools.ts\r\nimport { z } from \"zod\";\r\nimport { hybridManager } from \"../data/hybrid-manager\";\r\nimport { variableManager } from \"../data/variable-manager\";\r\nimport { cacheManager } from \"../data/cache-manager\";\r\nimport type { Ctx } from \"../tools\";\r\nimport { PMOVariablesSchema } from \"../types/hybrid-data\";\r\n\r\n/**\r\n * New MCP tools for hybrid PMO functionality\r\n * These tools provide access to the hybrid data system that combines\r\n * OpenProject native calculations with custom enterprise features\r\n */\r\n\r\n//\r\n// Project Data Tools - Hybrid approach\r\n//\r\nexport const getProjectDataInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  includeCalculations: z.boolean().default(true).describe(\"Include enterprise calculations (EVM, Critical Path, etc.)\"),\r\n  forceRefresh: z.boolean().default(false).describe(\"Force refresh of cached data\"),\r\n}).strict();\r\n\r\nexport async function getProjectData(ctx: Ctx, input: z.infer<typeof getProjectDataInput>) {\r\n  if (input.forceRefresh) {\r\n    await hybridManager.invalidateProjectCache(input.projectId);\r\n  }\r\n  \r\n  return await hybridManager.getProjectData(ctx, input.projectId);\r\n}\r\n\r\n//\r\n// Real-time Project Status (Never cached)\r\n//\r\nexport const getProjectStatusInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n}).strict();\r\n\r\nexport async function getProjectStatus(ctx: Ctx, input: z.infer<typeof getProjectStatusInput>) {\r\n  return await hybridManager.getProjectStatus(ctx, input.projectId);\r\n}\r\n\r\n//\r\n// Portfolio Analytics\r\n//\r\nexport const getPortfolioAnalyticsInput = z.object({\r\n  projectIds: z.array(z.union([z.string(), z.number()])).describe(\"Array of project IDs to analyze\"),\r\n  includeResourceConflicts: z.boolean().default(true).describe(\"Include resource conflict analysis\"),\r\n  includeRecommendations: z.boolean().default(true).describe(\"Include strategic recommendations\"),\r\n}).strict();\r\n\r\nexport async function getPortfolioAnalytics(ctx: Ctx, input: z.infer<typeof getPortfolioAnalyticsInput>) {\r\n  return await hybridManager.getPortfolioAnalytics(ctx, input.projectIds);\r\n}\r\n\r\n//\r\n// PMO Variable Management Tools\r\n//\r\nexport const getProjectVariablesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n}).strict();\r\n\r\nexport async function getProjectVariables(ctx: Ctx, input: z.infer<typeof getProjectVariablesInput>) {\r\n  return await variableManager.getProjectVariables(ctx, input.projectId);\r\n}\r\n\r\nexport const setProjectVariablesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  variables: PMOVariablesSchema.partial().describe(\"PMO variables to update\"),\r\n  validateOnly: z.boolean().default(false).describe(\"Only validate changes without applying them\"),\r\n}).strict();\r\n\r\nexport async function setProjectVariables(ctx: Ctx, input: z.infer<typeof setProjectVariablesInput>) {\r\n  // Validate the changes first\r\n  const validation = await variableManager.validateVariableChanges(ctx, input.projectId, input.variables);\r\n  \r\n  if (!validation.isValid) {\r\n    return {\r\n      success: false,\r\n      validation,\r\n      message: \"Variable changes failed validation\"\r\n    };\r\n  }\r\n  \r\n  if (input.validateOnly) {\r\n    return {\r\n      success: true,\r\n      validation,\r\n      message: \"Variables validated successfully\",\r\n      wouldApply: input.variables\r\n    };\r\n  }\r\n  \r\n  // Apply the changes\r\n  const updatedVariables = await variableManager.setProjectVariables(ctx, input.projectId, input.variables);\r\n  \r\n  // Invalidate cache since variables changed\r\n  await hybridManager.invalidateProjectCache(input.projectId);\r\n  \r\n  return {\r\n    success: true,\r\n    validation,\r\n    updatedVariables,\r\n    message: \"Variables updated successfully\"\r\n  };\r\n}\r\n\r\nexport const getOrganizationalDefaultsInput = z.object({}).strict();\r\n\r\nexport async function getOrganizationalDefaults(ctx: Ctx, input: z.infer<typeof getOrganizationalDefaultsInput>) {\r\n  return await variableManager.getOrganizationalDefaults(ctx);\r\n}\r\n\r\nexport const setOrganizationalDefaultsInput = z.object({\r\n  defaults: PMOVariablesSchema.partial().describe(\"Organizational default PMO variables\"),\r\n}).strict();\r\n\r\nexport async function setOrganizationalDefaults(ctx: Ctx, input: z.infer<typeof setOrganizationalDefaultsInput>) {\r\n  await variableManager.setOrganizationalDefaults(ctx, input.defaults);\r\n  \r\n  return {\r\n    success: true,\r\n    message: \"Organizational defaults updated successfully\"\r\n  };\r\n}\r\n\r\n//\r\n// User Variables\r\n//\r\nexport const getUserVariablesInput = z.object({\r\n  userId: z.union([z.string(), z.number()]).describe(\"User ID\"),\r\n}).strict();\r\n\r\nexport async function getUserVariables(ctx: Ctx, input: z.infer<typeof getUserVariablesInput>) {\r\n  return await variableManager.getUserVariables(ctx, input.userId);\r\n}\r\n\r\n//\r\n// Multiple Projects Data\r\n//\r\nexport const getMultipleProjectsDataInput = z.object({\r\n  projectIds: z.array(z.union([z.string(), z.number()])).describe(\"Array of project IDs\"),\r\n  includeCalculations: z.boolean().default(true).describe(\"Include enterprise calculations\"),\r\n}).strict();\r\n\r\nexport async function getMultipleProjectsData(ctx: Ctx, input: z.infer<typeof getMultipleProjectsDataInput>) {\r\n  return await hybridManager.getMultipleProjectsData(ctx, input.projectIds);\r\n}\r\n\r\n//\r\n// Cache Management Tools\r\n//\r\nexport const getCachePerformanceInput = z.object({}).strict();\r\n\r\nexport async function getCachePerformance(ctx: Ctx, input: z.infer<typeof getCachePerformanceInput>) {\r\n  return await hybridManager.getCachePerformance();\r\n}\r\n\r\nexport const clearProjectCacheInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID to clear cache for\"),\r\n}).strict();\r\n\r\nexport async function clearProjectCache(ctx: Ctx, input: z.infer<typeof clearProjectCacheInput>) {\r\n  await hybridManager.invalidateProjectCache(input.projectId);\r\n  \r\n  return {\r\n    success: true,\r\n    message: `Cache cleared for project ${input.projectId}`\r\n  };\r\n}\r\n\r\nexport const warmCacheInput = z.object({\r\n  projectIds: z.array(z.union([z.string(), z.number()])).describe(\"Array of project IDs to warm cache for\"),\r\n}).strict();\r\n\r\nexport async function warmCache(ctx: Ctx, input: z.infer<typeof warmCacheInput>) {\r\n  await cacheManager.warmCache(input.projectIds);\r\n  \r\n  return {\r\n    success: true,\r\n    message: `Cache warmed for ${input.projectIds.length} projects`\r\n  };\r\n}\r\n\r\n//\r\n// Variable Export/Import Tools\r\n//\r\nexport const exportProjectVariablesInput = z.object({\r\n  projectIds: z.array(z.union([z.string(), z.number()])).describe(\"Array of project IDs to export\"),\r\n}).strict();\r\n\r\nexport async function exportProjectVariables(ctx: Ctx, input: z.infer<typeof exportProjectVariablesInput>) {\r\n  return await variableManager.exportProjectVariables(ctx, input.projectIds);\r\n}\r\n\r\n//\r\n// Enhanced EVM Analysis (with variable comparison)\r\n//\r\nexport const analyzeEVMWithBenchmarkInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  benchmarkProjects: z.array(z.union([z.string(), z.number()])).optional().describe(\"Project IDs to benchmark against\"),\r\n  includeIndustryComparison: z.boolean().default(false).describe(\"Include industry benchmark comparison\"),\r\n}).strict();\r\n\r\nexport async function analyzeEVMWithBenchmark(ctx: Ctx, input: z.infer<typeof analyzeEVMWithBenchmarkInput>) {\r\n  const projectData = await hybridManager.getProjectData(ctx, input.projectId);\r\n  \r\n  if (!projectData.calculations?.evm) {\r\n    throw new Error('EVM calculation not available for this project');\r\n  }\r\n  \r\n  const result: any = {\r\n    project: {\r\n      id: input.projectId,\r\n      name: projectData.native.name,\r\n      evm: projectData.calculations.evm\r\n    }\r\n  };\r\n  \r\n  // Compare with benchmark projects if provided\r\n  if (input.benchmarkProjects?.length) {\r\n    const benchmarkData = await hybridManager.getMultipleProjectsData(ctx, input.benchmarkProjects);\r\n    const benchmarkEVMs = benchmarkData\r\n      .map(p => p.calculations?.evm)\r\n      .filter(evm => evm !== undefined);\r\n    \r\n    if (benchmarkEVMs.length > 0) {\r\n      const avgCPI = benchmarkEVMs.reduce((sum, evm) => sum + evm!.costPerformanceIndex, 0) / benchmarkEVMs.length;\r\n      const avgSPI = benchmarkEVMs.reduce((sum, evm) => sum + evm!.schedulePerformanceIndex, 0) / benchmarkEVMs.length;\r\n      \r\n      result.benchmark = {\r\n        averageCPI: Math.round(avgCPI * 1000) / 1000,\r\n        averageSPI: Math.round(avgSPI * 1000) / 1000,\r\n        projectCPIComparison: projectData.calculations.evm.costPerformanceIndex - avgCPI,\r\n        projectSPIComparison: projectData.calculations.evm.schedulePerformanceIndex - avgSPI,\r\n        projectRanking: {\r\n          cpi: benchmarkEVMs.filter(evm => evm!.costPerformanceIndex < projectData.calculations!.evm!.costPerformanceIndex).length + 1,\r\n          spi: benchmarkEVMs.filter(evm => evm!.schedulePerformanceIndex < projectData.calculations!.evm!.schedulePerformanceIndex).length + 1,\r\n          total: benchmarkEVMs.length + 1\r\n        }\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Industry comparison (placeholder - would be enhanced with real industry data)\r\n  if (input.includeIndustryComparison) {\r\n    const industryType = projectData.variables.industryType;\r\n    const industryBenchmarks = getIndustryBenchmarks(industryType);\r\n    \r\n    result.industryComparison = {\r\n      industryType,\r\n      benchmarks: industryBenchmarks,\r\n      projectPerformance: {\r\n        cpiVsIndustry: projectData.calculations.evm.costPerformanceIndex - industryBenchmarks.averageCPI,\r\n        spiVsIndustry: projectData.calculations.evm.schedulePerformanceIndex - industryBenchmarks.averageSPI\r\n      }\r\n    };\r\n  }\r\n  \r\n  return result;\r\n}\r\n\r\n//\r\n// System Health and Diagnostics\r\n//\r\nexport const getSystemHealthInput = z.object({}).strict();\r\n\r\nexport async function getSystemHealth(ctx: Ctx, input: z.infer<typeof getSystemHealthInput>) {\r\n  const cachePerformance = await hybridManager.getCachePerformance();\r\n  \r\n  return {\r\n    timestamp: new Date().toISOString(),\r\n    cache: cachePerformance,\r\n    system: {\r\n      status: 'healthy',\r\n      version: '3.0.0',\r\n      features: {\r\n        hybridDataAccess: true,\r\n        enterpriseCalculations: true,\r\n        variableManagement: true,\r\n        intelligentCaching: true\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n// Helper function for industry benchmarks (would be enhanced with real data)\r\nfunction getIndustryBenchmarks(industryType: string): { averageCPI: number; averageSPI: number } {\r\n  const benchmarks: Record<string, { averageCPI: number; averageSPI: number }> = {\r\n    'software': { averageCPI: 0.92, averageSPI: 0.88 },\r\n    'construction': { averageCPI: 0.89, averageSPI: 0.85 },\r\n    'manufacturing': { averageCPI: 0.94, averageSPI: 0.91 },\r\n    'consulting': { averageCPI: 0.96, averageSPI: 0.93 },\r\n    'default': { averageCPI: 0.91, averageSPI: 0.89 }\r\n  };\r\n  \r\n  return benchmarks[industryType] || benchmarks['default'];\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/milestonesEnterprise.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":215,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":215,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8427,8429],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":216,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11007,11009],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":278,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":325,"column":3,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":327,"endColumn":4,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[12533,12626],"text":"enterpriseMetadata.approvalHistory ??= [];"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":339,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":339,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13023,13025],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":422,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":422,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15869,15871],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":423,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":17},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":430,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":430,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16058,16060],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":431,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":431,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16127,16129],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":432,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":432,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16196,16198],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/milestonesEnterprise.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Enterprise Milestone & Phase Gate Management\r\n//\r\n\r\n// Formattable field schema\r\nconst FormattableFieldSchema = z.object({\r\n  format: z.string().default(\"markdown\"),\r\n  raw: z.string(),\r\n  html: z.string().optional(),\r\n}).optional();\r\n\r\n// Enterprise milestone custom fields\r\nconst MilestoneCustomFieldsSchema = z.object({\r\n  customField1: z.any().optional(), // Gate criteria\r\n  customField2: z.any().optional(), // Approval required\r\n  customField3: z.any().optional(), // Stakeholder sign-off\r\n  customField4: z.any().optional(), // Budget checkpoint\r\n  customField5: z.any().optional(), // Risk assessment\r\n  customField6: z.any().optional(), // Quality metrics\r\n  customField7: z.any().optional(), // Compliance check\r\n  customField8: z.any().optional(), // Business value delivered\r\n}).partial();\r\n\r\n// Milestone status enum\r\nconst MilestoneStatusSchema = z.enum(['open', 'locked', 'closed']).describe(\"Milestone status\");\r\n\r\n// Sharing/visibility enum\r\nconst SharingSchema = z.enum([\r\n  'none',        // Not shared\r\n  'descendants', // Shared with child projects\r\n  'hierarchy',   // Shared with project hierarchy\r\n  'tree',        // Shared with project tree\r\n  'system'       // System-wide sharing\r\n]).describe(\"Milestone sharing level\");\r\n\r\n// Enterprise milestone types\r\nconst MilestoneTypeSchema = z.enum([\r\n  'phase_gate',     // Phase gate requiring approval\r\n  'deliverable',    // Deliverable milestone\r\n  'review_point',   // Review/checkpoint milestone\r\n  'baseline',       // Baseline establishment point\r\n  'release',        // Release milestone\r\n  'decision_point', // Decision gate\r\n  'risk_checkpoint' // Risk assessment point\r\n]).describe(\"Type of milestone for enterprise governance\");\r\n\r\n//\r\n// Enhanced Version/Milestone Creation (Enterprise)\r\n//\r\nexport const createMilestoneEnterpriseInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  \r\n  // Core milestone fields\r\n  name: z.string().min(1).max(60).describe(\"Milestone name (1-60 characters)\"),\r\n  description: FormattableFieldSchema.describe(\"Detailed milestone description\"),\r\n  \r\n  // Timeline management (enterprise)\r\n  startDate: z.string().optional().describe(\"Milestone start date (YYYY-MM-DD)\"),\r\n  endDate: z.string().optional().describe(\"Target completion date (YYYY-MM-DD)\"),\r\n  baselineDate: z.string().optional().describe(\"Original baseline date for EVM\"),\r\n  \r\n  // Status and visibility\r\n  status: MilestoneStatusSchema.default('open'),\r\n  sharing: SharingSchema.default('descendants'),\r\n  \r\n  // Enterprise milestone features\r\n  milestoneType: MilestoneTypeSchema.default('deliverable').describe(\"Enterprise milestone classification\"),\r\n  criticalPath: z.boolean().default(false).describe(\"Whether milestone is on critical path\"),\r\n  \r\n  // Phase gate management\r\n  approvalRequired: z.boolean().default(false).describe(\"Requires stakeholder approval to close\"),\r\n  approverIds: z.array(z.union([z.string(), z.number()])).optional().describe(\"Required approver user IDs\"),\r\n  gateExitCriteria: z.string().optional().describe(\"Criteria that must be met to pass gate\"),\r\n  \r\n  // Stakeholder management\r\n  responsibleId: z.union([z.string(), z.number()]).optional().describe(\"Milestone owner/responsible person\"),\r\n  stakeholderIds: z.array(z.union([z.string(), z.number()])).optional().describe(\"Key stakeholder IDs\"),\r\n  \r\n  // Quality and compliance\r\n  qualityGateRequired: z.boolean().default(false).describe(\"Requires quality gate approval\"),\r\n  complianceCheckRequired: z.boolean().default(false).describe(\"Requires compliance verification\"),\r\n  \r\n  // Custom enterprise fields\r\n  customFields: MilestoneCustomFieldsSchema.optional().describe(\"Organization-specific milestone fields\"),\r\n}).strict();\r\n\r\nexport async function createMilestoneEnterprise({ env }: Ctx, input: z.infer<typeof createMilestoneEnterpriseInput>) {\r\n  // Build comprehensive milestone payload\r\n  const payload: any = {\r\n    name: input.name,\r\n    status: input.status,\r\n    sharing: input.sharing,\r\n    _links: {},\r\n  };\r\n\r\n  // Add optional core fields\r\n  if (input.description) {payload.description = input.description;}\r\n  if (input.startDate) {payload.startDate = input.startDate;}\r\n  if (input.endDate) {payload.endDate = input.endDate;}\r\n\r\n  // Enterprise milestone metadata\r\n  const enterpriseMetadata = {\r\n    milestoneType: input.milestoneType,\r\n    criticalPath: input.criticalPath,\r\n    approvalRequired: input.approvalRequired,\r\n    gateExitCriteria: input.gateExitCriteria,\r\n    qualityGateRequired: input.qualityGateRequired,\r\n    complianceCheckRequired: input.complianceCheckRequired,\r\n    baselineDate: input.baselineDate,\r\n  };\r\n\r\n  // Store enterprise metadata in custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]: [string, any]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Store enterprise metadata in available custom fields\r\n  payload.customField1 = JSON.stringify(enterpriseMetadata);\r\n\r\n  // Stakeholder assignments\r\n  if (input.responsibleId) {payload._links.responsible = hal.user(input.responsibleId);}\r\n  \r\n  // Store approvers and stakeholders in description if no dedicated fields\r\n  if (input.approverIds || input.stakeholderIds) {\r\n    const stakeholderInfo = [];\r\n    if (input.approverIds?.length) {\r\n      stakeholderInfo.push(`**Approvers**: ${input.approverIds.join(', ')}`);\r\n    }\r\n    if (input.stakeholderIds?.length) {\r\n      stakeholderInfo.push(`**Key Stakeholders**: ${input.stakeholderIds.join(', ')}`);\r\n    }\r\n    \r\n    const originalDescription = input.description?.raw || \"\";\r\n    payload.description = {\r\n      format: \"markdown\",\r\n      raw: originalDescription + (originalDescription ? \"\\n\\n\" : \"\") + stakeholderInfo.join(\"\\n\\n\")\r\n    };\r\n  }\r\n\r\n  const { json: created } = await opFetch<any>(env, \"/api/v3/versions\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    milestone: created,\r\n    milestoneUrl: created?._links?.self?.href,\r\n    enterpriseFeatures: {\r\n      type: input.milestoneType,\r\n      criticalPath: input.criticalPath,\r\n      approvalRequired: input.approvalRequired,\r\n      phaseGate: input.milestoneType === 'phase_gate',\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Enterprise Milestone Updates\r\n//\r\nexport const updateMilestoneEnterpriseInput = z.object({\r\n  id: z.union([z.string(), z.number()]).describe(\"Milestone ID\"),\r\n  \r\n  // Updatable fields\r\n  name: z.string().min(1).max(60).optional(),\r\n  description: FormattableFieldSchema,\r\n  startDate: z.string().optional(),\r\n  endDate: z.string().optional(),\r\n  status: MilestoneStatusSchema.optional(),\r\n  sharing: SharingSchema.optional(),\r\n  \r\n  // Enterprise updates\r\n  milestoneType: MilestoneTypeSchema.optional(),\r\n  criticalPath: z.boolean().optional(),\r\n  approvalRequired: z.boolean().optional(),\r\n  gateExitCriteria: z.string().optional(),\r\n  qualityGateRequired: z.boolean().optional(),\r\n  complianceCheckRequired: z.boolean().optional(),\r\n  \r\n  // Stakeholder updates\r\n  responsibleId: z.union([z.string(), z.number()]).optional(),\r\n  approverIds: z.array(z.union([z.string(), z.number()])).optional(),\r\n  stakeholderIds: z.array(z.union([z.string(), z.number()])).optional(),\r\n  \r\n  // Custom field updates\r\n  customFields: MilestoneCustomFieldsSchema.optional(),\r\n}).strict();\r\n\r\nexport async function updateMilestoneEnterprise({ env }: Ctx, input: z.infer<typeof updateMilestoneEnterpriseInput>) {\r\n  // Get current milestone data\r\n  const { json: current } = await opFetch<any>(env, `/api/v3/versions/${input.id}`);\r\n  \r\n  const payload: any = {};\r\n\r\n  // Update core fields\r\n  if (input.name !== undefined) {payload.name = input.name;}\r\n  if (input.description !== undefined) {payload.description = input.description;}\r\n  if (input.startDate !== undefined) {payload.startDate = input.startDate;}\r\n  if (input.endDate !== undefined) {payload.endDate = input.endDate;}\r\n  if (input.status !== undefined) {payload.status = input.status;}\r\n  if (input.sharing !== undefined) {payload.sharing = input.sharing;}\r\n\r\n  // Update enterprise metadata\r\n  let enterpriseMetadata: any = {};\r\n  try {\r\n    enterpriseMetadata = JSON.parse(current.customField1 || '{}');\r\n  } catch (e) {\r\n    enterpriseMetadata = {};\r\n  }\r\n\r\n  // Update enterprise fields\r\n  if (input.milestoneType !== undefined) {enterpriseMetadata.milestoneType = input.milestoneType;}\r\n  if (input.criticalPath !== undefined) {enterpriseMetadata.criticalPath = input.criticalPath;}\r\n  if (input.approvalRequired !== undefined) {enterpriseMetadata.approvalRequired = input.approvalRequired;}\r\n  if (input.gateExitCriteria !== undefined) {enterpriseMetadata.gateExitCriteria = input.gateExitCriteria;}\r\n  if (input.qualityGateRequired !== undefined) {enterpriseMetadata.qualityGateRequired = input.qualityGateRequired;}\r\n  if (input.complianceCheckRequired !== undefined) {enterpriseMetadata.complianceCheckRequired = input.complianceCheckRequired;}\r\n\r\n  payload.customField1 = JSON.stringify(enterpriseMetadata);\r\n\r\n  // Update stakeholder assignments\r\n  payload._links = {};\r\n  if (input.responsibleId !== undefined) {\r\n    payload._links.responsible = input.responsibleId ? hal.user(input.responsibleId) : null;\r\n  }\r\n\r\n  // Update custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]: [string, any]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  const { json: updated } = await opFetch<any>(env, `/api/v3/versions/${input.id}`, {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    milestone: updated,\r\n    enterpriseMetadata: enterpriseMetadata\r\n  };\r\n}\r\n\r\n//\r\n// Phase Gate Approval Process\r\n//\r\nexport const processPhaseGateInput = z.object({\r\n  milestoneId: z.union([z.string(), z.number()]).describe(\"Milestone ID\"),\r\n  action: z.enum(['approve', 'reject', 'request_review']).describe(\"Gate action\"),\r\n  approverId: z.union([z.string(), z.number()]).describe(\"Approver user ID\"),\r\n  comments: z.string().optional().describe(\"Approval/rejection comments\"),\r\n  exitCriteriaMet: z.boolean().optional().describe(\"Whether all exit criteria are satisfied\"),\r\n  conditionalApproval: z.boolean().default(false).describe(\"Approval with conditions\"),\r\n  conditions: z.string().optional().describe(\"Conditions for conditional approval\"),\r\n}).strict();\r\n\r\nexport async function processPhaseGate({ env }: Ctx, input: z.infer<typeof processPhaseGateInput>) {\r\n  // Get current milestone\r\n  const { json: milestone } = await opFetch<any>(env, `/api/v3/versions/${input.milestoneId}`);\r\n  \r\n  // Get enterprise metadata\r\n  let enterpriseMetadata: any = {};\r\n  try {\r\n    enterpriseMetadata = JSON.parse(milestone.customField1 || '{}');\r\n  } catch (e) {\r\n    enterpriseMetadata = {};\r\n  }\r\n\r\n  // Validate this is a phase gate\r\n  if (enterpriseMetadata.milestoneType !== 'phase_gate') {\r\n    throw new Error(\"Milestone is not configured as a phase gate\");\r\n  }\r\n\r\n  // Process the gate action\r\n  const approvalRecord = {\r\n    approverId: input.approverId,\r\n    action: input.action,\r\n    timestamp: new Date().toISOString(),\r\n    comments: input.comments,\r\n    exitCriteriaMet: input.exitCriteriaMet,\r\n    conditionalApproval: input.conditionalApproval,\r\n    conditions: input.conditions,\r\n  };\r\n\r\n  // Update milestone status based on action\r\n  let newStatus = milestone.status;\r\n  let statusDescription = \"\";\r\n\r\n  switch (input.action) {\r\n    case 'approve':\r\n      if (input.conditionalApproval) {\r\n        newStatus = 'locked'; // Conditionally approved\r\n        statusDescription = `Phase gate conditionally approved by ${input.approverId}. Conditions: ${input.conditions}`;\r\n      } else {\r\n        newStatus = 'closed'; // Fully approved\r\n        statusDescription = `Phase gate approved by ${input.approverId}`;\r\n      }\r\n      break;\r\n    \r\n    case 'reject':\r\n      newStatus = 'open'; // Keep open for rework\r\n      statusDescription = `Phase gate rejected by ${input.approverId}. Comments: ${input.comments}`;\r\n      break;\r\n      \r\n    case 'request_review':\r\n      newStatus = 'locked'; // Lock for review\r\n      statusDescription = `Phase gate review requested by ${input.approverId}`;\r\n      break;\r\n  }\r\n\r\n  // Store approval record\r\n  if (!enterpriseMetadata.approvalHistory) {\r\n    enterpriseMetadata.approvalHistory = [];\r\n  }\r\n  enterpriseMetadata.approvalHistory.push(approvalRecord);\r\n  enterpriseMetadata.lastApprovalAction = approvalRecord;\r\n\r\n  // Update milestone\r\n  const updatePayload: any = {\r\n    status: newStatus,\r\n    customField1: JSON.stringify(enterpriseMetadata),\r\n  };\r\n\r\n  // Add status description if supported\r\n  if (milestone.description) {\r\n    const existingDescription = milestone.description.raw || \"\";\r\n    updatePayload.description = {\r\n      format: \"markdown\",\r\n      raw: existingDescription + \"\\n\\n---\\n**\" + new Date().toLocaleDateString() + \"**: \" + statusDescription\r\n    };\r\n  }\r\n\r\n  const { json: updated } = await opFetch<any>(env, `/api/v3/versions/${input.milestoneId}`, {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify(updatePayload),\r\n  });\r\n\r\n  return { \r\n    ok: true,\r\n    milestone: updated,\r\n    phaseGateResult: {\r\n      action: input.action,\r\n      approved: input.action === 'approve',\r\n      conditional: input.conditionalApproval,\r\n      newStatus: newStatus,\r\n      approvalRecord: approvalRecord\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Milestone Progress & Analytics\r\n//\r\nexport const getMilestoneProgressInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional().describe(\"Filter by project\"),\r\n  milestoneType: MilestoneTypeSchema.optional().describe(\"Filter by milestone type\"),\r\n  status: MilestoneStatusSchema.optional().describe(\"Filter by status\"),\r\n  criticalPathOnly: z.boolean().default(false).describe(\"Show only critical path milestones\"),\r\n  includeAnalytics: z.boolean().default(true).describe(\"Include progress analytics\"),\r\n  \r\n  // Date filtering\r\n  dueDateFrom: z.string().optional().describe(\"Due date range start\"),\r\n  dueDateTo: z.string().optional().describe(\"Due date range end\"),\r\n  \r\n  // Pagination\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(100).default(25),\r\n}).strict();\r\n\r\nexport async function getMilestoneProgress({ env }: Ctx, input: z.infer<typeof getMilestoneProgressInput>) {\r\n  const filters: any[] = [];\r\n  \r\n  // Basic filters\r\n  if (input.status !== undefined) {\r\n    filters.push({ status: { operator: \"=\", values: [input.status] } });\r\n  }\r\n\r\n  // Date range filters\r\n  if (input.dueDateFrom) {\r\n    filters.push({ endDate: { operator: \">=d\", values: [input.dueDateFrom] } });\r\n  }\r\n  if (input.dueDateTo) {\r\n    filters.push({ endDate: { operator: \"<=d\", values: [input.dueDateTo] } });\r\n  }\r\n\r\n  // Build API path\r\n  const basePath = input.projectId ? `/api/v3/projects/${input.projectId}/versions` : \"/api/v3/versions\";\r\n  \r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n    sortBy: JSON.stringify([['endDate', 'asc'], ['name', 'asc']]),\r\n  };\r\n  \r\n  if (filters.length > 0) {\r\n    params.filters = JSON.stringify(filters);\r\n  }\r\n\r\n  const { json } = await opFetch<any>(env, basePath, { params });\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  \r\n  // Filter and enhance with enterprise data\r\n  const enhancedMilestones = elements\r\n    .map((milestone: any) => {\r\n      // Parse enterprise metadata\r\n      let enterpriseData: any = {};\r\n      try {\r\n        enterpriseData = JSON.parse(milestone.customField1 || '{}');\r\n      } catch (e) {\r\n        enterpriseData = {};\r\n      }\r\n\r\n      return {\r\n        ...milestone,\r\n        enterpriseData,\r\n        milestoneType: enterpriseData.milestoneType || 'deliverable',\r\n        criticalPath: enterpriseData.criticalPath || false,\r\n        approvalRequired: enterpriseData.approvalRequired || false,\r\n        lastApprovalAction: enterpriseData.lastApprovalAction,\r\n      };\r\n    })\r\n    .filter((milestone: any) => {\r\n      // Apply enterprise filters\r\n      if (input.milestoneType && milestone.milestoneType !== input.milestoneType) {return false;}\r\n      if (input.criticalPathOnly && !milestone.criticalPath) {return false;}\r\n      return true;\r\n    });\r\n\r\n  // Calculate analytics\r\n  let analytics = {};\r\n  if (input.includeAnalytics) {\r\n    const today = new Date();\r\n    analytics = {\r\n      totalMilestones: enhancedMilestones.length,\r\n      byStatus: {\r\n        open: enhancedMilestones.filter((m: any) => m.status === 'open').length,\r\n        locked: enhancedMilestones.filter((m: any) => m.status === 'locked').length,\r\n        closed: enhancedMilestones.filter((m: any) => m.status === 'closed').length,\r\n      },\r\n      byType: {\r\n        phase_gate: enhancedMilestones.filter((m: any) => m.milestoneType === 'phase_gate').length,\r\n        deliverable: enhancedMilestones.filter((m: any) => m.milestoneType === 'deliverable').length,\r\n        review_point: enhancedMilestones.filter((m: any) => m.milestoneType === 'review_point').length,\r\n      },\r\n      criticalPathCount: enhancedMilestones.filter((m: any) => m.criticalPath).length,\r\n      overdueCount: enhancedMilestones.filter((m: any) => \r\n        m.endDate && new Date(m.endDate) < today && m.status !== 'closed'\r\n      ).length,\r\n      approvalsPendingCount: enhancedMilestones.filter((m: any) => \r\n        m.approvalRequired && m.status !== 'closed'\r\n      ).length,\r\n    };\r\n  }\r\n\r\n  return { \r\n    milestones: enhancedMilestones,\r\n    analytics: input.includeAnalytics ? analytics : undefined,\r\n    ...meta,\r\n    appliedFilters: filters.length > 0 ? filters : undefined \r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/notifications.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":91,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":91,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3108,3110],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":92,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":92,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3139,3141],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":93,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":93,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3169,3171],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3205,3207],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3250,3252],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4073,4075],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":177,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":177,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5849,5851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":233,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":233,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7780,7782],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":292,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":292,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9479,9481],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":306,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":306,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9840,9842],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10011,10013],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/notifications.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * Enhanced Notifications API Tools\r\n * \r\n * Leverages OpenProject's latest notification capabilities including:\r\n * - Filtering by reason (mentioned, assigned, etc.)\r\n * - Work package reminders (OpenProject 15.2+) \r\n * - Enhanced notification management\r\n */\r\n\r\n// List notifications with enhanced filtering\r\nexport const listNotificationsInput = z.object({\r\n  filters: z.array(z.object({\r\n    reason: z.enum(['mentioned', 'assigned', 'responsible', 'watched', 'created', 'updated']).optional()\r\n      .describe(\"Filter by notification reason\"),\r\n    readIAN: z.boolean().optional()\r\n      .describe(\"Filter by read status in in-app notifications\"),\r\n    workPackage: z.union([z.string(), z.number()]).optional()\r\n      .describe(\"Filter by specific work package ID\"),\r\n    project: z.union([z.string(), z.number()]).optional()\r\n      .describe(\"Filter by project ID\"),\r\n    dateRange: z.object({\r\n      from: z.string().describe(\"Start date (ISO 8601)\"),\r\n      to: z.string().describe(\"End date (ISO 8601)\")\r\n    }).optional().describe(\"Filter by date range\")\r\n  })).optional().describe(\"Advanced filters for notifications\"),\r\n  \r\n  sortBy: z.array(z.tuple([\r\n    z.enum(['id', 'reason', 'createdAt', 'updatedAt']),\r\n    z.enum(['asc', 'desc'])\r\n  ])).default([['createdAt', 'desc']]).describe(\"Sort notifications\"),\r\n  \r\n  pageSize: z.number().int().min(1).max(100).default(20),\r\n  offset: z.number().int().min(0).default(0)\r\n}).strict();\r\n\r\nexport async function listNotifications({ env }: Ctx, input: z.infer<typeof listNotificationsInput>) {\r\n  const params: any = {\r\n    pageSize: input.pageSize,\r\n    offset: input.offset,\r\n    sortBy: JSON.stringify(input.sortBy)\r\n  };\r\n  \r\n  // Build OpenProject API filters\r\n  if (input.filters && input.filters.length > 0) {\r\n    const apiFilters: any[] = [];\r\n    \r\n    input.filters.forEach(filter => {\r\n      if (filter.reason) {\r\n        apiFilters.push({\r\n          reason: { operator: '=', values: [filter.reason] }\r\n        });\r\n      }\r\n      if (filter.readIAN !== undefined) {\r\n        apiFilters.push({\r\n          readIAN: { operator: '=', values: [filter.readIAN.toString()] }\r\n        });\r\n      }\r\n      if (filter.workPackage) {\r\n        apiFilters.push({\r\n          resource: { operator: '=', values: [`/api/v3/work_packages/${filter.workPackage}`] }\r\n        });\r\n      }\r\n      if (filter.project) {\r\n        apiFilters.push({\r\n          project: { operator: '=', values: [filter.project.toString()] }\r\n        });\r\n      }\r\n      if (filter.dateRange) {\r\n        apiFilters.push({\r\n          createdAt: { \r\n            operator: '<>d', \r\n            values: [filter.dateRange.from, filter.dateRange.to] \r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    if (apiFilters.length > 0) {\r\n      params.filters = JSON.stringify(apiFilters);\r\n    }\r\n  }\r\n  \r\n  const { json } = await opFetch<any>(env, \"/api/v3/notifications\", { params });\r\n  \r\n  return {\r\n    notifications: json?._embedded?.elements || [],\r\n    total: json?.total || 0,\r\n    count: json?.count || 0,\r\n    pageSize: json?.pageSize || input.pageSize,\r\n    offset: json?.offset || input.offset,\r\n    _links: json?._links\r\n  };\r\n}\r\n\r\n// Mark notifications as read\r\nexport const markNotificationsReadInput = z.object({\r\n  notificationIds: z.array(z.union([z.string(), z.number()]))\r\n    .describe(\"Array of notification IDs to mark as read\"),\r\n  markAll: z.boolean().default(false)\r\n    .describe(\"Mark all notifications as read (ignores notificationIds if true)\")\r\n}).strict();\r\n\r\nexport async function markNotificationsRead({ env }: Ctx, input: z.infer<typeof markNotificationsReadInput>) {\r\n  if (input.markAll) {\r\n    // Mark all notifications as read\r\n    const { json } = await opFetch<any>(env, \"/api/v3/notifications/read_ian\", {\r\n      method: 'POST'\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      message: \"All notifications marked as read\",\r\n      updatedCount: json?.updatedCount || 0\r\n    };\r\n  } else {\r\n    // Mark specific notifications as read\r\n    const results = [];\r\n    \r\n    for (const notificationId of input.notificationIds) {\r\n      try {\r\n        const { json } = await opFetch<any>(env, `/api/v3/notifications/${notificationId}/read_ian`, {\r\n          method: 'POST'\r\n        });\r\n        \r\n        results.push({\r\n          id: notificationId,\r\n          success: true,\r\n          notification: json\r\n        });\r\n      } catch (error: any) {\r\n        results.push({\r\n          id: notificationId,\r\n          success: false,\r\n          error: error.message\r\n        });\r\n      }\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      results,\r\n      successCount: results.filter(r => r.success).length,\r\n      errorCount: results.filter(r => !r.success).length\r\n    };\r\n  }\r\n}\r\n\r\n// Get notification preferences for current user\r\nexport const getNotificationSettingsInput = z.object({\r\n  userId: z.union([z.string(), z.number()]).optional()\r\n    .describe(\"User ID (defaults to current user)\")\r\n}).strict();\r\n\r\nexport async function getNotificationSettings({ env }: Ctx, input: z.infer<typeof getNotificationSettingsInput>) {\r\n  const userId = input.userId || 'me';\r\n  \r\n  const { json } = await opFetch<any>(env, `/api/v3/users/${userId}`);\r\n  \r\n  // Extract notification-related preferences from user profile\r\n  const notificationSettings = {\r\n    userId: json?.id,\r\n    name: json?.name,\r\n    email: json?.email,\r\n    preferences: {\r\n      // These would be extracted from user preferences/settings\r\n      emailNotifications: true, // Default assumption\r\n      inAppNotifications: true,\r\n      dailyReminders: false,\r\n      weeklyDigest: false\r\n    },\r\n    // Check if user has notification capabilities\r\n    capabilities: json?._links || {}\r\n  };\r\n  \r\n  return notificationSettings;\r\n}\r\n\r\n// Create work package reminders (OpenProject 15.2+)\r\nexport const createReminderInput = z.object({\r\n  workPackageId: z.union([z.string(), z.number()])\r\n    .describe(\"Work package to create reminder for\"),\r\n  reminderDate: z.string()\r\n    .describe(\"Date/time for reminder (ISO 8601)\"),\r\n  note: z.string().optional()\r\n    .describe(\"Optional note for the reminder\"),\r\n  notifyAssignee: z.boolean().default(true)\r\n    .describe(\"Notify the assignee\"),\r\n  notifyResponsible: z.boolean().default(false)\r\n    .describe(\"Notify the responsible person\"),\r\n  notifyWatchers: z.boolean().default(false)\r\n    .describe(\"Notify watchers\")\r\n}).strict();\r\n\r\nexport async function createReminder({ env }: Ctx, input: z.infer<typeof createReminderInput>) {\r\n  // Note: This would use OpenProject's reminder API when available\r\n  // For now, we'll simulate the functionality by creating a comment with reminder\r\n  \r\n  const payload = {\r\n    comment: {\r\n      format: \"markdown\",\r\n      raw: `🔔 **Reminder set for ${input.reminderDate}**\\n\\n${input.note || 'No additional notes'}`\r\n    },\r\n    notify: input.notifyAssignee || input.notifyResponsible || input.notifyWatchers\r\n  };\r\n  \r\n  try {\r\n    // Create a form first to validate\r\n    const { json: form } = await opFetch<any>(\r\n      env, \r\n      `/api/v3/work_packages/${input.workPackageId}/activities/form`,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(payload)\r\n      }\r\n    );\r\n    \r\n    if (form?.validationErrors && Object.keys(form.validationErrors).length > 0) {\r\n      return {\r\n        success: false,\r\n        error: \"Validation failed\",\r\n        validationErrors: form.validationErrors\r\n      };\r\n    }\r\n    \r\n    // Commit the reminder comment\r\n    if (form?._links?.commit) {\r\n      const { json: result } = await opFetch<any>(env, form._links.commit.href, {\r\n        method: form._links.commit.method || 'POST',\r\n        body: JSON.stringify(form.payload)\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        reminder: {\r\n          id: result?.id,\r\n          workPackageId: input.workPackageId,\r\n          reminderDate: input.reminderDate,\r\n          note: input.note,\r\n          createdAt: result?.createdAt,\r\n          activityId: result?.id\r\n        }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: \"Could not create reminder - no commit link available\"\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: error.message\r\n    };\r\n  }\r\n}\r\n\r\n// Get notification statistics and health\r\nexport const getNotificationStatsInput = z.object({\r\n  dateRange: z.object({\r\n    from: z.string().describe(\"Start date (ISO 8601)\"),\r\n    to: z.string().describe(\"End date (ISO 8601)\")\r\n  }).optional().describe(\"Date range for statistics (defaults to last 30 days)\")\r\n}).strict();\r\n\r\nexport async function getNotificationStats({ env }: Ctx, input: z.infer<typeof getNotificationStatsInput>) {\r\n  const defaultDateRange = {\r\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n    to: new Date().toISOString().split('T')[0]\r\n  };\r\n  \r\n  const dateRange = input.dateRange || defaultDateRange;\r\n  \r\n  // Get notifications in date range\r\n  const { json } = await opFetch<any>(env, \"/api/v3/notifications\", {\r\n    params: {\r\n      filters: JSON.stringify([{\r\n        createdAt: { \r\n          operator: '<>d', \r\n          values: [dateRange.from, dateRange.to] \r\n        }\r\n      }]),\r\n      pageSize: 1000 // Get more for statistics\r\n    }\r\n  });\r\n  \r\n  const notifications = json?._embedded?.elements || [];\r\n  \r\n  // Calculate statistics\r\n  const stats = {\r\n    total: notifications.length,\r\n    byReason: {} as Record<string, number>,\r\n    byProject: {} as Record<string, number>,\r\n    readCount: 0,\r\n    unreadCount: 0,\r\n    dateRange\r\n  };\r\n  \r\n  notifications.forEach((notification: any) => {\r\n    // Count by reason\r\n    const reason = notification.reason || 'unknown';\r\n    stats.byReason[reason] = (stats.byReason[reason] || 0) + 1;\r\n    \r\n    // Count by project\r\n    const projectName = notification._links?.project?.title || 'unknown';\r\n    stats.byProject[projectName] = (stats.byProject[projectName] || 0) + 1;\r\n    \r\n    // Count read/unread\r\n    if (notification.readIAN) {\r\n      stats.readCount++;\r\n    } else {\r\n      stats.unreadCount++;\r\n    }\r\n  });\r\n  \r\n  return stats;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/portfolioManagement.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'joinUrl' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":21,"suggestions":[{"fix":{"range":[5897,5974],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":244,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":244,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8052,8054],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":245,"column":88,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":245,"endColumn":90,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8147,8149],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":23,"suggestions":[{"fix":{"range":[8197,8275],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":255,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":255,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8592,8594],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":82,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":84,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8681,8683],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":23,"suggestions":[{"fix":{"range":[8731,8808],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":270,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":270,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9216,9218],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9295,9297],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":272,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":21,"suggestions":[{"fix":{"range":[9401,9458],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":283,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":283,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9653,9655],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":312,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":312,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10493,10495],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":343,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":343,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11545,11547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":344,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":344,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11598,11600],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11918,11920],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":19,"suggestions":[{"fix":{"range":[12738,12818],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":426,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":426,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14625,14627],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":444,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":444,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15226,15228],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":459,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":459,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15819,15821],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":460,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":460,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15865,15867],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":467,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":467,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16077,16079],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":467,"column":91,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":467,"endColumn":93,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16114,16116],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":468,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":468,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16173,16175],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":468,"column":90,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":468,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16211,16213],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16274,16276],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":91,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":93,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16309,16311],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":495,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":495,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17413,17415],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":509,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":509,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17982,17984],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":522,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":522,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18414,18416],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":524,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":524,"endColumn":21,"suggestions":[{"fix":{"range":[18459,18539],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":545,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":545,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19323,19325],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":546,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":546,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19399,19401],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":547,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":547,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19494,19496],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":548,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":548,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19591,19593],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":582,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":582,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20540,20542],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":643,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":645,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[22626,22762],"text":"portfolioBenefits.benefitsByType[key] ??= { planned: 0, realized: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":654,"column":9,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":656,"endColumn":10,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[23059,23195],"text":"portfolioBenefits.benefitsByType[key] ??= { planned: 0, realized: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/portfolioManagement.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, joinUrl } from \"../util/op\";\r\n\r\n// ===== PORTFOLIO MANAGEMENT SCHEMAS =====\r\n\r\n// Portfolio Custom Fields Schema\r\nconst PortfolioCustomFieldsSchema = z.record(z.string(), z.any()).optional();\r\n\r\nconst StrategicObjectiveSchema = z.enum([\r\n  \"revenue_growth\",\r\n  \"cost_reduction\", \r\n  \"market_expansion\",\r\n  \"operational_efficiency\",\r\n  \"digital_transformation\",\r\n  \"customer_experience\",\r\n  \"innovation\",\r\n  \"compliance\",\r\n  \"sustainability\",\r\n  \"risk_mitigation\"\r\n]);\r\n\r\nconst OptimizationGoalSchema = z.enum([\r\n  \"maximize_roi\",\r\n  \"minimize_risk\", \r\n  \"maximize_value\",\r\n  \"minimize_cost\",\r\n  \"maximize_throughput\",\r\n  \"balance_resources\"\r\n]);\r\n\r\n// Portfolio Create Schema\r\nexport const createPortfolioInput = z.object({\r\n  name: z.string().min(1).max(255),\r\n  identifier: z.string().min(1).max(100).regex(/^[a-z0-9\\-_]+$/),\r\n  description: z.string().optional(),\r\n  strategicObjectives: z.array(StrategicObjectiveSchema).optional(),\r\n  budgetTotal: z.number().min(0).optional(),\r\n  portfolioManager: z.union([z.string(), z.number()]).optional(),\r\n  startDate: z.string().optional(),\r\n  endDate: z.string().optional(),\r\n  projectIds: z.array(z.union([z.string(), z.number()])).optional(),\r\n  customFields: PortfolioCustomFieldsSchema,\r\n  active: z.boolean().default(true),\r\n  public: z.boolean().default(false),\r\n  dryRun: z.boolean().default(false)\r\n});\r\n\r\n// Portfolio List Schema\r\nexport const listProjectsPortfolioInput = z.object({\r\n  portfolioId: z.union([z.string(), z.number()]).optional(),\r\n  includeSubprojects: z.boolean().default(true),\r\n  filters: z.record(z.string(), z.any()).optional(),\r\n  sortBy: z.string().optional(),\r\n  pageSize: z.number().min(1).max(1000).default(100),\r\n  offset: z.number().min(0).default(0),\r\n  includeHierarchy: z.boolean().default(true),\r\n  includeCustomFields: z.boolean().default(true),\r\n  includeStatus: z.boolean().default(true),\r\n  includeBudget: z.boolean().default(true)\r\n});\r\n\r\n// Portfolio Resource Balancing Schema\r\nexport const balanceResourcesInput = z.object({\r\n  portfolioId: z.union([z.string(), z.number()]),\r\n  timeHorizon: z.enum([\"1_month\", \"3_months\", \"6_months\", \"12_months\"]).default(\"3_months\"),\r\n  constraints: z.array(z.enum([\"budget\", \"resources\", \"timeline\", \"skills\"])).optional(),\r\n  optimizationGoal: OptimizationGoalSchema.default(\"balance_resources\"),\r\n  includeProjections: z.boolean().default(true),\r\n  identifyOverallocations: z.boolean().default(true),\r\n  suggestRebalancing: z.boolean().default(true),\r\n  resourceTypes: z.array(z.string()).optional()\r\n});\r\n\r\n// Portfolio Health Dashboard Schema\r\nexport const generateHealthDashboardInput = z.object({\r\n  portfolioId: z.union([z.string(), z.number()]),\r\n  reportDate: z.string().optional(),\r\n  includeMetrics: z.array(z.enum([\r\n    \"roi\", \r\n    \"risk_score\", \r\n    \"strategic_alignment\", \r\n    \"resource_utilization\",\r\n    \"budget_variance\",\r\n    \"schedule_variance\", \r\n    \"quality_metrics\",\r\n    \"stakeholder_satisfaction\"\r\n  ])).optional(),\r\n  timeframe: z.enum([\"current\", \"last_month\", \"last_quarter\", \"ytd\"]).default(\"current\"),\r\n  includeTrends: z.boolean().default(true),\r\n  includeForecasts: z.boolean().default(true),\r\n  executiveSummary: z.boolean().default(true)\r\n});\r\n\r\n// Portfolio Benefits Tracking Schema\r\nexport const trackBenefitsInput = z.object({\r\n  portfolioId: z.union([z.string(), z.number()]),\r\n  benefitType: z.enum([\r\n    \"financial\",\r\n    \"operational\", \r\n    \"strategic\",\r\n    \"customer\",\r\n    \"regulatory\",\r\n    \"risk_mitigation\"\r\n  ]).optional(),\r\n  trackingPeriod: z.enum([\"monthly\", \"quarterly\", \"annually\"]).default(\"quarterly\"),\r\n  includeRealization: z.boolean().default(true),\r\n  includeProjctions: z.boolean().default(true),\r\n  compareToBaseline: z.boolean().default(true),\r\n  kpis: z.array(z.string()).optional()\r\n});\r\n\r\n// ===== PORTFOLIO MANAGEMENT FUNCTIONS =====\r\n\r\nexport async function createPortfolio(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof createPortfolioInput>\r\n) {\r\n  // Create portfolio as a parent project with portfolio-specific custom fields\r\n  const portfolioData: any = {\r\n    name: input.name,\r\n    identifier: input.identifier,\r\n    description: input.description,\r\n    active: input.active,\r\n    public: input.public,\r\n    ...((input.customFields || {}) as Record<string, any>),\r\n    // Add portfolio-specific custom fields\r\n    customField1: input.strategicObjectives?.join(\", \"),\r\n    customField2: input.budgetTotal?.toString(),\r\n    customField3: input.portfolioManager?.toString(),\r\n    customField4: input.startDate,\r\n    customField5: input.endDate,\r\n    customField6: \"portfolio\" // Portfolio type marker\r\n  };\r\n\r\n  if (input.dryRun) {\r\n    // Validate via form endpoint\r\n    const { json: formResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects/form\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(portfolioData)\r\n    });\r\n\r\n    return {\r\n      dryRun: true,\r\n      validation: formResponse,\r\n      portfolioData,\r\n      message: \"Portfolio validation successful - ready for creation\"\r\n    };\r\n  }\r\n\r\n  // Create the portfolio project\r\n  const { json: response } = await opFetch<any>(ctx.env, \"/api/v3/projects\", {\r\n    method: \"POST\", \r\n    body: JSON.stringify(portfolioData)\r\n  });\r\n\r\n  // If project IDs provided, update them to have this portfolio as parent\r\n  if (input.projectIds && input.projectIds.length > 0) {\r\n    const childProjects = [];\r\n    for (const projectId of input.projectIds) {\r\n      try {\r\n        const { json: childResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${projectId}`, {\r\n          method: \"PATCH\",\r\n          body: JSON.stringify({\r\n            _links: {\r\n              parent: { href: `/api/v3/projects/${response.id}` }\r\n            }\r\n          })\r\n        });\r\n        childProjects.push(childResponse);\r\n      } catch (error: any) {\r\n        console.warn(`Failed to assign project ${projectId} to portfolio: ${error}`);\r\n      }\r\n    }\r\n\r\n    return {\r\n      portfolio: response,\r\n      childProjects,\r\n      message: `Portfolio created with ${childProjects.length} child projects`,\r\n      strategicObjectives: input.strategicObjectives,\r\n      budgetTotal: input.budgetTotal\r\n    };\r\n  }\r\n\r\n  return {\r\n    portfolio: response,\r\n    message: \"Portfolio project created successfully\",\r\n    strategicObjectives: input.strategicObjectives,\r\n    budgetTotal: input.budgetTotal\r\n  };\r\n}\r\n\r\nexport async function listProjectsPortfolio(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof listProjectsPortfolioInput>\r\n) {\r\n  const queryParams: Record<string, any> = {\r\n    pageSize: input.pageSize,\r\n    offset: input.offset\r\n  };\r\n\r\n  // Add hierarchy filtering if portfolio specified\r\n  if (input.portfolioId) {\r\n    queryParams.filters = JSON.stringify([\r\n      {\r\n        \"ancestor\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.portfolioId.toString()]\r\n        }\r\n      }\r\n    ]);\r\n  }\r\n\r\n  // Add custom sorting\r\n  if (input.sortBy) {\r\n    queryParams.sortBy = JSON.stringify([[input.sortBy, \"asc\"]]);\r\n  }\r\n\r\n  // Add custom filters\r\n  if (input.filters) {\r\n    const existingFilters = queryParams.filters ? JSON.parse(queryParams.filters) : [];\r\n    Object.entries(input.filters).forEach(([key, value]: [string, any]) => {\r\n      existingFilters.push({\r\n        [key]: {\r\n          \"operator\": \"=\", \r\n          \"values\": [value.toString()]\r\n        }\r\n      });\r\n    });\r\n    queryParams.filters = JSON.stringify(existingFilters);\r\n  }\r\n\r\n  const { json: response } = await opFetch<any>(ctx.env, \"/api/v3/projects\", {\r\n    params: queryParams\r\n  });\r\n\r\n  // Enrich with hierarchy information if requested\r\n  if (input.includeHierarchy && response._embedded?.elements) {\r\n    for (const project of response._embedded.elements) {\r\n      // Add portfolio hierarchy context\r\n      if (project._links?.ancestors?.href) {\r\n        try {\r\n          const { json: ancestorsResponse } = await opFetch<any>(ctx.env, project._links.ancestors.href);\r\n          project._embedded = project._embedded || {};\r\n          project._embedded.portfolioAncestors = ancestorsResponse._embedded?.elements || [];\r\n        } catch (error: any) {\r\n          console.warn(`Failed to fetch ancestors for project ${project.id}: ${error}`);\r\n        }\r\n      }\r\n\r\n      // Add child projects if this is a portfolio\r\n      if (input.includeSubprojects && project._links?.children?.href) {\r\n        try {\r\n          const { json: childrenResponse } = await opFetch<any>(ctx.env, project._links.children.href);\r\n          project._embedded = project._embedded || {};\r\n          project._embedded.childProjects = childrenResponse._embedded?.elements || [];\r\n        } catch (error: any) {\r\n          console.warn(`Failed to fetch children for project ${project.id}: ${error}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add budget information if requested\r\n  if (input.includeBudget && response._embedded?.elements) {\r\n    for (const project of response._embedded.elements) {\r\n      try {\r\n        const budgetUrl = `/api/v3/projects/${project.id}/budgets`;\r\n        const { json: budgetResponse } = await opFetch<any>(ctx.env, budgetUrl);\r\n        project._embedded = project._embedded || {};\r\n        project._embedded.budgets = budgetResponse._embedded?.elements || [];\r\n      } catch (error: any) {\r\n        // Budgets might not be available for all projects\r\n        console.info(`No budget data for project ${project.id}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    portfolioProjects: response,\r\n    hierarchyIncluded: input.includeHierarchy,\r\n    budgetIncluded: input.includeBudget,\r\n    totalProjects: response.total || 0,\r\n    pagination: {\r\n      offset: input.offset,\r\n      pageSize: input.pageSize,\r\n      hasMore: response._embedded?.elements?.length === input.pageSize\r\n    }\r\n  };\r\n}\r\n\r\nexport async function balanceResources(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof balanceResourcesInput>\r\n) {\r\n  // Get portfolio and all child projects\r\n  const { json: portfolioResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.portfolioId}`);\r\n  \r\n  // Get all child projects for resource analysis\r\n  const { json: childProjectsResponse } = await opFetch<any>(\r\n    ctx.env, \r\n    `/api/v3/projects?filters=${JSON.stringify([\r\n      {\r\n        \"ancestor\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.portfolioId.toString()]\r\n        }\r\n      }\r\n    ])}`\r\n  );\r\n\r\n  const projects = childProjectsResponse._embedded?.elements || [];\r\n  const resourceAnalysis: any = {\r\n    portfolio: portfolioResponse,\r\n    projects: projects,\r\n    resourceUtilization: {},\r\n    overallocations: [] as any[],\r\n    recommendations: [] as any[],\r\n    constraints: input.constraints || []\r\n  };\r\n\r\n  // Analyze resource allocation across projects\r\n  for (const project of projects) {\r\n    try {\r\n      // Get time entries for resource utilization\r\n      const timeEntriesUrl = `/api/v3/time_entries?filters=${JSON.stringify([\r\n        {\r\n          \"project\": {\r\n            \"operator\": \"=\",\r\n            \"values\": [project.id.toString()]\r\n          }\r\n        }\r\n      ])}`;\r\n      \r\n      const { json: timeEntries } = await opFetch<any>(ctx.env, timeEntriesUrl);\r\n      \r\n      // Get project members for resource capacity\r\n      const membersUrl = `/api/v3/projects/${project.id}/memberships`;\r\n      const { json: members } = await opFetch<any>(ctx.env, membersUrl);\r\n      \r\n      const projectResourceData = {\r\n        project: project,\r\n        timeEntries: timeEntries._embedded?.elements || [],\r\n        members: members._embedded?.elements || [],\r\n        utilization: 0,\r\n        capacity: 0,\r\n        overallocated: false\r\n      };\r\n\r\n      // Calculate utilization metrics\r\n      if (projectResourceData.timeEntries.length > 0) {\r\n        const totalHours = projectResourceData.timeEntries.reduce(\r\n          (sum: number, entry: any) => sum + (entry.hours || 0), \r\n          0\r\n        );\r\n        projectResourceData.utilization = totalHours;\r\n        projectResourceData.capacity = projectResourceData.members.length * 40 * 4; // Assume 40h/week, 4 weeks\r\n        \r\n        if (projectResourceData.utilization > projectResourceData.capacity * 0.9) {\r\n          projectResourceData.overallocated = true;\r\n          resourceAnalysis.overallocations.push({\r\n            projectId: project.id,\r\n            projectName: project.name,\r\n            utilizationRate: (projectResourceData.utilization / projectResourceData.capacity) * 100,\r\n            excessHours: projectResourceData.utilization - projectResourceData.capacity\r\n          });\r\n        }\r\n      }\r\n\r\n      resourceAnalysis.resourceUtilization[project.id] = projectResourceData;\r\n\r\n    } catch (error: any) {\r\n      console.warn(`Failed to analyze resources for project ${project.id}: ${error}`);\r\n    }\r\n  }\r\n\r\n  // Generate rebalancing recommendations if requested\r\n  if (input.suggestRebalancing && resourceAnalysis.overallocations.length > 0) {\r\n    for (const overallocation of resourceAnalysis.overallocations) {\r\n      resourceAnalysis.recommendations.push({\r\n        type: \"resource_rebalancing\",\r\n        projectId: overallocation.projectId,\r\n        issue: `Project overallocated by ${overallocation.excessHours.toFixed(1)} hours`,\r\n        recommendations: [\r\n          \"Consider extending project timeline\",\r\n          \"Add additional resources to the project\",\r\n          \"Reduce project scope to match available capacity\",\r\n          \"Reassign non-critical tasks to other projects\"\r\n        ],\r\n        priority: overallocation.utilizationRate > 120 ? \"high\" : \"medium\"\r\n      });\r\n    }\r\n  }\r\n\r\n  return {\r\n    portfolioResourceAnalysis: resourceAnalysis,\r\n    optimizationGoal: input.optimizationGoal,\r\n    timeHorizon: input.timeHorizon,\r\n    totalProjects: projects.length,\r\n    overallocatedProjects: resourceAnalysis.overallocations.length,\r\n    recommendations: resourceAnalysis.recommendations,\r\n    constraints: input.constraints\r\n  };\r\n}\r\n\r\nexport async function generateHealthDashboard(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof generateHealthDashboardInput>\r\n) {\r\n  // Get portfolio project\r\n  const { json: portfolioResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.portfolioId}`);\r\n  \r\n  // Get all child projects\r\n  const { json: childProjectsResponse } = await opFetch<any>(\r\n    ctx.env,\r\n    `/api/v3/projects?filters=${JSON.stringify([\r\n      {\r\n        \"ancestor\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.portfolioId.toString()]\r\n        }\r\n      }\r\n    ])}`\r\n  );\r\n\r\n  const projects = childProjectsResponse._embedded?.elements || [];\r\n  const dashboard = {\r\n    portfolio: portfolioResponse,\r\n    reportDate: input.reportDate || new Date().toISOString(),\r\n    timeframe: input.timeframe,\r\n    projects: projects,\r\n    metrics: {},\r\n    executiveSummary: {},\r\n    trends: {},\r\n    forecasts: {}\r\n  };\r\n\r\n  // Calculate portfolio health metrics\r\n  const metrics = dashboard.metrics as any;\r\n  \r\n  // Strategic alignment analysis\r\n  if (!input.includeMetrics || input.includeMetrics.includes(\"strategic_alignment\")) {\r\n    const alignedProjects = projects.filter(p => \r\n      p.statusExplanation?.toLowerCase().includes(\"aligned\") || \r\n      p.status?.name?.toLowerCase() === \"on track\"\r\n    ).length;\r\n    \r\n    metrics.strategicAlignment = {\r\n      alignedProjects: alignedProjects,\r\n      totalProjects: projects.length,\r\n      alignmentPercentage: projects.length > 0 ? (alignedProjects / projects.length) * 100 : 0,\r\n      status: alignedProjects / projects.length > 0.8 ? \"good\" : \r\n              alignedProjects / projects.length > 0.6 ? \"warning\" : \"critical\"\r\n    };\r\n  }\r\n\r\n  // Project status distribution\r\n  const statusDistribution = projects.reduce((acc, project) => {\r\n    const status = project.status?.name || \"unknown\";\r\n    acc[status] = (acc[status] || 0) + 1;\r\n    return acc;\r\n  }, {} as Record<string, number>);\r\n\r\n  metrics.projectHealth = {\r\n    statusDistribution,\r\n    totalProjects: projects.length,\r\n    healthyProjects: (statusDistribution[\"on track\"] || 0) + (statusDistribution[\"green\"] || 0),\r\n    atRiskProjects: (statusDistribution[\"at risk\"] || 0) + (statusDistribution[\"yellow\"] || 0),\r\n    criticalProjects: (statusDistribution[\"off track\"] || 0) + (statusDistribution[\"red\"] || 0)\r\n  };\r\n\r\n  // Risk score calculation\r\n  if (!input.includeMetrics || input.includeMetrics.includes(\"risk_score\")) {\r\n    const riskScore = projects.reduce((totalRisk, project) => {\r\n      // Simple risk scoring based on status\r\n      let projectRisk = 0;\r\n      if (project.status?.name?.toLowerCase().includes(\"risk\") || \r\n          project.status?.name?.toLowerCase().includes(\"yellow\")) {\r\n        projectRisk = 5;\r\n      } else if (project.status?.name?.toLowerCase().includes(\"track\") || \r\n                 project.status?.name?.toLowerCase().includes(\"red\")) {\r\n        projectRisk = 8;\r\n      } else {\r\n        projectRisk = 2; // On track projects\r\n      }\r\n      return totalRisk + projectRisk;\r\n    }, 0);\r\n\r\n    metrics.riskScore = {\r\n      portfolioRiskScore: projects.length > 0 ? riskScore / projects.length : 0,\r\n      totalRiskPoints: riskScore,\r\n      riskLevel: riskScore / projects.length < 3 ? \"low\" : \r\n                 riskScore / projects.length < 6 ? \"medium\" : \"high\",\r\n      highRiskProjects: projects.filter(p => \r\n        p.status?.name?.toLowerCase().includes(\"track\") || \r\n        p.status?.name?.toLowerCase().includes(\"red\")\r\n      ).length\r\n    };\r\n  }\r\n\r\n  // Resource utilization (if requested)\r\n  if (!input.includeMetrics || input.includeMetrics.includes(\"resource_utilization\")) {\r\n    let totalMembers = 0;\r\n    let totalTimeEntries = 0;\r\n\r\n    for (const project of projects.slice(0, 5)) { // Limit to avoid too many API calls\r\n      try {\r\n        const { json: membersResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${project.id}/memberships`);\r\n        totalMembers += membersResponse._embedded?.elements?.length || 0;\r\n\r\n        const { json: timeEntriesResponse } = await opFetch<any>(\r\n          ctx.env,\r\n          `/api/v3/time_entries?filters=${JSON.stringify([\r\n            {\r\n              \"project\": {\r\n                \"operator\": \"=\",\r\n                \"values\": [project.id.toString()]\r\n              }\r\n            }\r\n          ])}&pageSize=50`\r\n        );\r\n        totalTimeEntries += timeEntriesResponse._embedded?.elements?.length || 0;\r\n      } catch (error: any) {\r\n        console.warn(`Failed to get resource data for project ${project.id}: ${error}`);\r\n      }\r\n    }\r\n\r\n    metrics.resourceUtilization = {\r\n      totalMembers,\r\n      totalTimeEntries,\r\n      averageTimeEntriesPerMember: totalMembers > 0 ? totalTimeEntries / totalMembers : 0,\r\n      utilizationStatus: totalTimeEntries / totalMembers > 20 ? \"high\" : \r\n                        totalTimeEntries / totalMembers > 10 ? \"medium\" : \"low\"\r\n    };\r\n  }\r\n\r\n  // Generate executive summary\r\n  if (input.executiveSummary) {\r\n    dashboard.executiveSummary = {\r\n      portfolioName: portfolioResponse.name,\r\n      totalProjects: projects.length,\r\n      overallHealth: metrics.projectHealth?.healthyProjects > metrics.projectHealth?.atRiskProjects ? \r\n                     \"healthy\" : \"needs attention\",\r\n      keyHighlights: [\r\n        `${metrics.projectHealth?.healthyProjects || 0} projects on track`,\r\n        `${metrics.projectHealth?.atRiskProjects || 0} projects need attention`,\r\n        `Portfolio risk level: ${metrics.riskScore?.riskLevel || \"unknown\"}`,\r\n        `Resource utilization: ${metrics.resourceUtilization?.utilizationStatus || \"unknown\"}`\r\n      ],\r\n      recommendedActions: generateRecommendations(metrics)\r\n    };\r\n  }\r\n\r\n  return {\r\n    portfolioDashboard: dashboard,\r\n    generatedAt: new Date().toISOString(),\r\n    metricsIncluded: input.includeMetrics || [\"all\"],\r\n    executiveSummary: dashboard.executiveSummary\r\n  };\r\n}\r\n\r\nexport async function trackBenefits(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof trackBenefitsInput>\r\n) {\r\n  // Get portfolio project\r\n  const { json: portfolioResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.portfolioId}`);\r\n  \r\n  // Get all child projects for benefits tracking\r\n  const { json: childProjectsResponse } = await opFetch<any>(\r\n    ctx.env,\r\n    `/api/v3/projects?filters=${JSON.stringify([\r\n      {\r\n        \"ancestor\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.portfolioId.toString()]\r\n        }\r\n      }\r\n    ])}`\r\n  );\r\n\r\n  const projects = childProjectsResponse._embedded?.elements || [];\r\n  const benefitsTracking = {\r\n    portfolio: portfolioResponse,\r\n    trackingPeriod: input.trackingPeriod,\r\n    benefitType: input.benefitType,\r\n    projects: projects,\r\n    benefitsRealization: {},\r\n    kpiTracking: {},\r\n    projections: {},\r\n    baselineComparison: {}\r\n  };\r\n\r\n  // Track benefits across projects\r\n  for (const project of projects) {\r\n    const projectBenefits = {\r\n      projectId: project.id,\r\n      projectName: project.name,\r\n      plannedBenefits: {},\r\n      realizedBenefits: {},\r\n      realizationPercentage: 0,\r\n      status: \"tracking\"\r\n    };\r\n\r\n    // Extract benefits from custom fields (assuming benefits are tracked in custom fields)\r\n    if (project.customFields) {\r\n      Object.entries(project.customFields).forEach(([key, value]: [string, any]) => {\r\n        if (key.toLowerCase().includes(\"benefit\")) {\r\n          projectBenefits.plannedBenefits[key] = value;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Calculate realization based on project completion and status\r\n    if (project.percentDone) {\r\n      projectBenefits.realizationPercentage = project.percentDone;\r\n      \r\n      Object.keys(projectBenefits.plannedBenefits).forEach((benefitKey: string) => {\r\n        const plannedValue = projectBenefits.plannedBenefits[benefitKey];\r\n        if (typeof plannedValue === \"number\") {\r\n          projectBenefits.realizedBenefits[benefitKey] = \r\n            (plannedValue * projectBenefits.realizationPercentage) / 100;\r\n        }\r\n      });\r\n    }\r\n\r\n    benefitsTracking.benefitsRealization[project.id] = projectBenefits;\r\n  }\r\n\r\n  // Generate portfolio-level benefits summary\r\n  const portfolioBenefits = {\r\n    totalPlannedValue: 0,\r\n    totalRealizedValue: 0,\r\n    realizationRate: 0,\r\n    benefitsByType: {} as Record<string, any>\r\n  };\r\n\r\n  Object.values(benefitsTracking.benefitsRealization).forEach((projectBenefits: any) => {\r\n    Object.entries(projectBenefits.realizedBenefits).forEach(([key, value]: [string, any]) => {\r\n      if (typeof value === \"number\") {\r\n        portfolioBenefits.totalRealizedValue += value;\r\n        \r\n        if (!portfolioBenefits.benefitsByType[key]) {\r\n          portfolioBenefits.benefitsByType[key] = { planned: 0, realized: 0 };\r\n        }\r\n        portfolioBenefits.benefitsByType[key].realized += value;\r\n      }\r\n    });\r\n\r\n    Object.entries(projectBenefits.plannedBenefits).forEach(([key, value]: [string, any]) => {\r\n      if (typeof value === \"number\") {\r\n        portfolioBenefits.totalPlannedValue += value;\r\n        \r\n        if (!portfolioBenefits.benefitsByType[key]) {\r\n          portfolioBenefits.benefitsByType[key] = { planned: 0, realized: 0 };\r\n        }\r\n        portfolioBenefits.benefitsByType[key].planned += value;\r\n      }\r\n    });\r\n  });\r\n\r\n  portfolioBenefits.realizationRate = portfolioBenefits.totalPlannedValue > 0 ? \r\n    (portfolioBenefits.totalRealizedValue / portfolioBenefits.totalPlannedValue) * 100 : 0;\r\n\r\n  // Generate projections if requested\r\n  if (input.includeProjctions) {\r\n    benefitsTracking.projections = {\r\n      projectedRealization: portfolioBenefits.realizationRate,\r\n      estimatedCompletionValue: portfolioBenefits.totalPlannedValue,\r\n      projectionConfidence: portfolioBenefits.realizationRate > 80 ? \"high\" : \r\n                           portfolioBenefits.realizationRate > 60 ? \"medium\" : \"low\",\r\n      riskFactors: portfolioBenefits.realizationRate < 70 ? [\r\n        \"Below target realization rate\",\r\n        \"May require intervention to achieve planned benefits\"\r\n      ] : []\r\n    };\r\n  }\r\n\r\n  return {\r\n    benefitsTracking: benefitsTracking,\r\n    portfolioBenefits: portfolioBenefits,\r\n    trackingPeriod: input.trackingPeriod,\r\n    totalProjects: projects.length,\r\n    realizationSummary: {\r\n      onTrack: Object.values(benefitsTracking.benefitsRealization).filter(\r\n        (b: any) => b.realizationPercentage >= 80\r\n      ).length,\r\n      needsAttention: Object.values(benefitsTracking.benefitsRealization).filter(\r\n        (b: any) => b.realizationPercentage < 60\r\n      ).length\r\n    }\r\n  };\r\n}\r\n\r\n// Helper function for generating recommendations\r\nfunction generateRecommendations(metrics: any): string[] {\r\n  const recommendations = [];\r\n  \r\n  if (metrics.riskScore?.riskLevel === \"high\") {\r\n    recommendations.push(\"Focus on risk mitigation for high-risk projects\");\r\n  }\r\n  \r\n  if (metrics.projectHealth?.atRiskProjects > metrics.projectHealth?.healthyProjects) {\r\n    recommendations.push(\"Implement additional project support for at-risk initiatives\");\r\n  }\r\n  \r\n  if (metrics.resourceUtilization?.utilizationStatus === \"high\") {\r\n    recommendations.push(\"Consider resource rebalancing across portfolio\");\r\n  }\r\n  \r\n  if (metrics.strategicAlignment?.alignmentPercentage < 70) {\r\n    recommendations.push(\"Review strategic alignment of portfolio projects\");\r\n  }\r\n  \r\n  return recommendations;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/predictiveAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'joinUrl' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4146,4148],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":125,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":125,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4470,4472],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":17,"suggestions":[{"fix":{"range":[4508,4567],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5067,5069],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":17,"suggestions":[{"fix":{"range":[5105,5158],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":232,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":232,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7569,7571],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":297,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":297,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9453,9455],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":315,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":315,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9957,9959],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":17,"suggestions":[{"fix":{"range":[9995,10065],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":391,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":391,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12259,12261],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":399,"column":89,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":399,"endColumn":91,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12599,12601],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":410,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":410,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13018,13129],"text":"(activity.comment?.toLowerCase().includes(\"changed\") ??\r\n    activity.comment?.toLowerCase().includes(\"updated\"))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":411,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":411,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13130,13132],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":456,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":456,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":493,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":514,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":514,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'workPackages' is defined but never used. Allowed unused args must match /^_/u.","line":561,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":603,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":603,"endColumn":77},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":638,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":638,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21160,21162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":640,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":640,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21295,21297],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":641,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":641,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21343,21345],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":644,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":644,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21453,21455],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeframe' is defined but never used. Allowed unused args must match /^_/u.","line":649,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":649,"endColumn":93},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":759,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":759,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[25577,25579],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":762,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":762,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[25757,25759],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":768,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":768,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26089,26091],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":771,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":771,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26234,26236],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":772,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":772,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26326,26328],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectType' is defined but never used. Allowed unused args must match /^_/u.","line":778,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":778,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'industry' is defined but never used. Allowed unused args must match /^_/u.","line":778,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":778,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'env' is defined but never used. Allowed unused args must match /^_/u.","line":778,"column":91,"nodeType":null,"messageId":"unusedVar","endLine":778,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'includeMetrics' is defined but never used. Allowed unused args must match /^_/u.","line":799,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":799,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'confidence' is defined but never used. Allowed unused args must match /^_/u.","line":799,"column":104,"nodeType":null,"messageId":"unusedVar","endLine":799,"endColumn":114},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'benchmarkData' is defined but never used. Allowed unused args must match /^_/u.","line":819,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":819,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'workPackages' is defined but never used. Allowed unused args must match /^_/u.","line":819,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":819,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentMetrics' is defined but never used. Allowed unused args must match /^_/u.","line":834,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":834,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'benchmarkData' is defined but never used. Allowed unused args must match /^_/u.","line":834,"column":80,"nodeType":null,"messageId":"unusedVar","endLine":834,"endColumn":93},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":935,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":935,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[32638,32640],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":942,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":942,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[32915,32917],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/predictiveAnalytics.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, joinUrl } from \"../util/op\";\r\n\r\n// ===== PREDICTIVE ANALYTICS SCHEMAS =====\r\n\r\nconst PredictionModelSchema = z.enum([\r\n  \"ensemble_ml\",        // Combined multiple models\r\n  \"decision_tree\",      // Decision tree analysis\r\n  \"logistic_regression\", // Probability-based prediction\r\n  \"pattern_matching\",   // Historical pattern analysis\r\n  \"risk_weighted\",      // Risk-adjusted prediction\r\n  \"simple_heuristic\"    // Rule-based simple model\r\n]);\r\n\r\nconst ProjectSuccessFactorSchema = z.enum([\r\n  \"team_experience\",\r\n  \"scope_stability\",\r\n  \"stakeholder_engagement\",\r\n  \"budget_adequacy\", \r\n  \"timeline_realism\",\r\n  \"technical_complexity\",\r\n  \"change_frequency\",\r\n  \"resource_availability\",\r\n  \"external_dependencies\",\r\n  \"executive_support\"\r\n]);\r\n\r\nconst OptimizationGoalSchema = z.enum([\r\n  \"schedule_recovery\",\r\n  \"cost_optimization\",\r\n  \"quality_improvement\",\r\n  \"risk_mitigation\", \r\n  \"resource_efficiency\",\r\n  \"stakeholder_satisfaction\"\r\n]);\r\n\r\nconst BenchmarkTypeSchema = z.enum([\r\n  \"industry_average\",\r\n  \"organizational_history\",\r\n  \"peer_projects\",\r\n  \"best_practices\",\r\n  \"similar_projects\"\r\n]);\r\n\r\n// Predict Project Success Schema\r\nexport const predictProjectSuccessInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  predictionModel: PredictionModelSchema.default(\"ensemble_ml\"),\r\n  factors: z.array(ProjectSuccessFactorSchema).optional(),\r\n  includeConfidenceInterval: z.boolean().default(true),\r\n  predictionHorizon: z.enum([\"1_month\", \"3_months\", \"6_months\", \"project_completion\"]).default(\"project_completion\"),\r\n  includeRiskFactors: z.boolean().default(true),\r\n  includeRecommendations: z.boolean().default(true),\r\n  historicalDataPeriod: z.enum([\"6_months\", \"12_months\", \"24_months\", \"all_time\"]).default(\"12_months\"),\r\n  similarProjectsThreshold: z.number().min(0).max(1).default(0.7)\r\n});\r\n\r\n// Recommend Actions Schema\r\nexport const recommendActionsInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  currentHealth: z.enum([\"green\", \"amber\", \"red\", \"unknown\"]),\r\n  optimizationGoal: OptimizationGoalSchema.default(\"schedule_recovery\"),\r\n  priorityLevel: z.enum([\"low\", \"medium\", \"high\", \"critical\"]).default(\"medium\"),\r\n  availableResources: z.array(z.string()).optional(),\r\n  constraintFactors: z.array(z.string()).optional(),\r\n  timeframe: z.enum([\"immediate\", \"short_term\", \"medium_term\", \"long_term\"]).default(\"short_term\"),\r\n  includeAlternatives: z.boolean().default(true),\r\n  maxRecommendations: z.number().min(1).max(20).default(5)\r\n});\r\n\r\n// Benchmark Performance Schema\r\nexport const benchmarkPerformanceInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  benchmarkAgainst: BenchmarkTypeSchema.default(\"organizational_history\"),\r\n  projectType: z.string().optional(),\r\n  organizationSize: z.enum([\"small\", \"medium\", \"large\", \"enterprise\"]).optional(),\r\n  industry: z.string().optional(),\r\n  includeMetrics: z.array(z.enum([\r\n    \"schedule_performance\",\r\n    \"budget_performance\", \r\n    \"quality_metrics\",\r\n    \"resource_utilization\",\r\n    \"stakeholder_satisfaction\",\r\n    \"delivery_success_rate\",\r\n    \"change_request_rate\",\r\n    \"defect_rate\"\r\n  ])).optional(),\r\n  confidenceLevel: z.number().min(80).max(99).default(95),\r\n  includeProjections: z.boolean().default(true),\r\n  detailedAnalysis: z.boolean().default(false)\r\n});\r\n\r\n// ===== PREDICTIVE ANALYTICS FUNCTIONS =====\r\n\r\nexport async function predictProjectSuccess(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof predictProjectSuccessInput>\r\n) {\r\n  // Get project details\r\n  const { json: projectResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.projectId}`);\r\n  \r\n  // Get work packages for analysis\r\n  const { json: workPackagesResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", {\r\n    params: {\r\n      filters: JSON.stringify([\r\n        {\r\n          \"project\": {\r\n            \"operator\": \"=\",\r\n            \"values\": [input.projectId.toString()]\r\n          }\r\n        }\r\n      ]),\r\n      pageSize: 100\r\n    }\r\n  });\r\n\r\n  const workPackages = workPackagesResponse._embedded?.elements || [];\r\n\r\n  // Get project activities for trend analysis\r\n  let activities = [];\r\n  try {\r\n    const activitiesUrl = `/api/v3/projects/${input.projectId}/activities`;\r\n    const { json: activitiesResponse } = await opFetch<any>(ctx.env, activitiesUrl);\r\n    activities = activitiesResponse._embedded?.elements?.slice(0, 50) || [];\r\n  } catch (error: any) {\r\n    console.warn(\"Could not fetch project activities:\", error);\r\n  }\r\n\r\n  // Get time entries for effort analysis\r\n  let timeEntries = [];\r\n  try {\r\n    const { json: timeEntriesResponse } = await opFetch<any>(ctx.env, \"/api/v3/time_entries\", {\r\n      params: {\r\n        filters: JSON.stringify([\r\n          {\r\n            \"project\": {\r\n              \"operator\": \"=\",\r\n              \"values\": [input.projectId.toString()]\r\n            }\r\n          }\r\n        ]),\r\n        pageSize: 100\r\n      }\r\n    });\r\n    timeEntries = timeEntriesResponse._embedded?.elements || [];\r\n  } catch (error: any) {\r\n    console.warn(\"Could not fetch time entries:\", error);\r\n  }\r\n\r\n  // Extract project metrics for prediction\r\n  const projectMetrics = analyzeProjectMetrics(\r\n    projectResponse, \r\n    workPackages, \r\n    activities, \r\n    timeEntries\r\n  );\r\n\r\n  // Apply prediction model\r\n  let predictionResult;\r\n  switch (input.predictionModel) {\r\n    case \"ensemble_ml\":\r\n      predictionResult = applyEnsembleModel(projectMetrics, input);\r\n      break;\r\n    case \"decision_tree\":\r\n      predictionResult = applyDecisionTreeModel(projectMetrics, input);\r\n      break;\r\n    case \"pattern_matching\":\r\n      predictionResult = applyPatternMatchingModel(projectMetrics, input);\r\n      break;\r\n    default:\r\n      predictionResult = applyHeuristicModel(projectMetrics, input);\r\n  }\r\n\r\n  // Generate confidence intervals if requested\r\n  if (input.includeConfidenceInterval) {\r\n    predictionResult.confidenceInterval = generateConfidenceInterval(\r\n      predictionResult.successProbability,\r\n      projectMetrics\r\n    );\r\n  }\r\n\r\n  // Identify risk factors if requested\r\n  if (input.includeRiskFactors) {\r\n    predictionResult.riskFactors = identifyRiskFactors(projectMetrics, workPackages);\r\n  }\r\n\r\n  // Generate recommendations if requested\r\n  if (input.includeRecommendations) {\r\n    predictionResult.recommendations = generateSuccessRecommendations(\r\n      projectMetrics,\r\n      predictionResult,\r\n      input\r\n    );\r\n  }\r\n\r\n  return {\r\n    projectSuccessPrediction: predictionResult,\r\n    projectMetrics: projectMetrics,\r\n    predictionModel: input.predictionModel,\r\n    predictionDate: new Date().toISOString(),\r\n    dataPointsAnalyzed: {\r\n      workPackages: workPackages.length,\r\n      activities: activities.length,\r\n      timeEntries: timeEntries.length\r\n    }\r\n  };\r\n}\r\n\r\nexport async function recommendActions(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof recommendActionsInput>\r\n) {\r\n  // Get project details\r\n  const { json: projectResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.projectId}`);\r\n  \r\n  // Get work packages for current status analysis\r\n  const { json: workPackagesResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", {\r\n    params: {\r\n      filters: JSON.stringify([\r\n        {\r\n          \"project\": {\r\n            \"operator\": \"=\",\r\n            \"values\": [input.projectId.toString()]\r\n          }\r\n        }\r\n      ]),\r\n      pageSize: 100\r\n    }\r\n  });\r\n\r\n  const workPackages = workPackagesResponse._embedded?.elements || [];\r\n\r\n  // Analyze current project state\r\n  const currentState = analyzeProjectCurrentState(\r\n    projectResponse,\r\n    workPackages,\r\n    input.currentHealth\r\n  );\r\n\r\n  // Generate action recommendations based on optimization goal and current state\r\n  const recommendations = generateActionRecommendations(\r\n    currentState,\r\n    input.optimizationGoal,\r\n    input.priorityLevel,\r\n    input.timeframe\r\n  );\r\n\r\n  // Filter and rank recommendations\r\n  const rankedRecommendations = recommendations\r\n    .sort((a, b) => b.impact - a.impact)\r\n    .slice(0, input.maxRecommendations);\r\n\r\n  // Generate alternatives if requested\r\n  let alternatives = [];\r\n  if (input.includeAlternatives) {\r\n    alternatives = generateAlternativeActions(\r\n      currentState,\r\n      rankedRecommendations,\r\n      input.constraintFactors || []\r\n    );\r\n  }\r\n\r\n  return {\r\n    actionRecommendations: rankedRecommendations,\r\n    alternatives: alternatives,\r\n    currentProjectState: currentState,\r\n    optimizationGoal: input.optimizationGoal,\r\n    priorityLevel: input.priorityLevel,\r\n    analysisDate: new Date().toISOString(),\r\n    recommendationCount: rankedRecommendations.length\r\n  };\r\n}\r\n\r\nexport async function benchmarkPerformance(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof benchmarkPerformanceInput>\r\n) {\r\n  // Get project details\r\n  const { json: projectResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.projectId}`);\r\n  \r\n  // Get work packages for performance analysis\r\n  const { json: workPackagesResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", {\r\n    params: {\r\n      filters: JSON.stringify([\r\n        {\r\n          \"project\": {\r\n            \"operator\": \"=\",\r\n            \"values\": [input.projectId.toString()]\r\n          }\r\n        }\r\n      ]),\r\n      pageSize: 200\r\n    }\r\n  });\r\n\r\n  const workPackages = workPackagesResponse._embedded?.elements || [];\r\n\r\n  // Get time entries for efficiency metrics\r\n  let timeEntries = [];\r\n  try {\r\n    const { json: timeEntriesResponse } = await opFetch<any>(ctx.env, \"/api/v3/time_entries\", {\r\n      params: {\r\n        filters: JSON.stringify([\r\n          {\r\n            \"project\": {\r\n              \"operator\": \"=\",\r\n              \"values\": [input.projectId.toString()]\r\n            }\r\n          }\r\n        ]),\r\n        pageSize: 200\r\n      }\r\n    });\r\n    timeEntries = timeEntriesResponse._embedded?.elements || [];\r\n  } catch (error: any) {\r\n    console.warn(\"Could not fetch time entries for benchmarking:\", error);\r\n  }\r\n\r\n  // Calculate current project performance metrics\r\n  const currentMetrics = calculatePerformanceMetrics(\r\n    projectResponse,\r\n    workPackages,\r\n    timeEntries\r\n  );\r\n\r\n  // Get benchmark data based on benchmark type\r\n  const benchmarkData = await getBenchmarkData(\r\n    input.benchmarkAgainst,\r\n    input.projectType,\r\n    input.industry,\r\n    ctx.env\r\n  );\r\n\r\n  // Perform comparison analysis\r\n  const benchmarkAnalysis = performBenchmarkComparison(\r\n    currentMetrics,\r\n    benchmarkData,\r\n    input.includeMetrics || [],\r\n    input.confidenceLevel\r\n  );\r\n\r\n  // Generate projections if requested\r\n  let projections = {};\r\n  if (input.includeProjections) {\r\n    projections = generatePerformanceProjections(\r\n      currentMetrics,\r\n      benchmarkData,\r\n      workPackages\r\n    );\r\n  }\r\n\r\n  // Detailed analysis if requested\r\n  let detailedInsights = {};\r\n  if (input.detailedAnalysis) {\r\n    detailedInsights = generateDetailedBenchmarkInsights(\r\n      benchmarkAnalysis,\r\n      currentMetrics,\r\n      benchmarkData\r\n    );\r\n  }\r\n\r\n  return {\r\n    benchmarkAnalysis: benchmarkAnalysis,\r\n    currentProjectMetrics: currentMetrics,\r\n    benchmarkData: benchmarkData,\r\n    projections: projections,\r\n    detailedInsights: detailedInsights,\r\n    benchmarkType: input.benchmarkAgainst,\r\n    confidenceLevel: input.confidenceLevel,\r\n    analysisDate: new Date().toISOString()\r\n  };\r\n}\r\n\r\n// ===== HELPER FUNCTIONS =====\r\n\r\nfunction analyzeProjectMetrics(project: any, workPackages: any[], activities: any[], timeEntries: any[]): any {\r\n  const now = new Date();\r\n  const projectCreated = new Date(project.createdAt);\r\n  const projectAge = Math.max(1, Math.floor((now.getTime() - projectCreated.getTime()) / (1000 * 60 * 60 * 24)));\r\n\r\n  // Work package analysis\r\n  const totalWPs = workPackages.length;\r\n  const completedWPs = workPackages.filter(wp => \r\n    wp.percentDone === 100 || wp.status?.name?.toLowerCase().includes(\"closed\")\r\n  ).length;\r\n  const overdueWPs = workPackages.filter(wp => \r\n    wp.dueDate && new Date(wp.dueDate) < now && wp.percentDone < 100\r\n  ).length;\r\n  const avgPercentDone = totalWPs > 0 ? \r\n    workPackages.reduce((sum, wp) => sum + (wp.percentDone || 0), 0) / totalWPs : 0;\r\n\r\n  // Activity analysis\r\n  const recentActivityCount = activities.filter((activity: any) => \r\n    new Date(activity.createdAt) > new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\r\n  ).length;\r\n\r\n  // Time tracking analysis\r\n  const totalHours = timeEntries.reduce((sum: number, entry: any) => sum + (entry.hours || 0), 0);\r\n  const avgHoursPerDay = projectAge > 0 ? totalHours / projectAge : 0;\r\n\r\n  // Team analysis\r\n  const uniqueUsers = new Set([\r\n    ...workPackages.map((wp: any) => wp._links?.assignee?.href).filter(Boolean),\r\n    ...timeEntries.map((entry: any) => entry._links?.user?.href).filter(Boolean)\r\n  ]).size;\r\n\r\n  // Change frequency analysis\r\n  const changeActivities = activities.filter((activity: any) => \r\n    activity.comment?.toLowerCase().includes(\"changed\") ||\r\n    activity.comment?.toLowerCase().includes(\"updated\") ||\r\n    activity.details?.some((detail: any) => detail.format === \"diff\")\r\n  ).length;\r\n\r\n  return {\r\n    projectAge: projectAge,\r\n    totalWorkPackages: totalWPs,\r\n    completionRate: totalWPs > 0 ? (completedWPs / totalWPs) * 100 : 0,\r\n    overdueRate: totalWPs > 0 ? (overdueWPs / totalWPs) * 100 : 0,\r\n    averageProgress: avgPercentDone,\r\n    activityLevel: recentActivityCount / 7, // Activities per day\r\n    totalEffort: totalHours,\r\n    effortRate: avgHoursPerDay,\r\n    teamSize: uniqueUsers,\r\n    changeFrequency: changeActivities / Math.max(1, projectAge / 7), // Changes per week\r\n    healthIndicators: {\r\n      scope_stability: changeActivities < projectAge * 0.1,\r\n      team_engagement: recentActivityCount > 0,\r\n      progress_momentum: avgPercentDone > 0,\r\n      timeline_adherence: (totalWPs > 0 ? (overdueWPs / totalWPs) * 100 : 0) < 20\r\n    }\r\n  };\r\n}\r\n\r\nfunction applyEnsembleModel(metrics: any, input: any): any {\r\n  // Combine multiple prediction approaches\r\n  const heuristicScore = applyHeuristicModel(metrics, input).successProbability;\r\n  const patternScore = applyPatternMatchingModel(metrics, input).successProbability;\r\n  const decisionScore = applyDecisionTreeModel(metrics, input).successProbability;\r\n  \r\n  // Weighted average with higher weight on more reliable methods\r\n  const ensembleScore = (heuristicScore * 0.4 + patternScore * 0.3 + decisionScore * 0.3);\r\n  \r\n  return {\r\n    successProbability: Math.max(0, Math.min(100, ensembleScore)),\r\n    modelComponents: {\r\n      heuristic: heuristicScore,\r\n      pattern: patternScore,\r\n      decision: decisionScore\r\n    },\r\n    confidence: calculateModelConfidence(metrics),\r\n    predictionFactors: extractPredictionFactors(metrics)\r\n  };\r\n}\r\n\r\nfunction applyDecisionTreeModel(metrics: any, input: any): any {\r\n  let score = 70; // Base score\r\n  \r\n  // Decision tree logic\r\n  if (metrics.completionRate > 80) {\r\n    score += 20;\r\n  } else if (metrics.completionRate > 50) {\r\n    score += 10;\r\n  } else if (metrics.completionRate < 20) {\r\n    score -= 20;\r\n  }\r\n  \r\n  if (metrics.overdueRate < 10) {\r\n    score += 15;\r\n  } else if (metrics.overdueRate > 30) {\r\n    score -= 25;\r\n  }\r\n  \r\n  if (metrics.healthIndicators.scope_stability) {\r\n    score += 10;\r\n  } else {\r\n    score -= 15;\r\n  }\r\n  \r\n  if (metrics.teamSize >= 3 && metrics.teamSize <= 8) {\r\n    score += 5;\r\n  } else if (metrics.teamSize > 12) {\r\n    score -= 10;\r\n  }\r\n  \r\n  return {\r\n    successProbability: Math.max(0, Math.min(100, score)),\r\n    decisionPath: generateDecisionPath(metrics),\r\n    keyFactors: identifyKeyDecisionFactors(metrics)\r\n  };\r\n}\r\n\r\nfunction applyPatternMatchingModel(metrics: any, input: any): any {\r\n  // Pattern matching based on historical project patterns\r\n  const patterns = [\r\n    { pattern: \"high_completion_low_overdue\", match: metrics.completionRate > 70 && metrics.overdueRate < 15, score: 85 },\r\n    { pattern: \"steady_progress\", match: metrics.averageProgress > 60 && metrics.activityLevel > 1, score: 80 },\r\n    { pattern: \"good_team_size\", match: metrics.teamSize >= 3 && metrics.teamSize <= 10, score: 75 },\r\n    { pattern: \"low_change_frequency\", match: metrics.changeFrequency < 2, score: 70 },\r\n    { pattern: \"high_activity\", match: metrics.activityLevel > 3, score: 78 }\r\n  ];\r\n  \r\n  const matchedPatterns = patterns.filter(p => p.match);\r\n  const patternScore = matchedPatterns.length > 0 ? \r\n    matchedPatterns.reduce((sum, p) => sum + p.score, 0) / matchedPatterns.length : 50;\r\n  \r\n  return {\r\n    successProbability: Math.max(0, Math.min(100, patternScore)),\r\n    matchedPatterns: matchedPatterns.map(p => p.pattern),\r\n    patternStrength: matchedPatterns.length / patterns.length\r\n  };\r\n}\r\n\r\nfunction applyHeuristicModel(metrics: any, input: any): any {\r\n  // Simple rule-based heuristic model\r\n  let score = 50; // Neutral starting point\r\n  \r\n  // Completion rate factor (30% weight)\r\n  score += (metrics.completionRate - 50) * 0.6;\r\n  \r\n  // Overdue rate factor (20% weight)  \r\n  score -= metrics.overdueRate * 0.4;\r\n  \r\n  // Activity level factor (15% weight)\r\n  if (metrics.activityLevel > 2) {score += 10;}\r\n  else if (metrics.activityLevel < 0.5) {score -= 15;}\r\n  \r\n  // Team size factor (15% weight)\r\n  if (metrics.teamSize >= 3 && metrics.teamSize <= 8) {score += 8;}\r\n  else if (metrics.teamSize > 15) {score -= 12;}\r\n  \r\n  // Health indicators (20% weight)\r\n  const healthScore = Object.values(metrics.healthIndicators).filter(Boolean).length * 5;\r\n  score += healthScore;\r\n  \r\n  return {\r\n    successProbability: Math.max(0, Math.min(100, score)),\r\n    heuristicFactors: {\r\n      completionContribution: (metrics.completionRate - 50) * 0.6,\r\n      overdueContribution: -metrics.overdueRate * 0.4,\r\n      activityContribution: metrics.activityLevel > 2 ? 10 : (metrics.activityLevel < 0.5 ? -15 : 0),\r\n      teamContribution: metrics.teamSize >= 3 && metrics.teamSize <= 8 ? 8 : (metrics.teamSize > 15 ? -12 : 0),\r\n      healthContribution: healthScore\r\n    }\r\n  };\r\n}\r\n\r\nfunction generateConfidenceInterval(probability: number, metrics: any): any {\r\n  // Calculate confidence interval based on data quality and quantity\r\n  const dataQuality = calculateDataQuality(metrics);\r\n  const marginOfError = (1 - dataQuality) * 15; // Up to 15% margin based on data quality\r\n  \r\n  return {\r\n    lower: Math.max(0, probability - marginOfError),\r\n    upper: Math.min(100, probability + marginOfError),\r\n    marginOfError: marginOfError,\r\n    confidence: dataQuality * 100\r\n  };\r\n}\r\n\r\nfunction identifyRiskFactors(metrics: any, workPackages: any[]): any[] {\r\n  const riskFactors = [];\r\n  \r\n  if (metrics.overdueRate > 25) {\r\n    riskFactors.push({\r\n      factor: \"high_overdue_rate\",\r\n      severity: \"high\",\r\n      impact: \"Schedule delays likely\",\r\n      recommendation: \"Review timeline and resource allocation\"\r\n    });\r\n  }\r\n  \r\n  if (metrics.changeFrequency > 3) {\r\n    riskFactors.push({\r\n      factor: \"scope_instability\", \r\n      severity: \"medium\",\r\n      impact: \"Requirements volatility\",\r\n      recommendation: \"Implement change control process\"\r\n    });\r\n  }\r\n  \r\n  if (metrics.teamSize > 15) {\r\n    riskFactors.push({\r\n      factor: \"large_team_coordination\",\r\n      severity: \"medium\", \r\n      impact: \"Communication and coordination challenges\",\r\n      recommendation: \"Consider team structure optimization\"\r\n    });\r\n  }\r\n  \r\n  if (metrics.activityLevel < 0.5) {\r\n    riskFactors.push({\r\n      factor: \"low_engagement\",\r\n      severity: \"high\",\r\n      impact: \"Project momentum at risk\",\r\n      recommendation: \"Investigate team engagement and remove blockers\"\r\n    });\r\n  }\r\n  \r\n  return riskFactors;\r\n}\r\n\r\nfunction generateSuccessRecommendations(metrics: any, prediction: any, input: any): string[] {\r\n  const recommendations = [];\r\n  \r\n  if (prediction.successProbability < 60) {\r\n    recommendations.push(\"Project success probability is below acceptable threshold - implement immediate interventions\");\r\n  }\r\n  \r\n  if (metrics.overdueRate > 20) {\r\n    recommendations.push(\"High overdue rate - review and adjust timeline or add resources\");\r\n  }\r\n  \r\n  if (metrics.changeFrequency > 2) {\r\n    recommendations.push(\"Implement stricter change control to reduce scope volatility\");\r\n  }\r\n  \r\n  if (metrics.activityLevel < 1) {\r\n    recommendations.push(\"Increase project activity and stakeholder engagement\");\r\n  }\r\n  \r\n  if (metrics.teamSize < 3) {\r\n    recommendations.push(\"Consider adding team members to reduce delivery risk\");\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\nfunction analyzeProjectCurrentState(project: any, workPackages: any[], currentHealth: string): any {\r\n  return {\r\n    projectHealth: currentHealth,\r\n    totalWorkPackages: workPackages.length,\r\n    completedWorkPackages: workPackages.filter(wp => wp.percentDone === 100).length,\r\n    overdueWorkPackages: workPackages.filter(wp => \r\n      wp.dueDate && new Date(wp.dueDate) < new Date() && wp.percentDone < 100\r\n    ).length,\r\n    averageProgress: workPackages.length > 0 ? \r\n      workPackages.reduce((sum, wp) => sum + (wp.percentDone || 0), 0) / workPackages.length : 0,\r\n    statusDistribution: workPackages.reduce((acc, wp) => {\r\n      const status = wp.status?.name || \"unknown\";\r\n      acc[status] = (acc[status] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>),\r\n    projectStatus: project.status?.name || \"active\",\r\n    identifiedIssues: identifyCurrentIssues(workPackages, currentHealth)\r\n  };\r\n}\r\n\r\nfunction generateActionRecommendations(state: any, goal: string, priority: string, timeframe: string): any[] {\r\n  const recommendations = [];\r\n  const urgencyMultiplier = priority === \"critical\" ? 1.5 : priority === \"high\" ? 1.2 : 1;\r\n  \r\n  // Schedule recovery recommendations\r\n  if (goal === \"schedule_recovery\") {\r\n    if (state.overdueWorkPackages > 0) {\r\n      recommendations.push({\r\n        action: \"Address overdue work packages immediately\",\r\n        type: \"schedule_recovery\",\r\n        impact: 8 * urgencyMultiplier,\r\n        effort: \"medium\",\r\n        timeframe: \"immediate\",\r\n        description: `Focus on ${state.overdueWorkPackages} overdue items to get back on track`\r\n      });\r\n    }\r\n    \r\n    recommendations.push({\r\n      action: \"Implement daily standups for progress tracking\",\r\n      type: \"process_improvement\", \r\n      impact: 6 * urgencyMultiplier,\r\n      effort: \"low\",\r\n      timeframe: \"immediate\",\r\n      description: \"Increase visibility and accountability for deliverables\"\r\n    });\r\n  }\r\n  \r\n  // Cost optimization recommendations\r\n  if (goal === \"cost_optimization\") {\r\n    recommendations.push({\r\n      action: \"Review resource allocation efficiency\",\r\n      type: \"resource_optimization\",\r\n      impact: 7 * urgencyMultiplier,\r\n      effort: \"medium\", \r\n      timeframe: \"short_term\",\r\n      description: \"Identify and eliminate resource inefficiencies\"\r\n    });\r\n  }\r\n  \r\n  // Quality improvement recommendations\r\n  if (goal === \"quality_improvement\") {\r\n    recommendations.push({\r\n      action: \"Implement code/deliverable review process\",\r\n      type: \"quality_assurance\",\r\n      impact: 8 * urgencyMultiplier, \r\n      effort: \"medium\",\r\n      timeframe: \"short_term\",\r\n      description: \"Establish systematic quality checkpoints\"\r\n    });\r\n  }\r\n  \r\n  // General health-based recommendations\r\n  if (state.projectHealth === \"red\" || state.projectHealth === \"amber\") {\r\n    recommendations.push({\r\n      action: \"Conduct project health assessment meeting\", \r\n      type: \"governance\",\r\n      impact: 9 * urgencyMultiplier,\r\n      effort: \"low\",\r\n      timeframe: \"immediate\",\r\n      description: \"Gather stakeholders to assess issues and create action plan\"\r\n    });\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\nfunction generateAlternativeActions(state: any, primaryRecommendations: any[], constraints: string[]): any[] {\r\n  const alternatives = [];\r\n  \r\n  // Alternative approaches based on constraints\r\n  if (constraints.includes(\"budget\")) {\r\n    alternatives.push({\r\n      approach: \"Low-cost improvement\",\r\n      actions: [\"Improve communication processes\", \"Optimize existing workflows\", \"Implement peer reviews\"],\r\n      tradeoffs: \"Lower cost but potentially slower results\"\r\n    });\r\n  }\r\n  \r\n  if (constraints.includes(\"time\")) {\r\n    alternatives.push({\r\n      approach: \"Quick wins focus\",\r\n      actions: [\"Address top 3 blockers only\", \"Implement minimal viable changes\", \"Focus on highest impact items\"],\r\n      tradeoffs: \"Faster implementation but limited scope\"\r\n    });\r\n  }\r\n  \r\n  if (constraints.includes(\"resources\")) {\r\n    alternatives.push({\r\n      approach: \"Process-focused approach\",\r\n      actions: [\"Automate repetitive tasks\", \"Improve documentation\", \"Streamline approval processes\"],\r\n      tradeoffs: \"No additional resources needed but requires process change\"\r\n    });\r\n  }\r\n  \r\n  return alternatives;\r\n}\r\n\r\nfunction calculatePerformanceMetrics(project: any, workPackages: any[], timeEntries: any[]): any {\r\n  const now = new Date();\r\n  const projectStart = new Date(project.createdAt);\r\n  const projectDuration = Math.max(1, (now.getTime() - projectStart.getTime()) / (1000 * 60 * 60 * 24));\r\n  \r\n  return {\r\n    schedulePerformance: {\r\n      plannedDuration: projectDuration,\r\n      actualDuration: projectDuration,\r\n      scheduleVariance: 0, // Would need baseline data\r\n      onTimeDeliveryRate: calculateOnTimeDeliveryRate(workPackages)\r\n    },\r\n    budgetPerformance: {\r\n      totalEffort: timeEntries.reduce((sum, entry) => sum + (entry.hours || 0), 0),\r\n      budgetVariance: 0, // Would need budget data\r\n      costPerWorkPackage: workPackages.length > 0 ? \r\n        timeEntries.reduce((sum, entry) => sum + (entry.hours || 0), 0) / workPackages.length : 0\r\n    },\r\n    qualityMetrics: {\r\n      completionRate: workPackages.length > 0 ? \r\n        (workPackages.filter(wp => wp.percentDone === 100).length / workPackages.length) * 100 : 0,\r\n      averageProgress: workPackages.length > 0 ?\r\n        workPackages.reduce((sum, wp) => sum + (wp.percentDone || 0), 0) / workPackages.length : 0\r\n    },\r\n    resourceUtilization: {\r\n      totalHours: timeEntries.reduce((sum, entry) => sum + (entry.hours || 0), 0),\r\n      averageHoursPerDay: timeEntries.reduce((sum, entry) => sum + (entry.hours || 0), 0) / Math.max(1, projectDuration),\r\n      teamProductivity: calculateTeamProductivity(timeEntries, workPackages)\r\n    }\r\n  };\r\n}\r\n\r\nfunction getBenchmarkData(benchmarkType: string, projectType?: string, industry?: string, env?: any): any {\r\n  // In a real implementation, this would query historical data or industry benchmarks\r\n  // For now, return simulated benchmark data\r\n  const baseBenchmarks = {\r\n    industry_average: {\r\n      schedulePerformance: { onTimeDeliveryRate: 68, scheduleVariance: 15 },\r\n      budgetPerformance: { budgetVariance: 12, costEfficiency: 82 },\r\n      qualityMetrics: { completionRate: 85, customerSatisfaction: 78 },\r\n      resourceUtilization: { utilizationRate: 75, productivity: 72 }\r\n    },\r\n    organizational_history: {\r\n      schedulePerformance: { onTimeDeliveryRate: 72, scheduleVariance: 18 },\r\n      budgetPerformance: { budgetVariance: 8, costEfficiency: 88 },\r\n      qualityMetrics: { completionRate: 88, customerSatisfaction: 82 },\r\n      resourceUtilization: { utilizationRate: 80, productivity: 78 }\r\n    }\r\n  };\r\n  \r\n  return baseBenchmarks[benchmarkType as keyof typeof baseBenchmarks] || baseBenchmarks.industry_average;\r\n}\r\n\r\nfunction performBenchmarkComparison(currentMetrics: any, benchmarkData: any, includeMetrics: string[], confidence: number): any {\r\n  const comparison = {\r\n    scheduleComparison: {\r\n      current: currentMetrics.schedulePerformance.onTimeDeliveryRate,\r\n      benchmark: benchmarkData.schedulePerformance.onTimeDeliveryRate,\r\n      variance: currentMetrics.schedulePerformance.onTimeDeliveryRate - benchmarkData.schedulePerformance.onTimeDeliveryRate,\r\n      performance: currentMetrics.schedulePerformance.onTimeDeliveryRate >= benchmarkData.schedulePerformance.onTimeDeliveryRate ? \"above\" : \"below\"\r\n    },\r\n    qualityComparison: {\r\n      current: currentMetrics.qualityMetrics.completionRate,\r\n      benchmark: benchmarkData.qualityMetrics.completionRate,\r\n      variance: currentMetrics.qualityMetrics.completionRate - benchmarkData.qualityMetrics.completionRate,\r\n      performance: currentMetrics.qualityMetrics.completionRate >= benchmarkData.qualityMetrics.completionRate ? \"above\" : \"below\"\r\n    },\r\n    overallRanking: \"average\" // Simplified ranking\r\n  };\r\n  \r\n  return comparison;\r\n}\r\n\r\nfunction generatePerformanceProjections(currentMetrics: any, benchmarkData: any, workPackages: any[]): any {\r\n  const currentTrend = currentMetrics.qualityMetrics.averageProgress / 100;\r\n  \r\n  return {\r\n    projectedCompletion: Math.max(0, Math.min(100, currentTrend * 120)), // 20% optimistic projection\r\n    estimatedCompletionDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n    confidenceLevel: 80,\r\n    keyAssumptions: [\r\n      \"Current progress trend continues\",\r\n      \"No major scope changes\",\r\n      \"Team capacity remains stable\"\r\n    ]\r\n  };\r\n}\r\n\r\nfunction generateDetailedBenchmarkInsights(analysis: any, currentMetrics: any, benchmarkData: any): any {\r\n  return {\r\n    strengths: identifyPerformanceStrengths(analysis),\r\n    improvementOpportunities: identifyImprovementOpportunities(analysis),\r\n    recommendedActions: generateBenchmarkBasedActions(analysis),\r\n    riskFactors: identifyBenchmarkRiskFactors(analysis)\r\n  };\r\n}\r\n\r\n// Additional helper functions\r\nfunction calculateModelConfidence(metrics: any): number {\r\n  let confidence = 70; // Base confidence\r\n  \r\n  if (metrics.totalWorkPackages >= 10) {confidence += 10;}\r\n  if (metrics.projectAge >= 30) {confidence += 10;} \r\n  if (metrics.teamSize >= 3) {confidence += 5;}\r\n  if (Object.values(metrics.healthIndicators).filter(Boolean).length >= 3) {confidence += 5;}\r\n  \r\n  return Math.min(95, confidence);\r\n}\r\n\r\nfunction extractPredictionFactors(metrics: any): string[] {\r\n  const factors = [];\r\n  \r\n  if (metrics.completionRate > 70) {factors.push(\"Strong completion rate\");}\r\n  if (metrics.overdueRate < 15) {factors.push(\"Good timeline adherence\");}\r\n  if (metrics.activityLevel > 2) {factors.push(\"High team engagement\");}\r\n  if (metrics.teamSize >= 3 && metrics.teamSize <= 8) {factors.push(\"Optimal team size\");}\r\n  if (metrics.changeFrequency < 2) {factors.push(\"Stable scope\");}\r\n  \r\n  return factors;\r\n}\r\n\r\nfunction generateDecisionPath(metrics: any): string[] {\r\n  const path = [\"Starting assessment\"];\r\n  \r\n  if (metrics.completionRate > 50) {\r\n    path.push(\"Good progress detected\");\r\n    if (metrics.overdueRate < 20) {\r\n      path.push(\"Timeline adherence confirmed\");\r\n    } else {\r\n      path.push(\"Timeline concerns identified\");\r\n    }\r\n  } else {\r\n    path.push(\"Progress concerns identified\");\r\n  }\r\n  \r\n  return path;\r\n}\r\n\r\nfunction identifyKeyDecisionFactors(metrics: any): string[] {\r\n  return [\r\n    `Completion rate: ${metrics.completionRate.toFixed(1)}%`,\r\n    `Overdue rate: ${metrics.overdueRate.toFixed(1)}%`,\r\n    `Team size: ${metrics.teamSize}`,\r\n    `Activity level: ${metrics.activityLevel.toFixed(1)}/day`\r\n  ];\r\n}\r\n\r\nfunction calculateDataQuality(metrics: any): number {\r\n  let quality = 0.5; // Base quality\r\n  \r\n  if (metrics.totalWorkPackages >= 5) {quality += 0.2;}\r\n  if (metrics.projectAge >= 14) {quality += 0.2;}\r\n  if (metrics.teamSize >= 2) {quality += 0.1;}\r\n  \r\n  return Math.min(1, quality);\r\n}\r\n\r\nfunction identifyCurrentIssues(workPackages: any[], health: string): string[] {\r\n  const issues = [];\r\n  \r\n  if (health === \"red\" || health === \"amber\") {\r\n    issues.push(\"Project health indicator shows concerns\");\r\n  }\r\n  \r\n  const overdueCount = workPackages.filter(wp => \r\n    wp.dueDate && new Date(wp.dueDate) < new Date() && wp.percentDone < 100\r\n  ).length;\r\n  \r\n  if (overdueCount > 0) {\r\n    issues.push(`${overdueCount} work packages are overdue`);\r\n  }\r\n  \r\n  const stuckCount = workPackages.filter(wp => \r\n    wp.percentDone > 0 && wp.percentDone < 100 && \r\n    (!wp.updatedAt || new Date(wp.updatedAt) < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))\r\n  ).length;\r\n  \r\n  if (stuckCount > 0) {\r\n    issues.push(`${stuckCount} work packages appear stuck`);\r\n  }\r\n  \r\n  return issues;\r\n}\r\n\r\nfunction calculateOnTimeDeliveryRate(workPackages: any[]): number {\r\n  const completedWPs = workPackages.filter(wp => wp.percentDone === 100);\r\n  if (completedWPs.length === 0) {return 0;}\r\n  \r\n  const onTimeWPs = completedWPs.filter(wp => \r\n    !wp.dueDate || new Date(wp.updatedAt || wp.createdAt) <= new Date(wp.dueDate)\r\n  );\r\n  \r\n  return (onTimeWPs.length / completedWPs.length) * 100;\r\n}\r\n\r\nfunction calculateTeamProductivity(timeEntries: any[], workPackages: any[]): number {\r\n  const totalHours = timeEntries.reduce((sum, entry) => sum + (entry.hours || 0), 0);\r\n  const completedWPs = workPackages.filter(wp => wp.percentDone === 100).length;\r\n  \r\n  return totalHours > 0 ? completedWPs / (totalHours / 8) : 0; // Work packages per person-day\r\n}\r\n\r\nfunction identifyPerformanceStrengths(analysis: any): string[] {\r\n  const strengths = [];\r\n  \r\n  if (analysis.scheduleComparison.performance === \"above\") {\r\n    strengths.push(\"Schedule performance exceeds benchmark\");\r\n  }\r\n  \r\n  if (analysis.qualityComparison.performance === \"above\") {\r\n    strengths.push(\"Quality metrics above industry average\");\r\n  }\r\n  \r\n  return strengths;\r\n}\r\n\r\nfunction identifyImprovementOpportunities(analysis: any): string[] {\r\n  const opportunities = [];\r\n  \r\n  if (analysis.scheduleComparison.performance === \"below\") {\r\n    opportunities.push(\"Schedule performance improvement needed\");\r\n  }\r\n  \r\n  if (analysis.qualityComparison.performance === \"below\") {\r\n    opportunities.push(\"Quality metrics below benchmark\");\r\n  }\r\n  \r\n  return opportunities;\r\n}\r\n\r\nfunction generateBenchmarkBasedActions(analysis: any): string[] {\r\n  const actions = [];\r\n  \r\n  if (analysis.scheduleComparison.variance < -10) {\r\n    actions.push(\"Implement schedule recovery plan\");\r\n  }\r\n  \r\n  if (analysis.qualityComparison.variance < -5) {\r\n    actions.push(\"Enhance quality assurance processes\");\r\n  }\r\n  \r\n  return actions;\r\n}\r\n\r\nfunction identifyBenchmarkRiskFactors(analysis: any): string[] {\r\n  const risks = [];\r\n  \r\n  if (analysis.overallRanking === \"below\") {\r\n    risks.push(\"Overall performance below acceptable levels\");\r\n  }\r\n  \r\n  return risks;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/priorities.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/priorities.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Priorities: list (global or per-project)\r\n//\r\nexport const listPrioritiesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional(),\r\n});\r\n\r\nexport async function listPriorities({ env }: Ctx, input: z.infer<typeof listPrioritiesInput>) {\r\n  const path = input.projectId ? `/api/v3/projects/${input.projectId}/priorities` : \"/api/v3/priorities\";\r\n  const { json } = await opFetch<any>(env, path);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, total: elements.length };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/programManagement.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'joinUrl' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ProgramStatusSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BenefitStatusSchema' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":41,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":41,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":19,"suggestions":[{"fix":{"range":[6912,6985],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8393,8395],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":355,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":355,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11514,11516],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":476,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":476,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16026,16028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":491,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":491,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16476,16478],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":604,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":604,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19972,19974],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":621,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":621,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20605,20607],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":632,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":632,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21168,21170],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":640,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":640,"endColumn":29,"suggestions":[{"fix":{"range":[21515,21576],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":645,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":645,"endColumn":23,"suggestions":[{"fix":{"range":[21665,21731],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":649,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":649,"endColumn":19,"suggestions":[{"fix":{"range":[21787,21868],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timeHorizon' is defined but never used. Allowed unused args must match /^_/u.","line":656,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":656,"endColumn":80},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":668,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":668,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22424,22426],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":709,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":709,"endColumn":19,"suggestions":[{"fix":{"range":[23891,23970],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":724,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":724,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[24421,24423],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":735,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":735,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[24845,24847],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":740,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":740,"endColumn":19,"suggestions":[{"fix":{"range":[24923,25001],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'coordinationType' is defined but never used. Allowed unused args must match /^_/u.","line":800,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":800,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'coordinationType' is defined but never used. Allowed unused args must match /^_/u.","line":857,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":857,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reportingPeriod' is defined but never used. Allowed unused args must match /^_/u.","line":879,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":879,"endColumn":88},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":888,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":888,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[30607,30609],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":889,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":889,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[30655,30657],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":911,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":911,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[31537,31539],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":948,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":948,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[32969,32971],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categories' is defined but never used. Allowed unused args must match /^_/u.","line":968,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":968,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'stakeholderRegister' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":970,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":970,"endColumn":28},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":998,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":998,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[34527,34529],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1027,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1027,"endColumn":19,"suggestions":[{"fix":{"range":[35621,35699],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'program' is defined but never used. Allowed unused args must match /^_/u.","line":1034,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":1034,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1056,"column":89,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1056,"endColumn":91,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[37024,37026],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'program' is defined but never used. Allowed unused args must match /^_/u.","line":1107,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":1107,"endColumn":72}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/programManagement.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, joinUrl } from \"../util/op\";\r\n\r\n// ===== PROGRAM MANAGEMENT SCHEMAS =====\r\n\r\nconst BenefitTypeSchema = z.enum([\r\n  \"financial\",\r\n  \"operational\", \r\n  \"strategic\",\r\n  \"customer_satisfaction\",\r\n  \"risk_reduction\",\r\n  \"compliance\",\r\n  \"innovation\",\r\n  \"market_position\",\r\n  \"efficiency\",\r\n  \"quality_improvement\"\r\n]);\r\n\r\nconst ProgramStatusSchema = z.enum([\r\n  \"initiation\",\r\n  \"planning\", \r\n  \"execution\",\r\n  \"monitoring\",\r\n  \"closing\",\r\n  \"on_hold\",\r\n  \"cancelled\"\r\n]);\r\n\r\nconst StakeholderRoleSchema = z.enum([\r\n  \"program_manager\",\r\n  \"sponsor\",\r\n  \"steering_committee\",\r\n  \"project_manager\",\r\n  \"business_owner\",\r\n  \"end_user\",\r\n  \"subject_matter_expert\",\r\n  \"governance_board\"\r\n]);\r\n\r\nconst BenefitStatusSchema = z.enum([\r\n  \"planned\",\r\n  \"in_progress\", \r\n  \"realized\",\r\n  \"at_risk\",\r\n  \"missed\",\r\n  \"deferred\"\r\n]);\r\n\r\nconst DeliveryCoordinationTypeSchema = z.enum([\r\n  \"sequence_dependencies\",\r\n  \"parallel_coordination\",\r\n  \"milestone_alignment\", \r\n  \"resource_sharing\",\r\n  \"integration_points\",\r\n  \"risk_mitigation\"\r\n]);\r\n\r\n// Program Custom Fields Schema\r\nconst ProgramCustomFieldsSchema = z.record(z.string(), z.any()).optional();\r\n\r\n// Create Program Schema\r\nexport const createProgramInput = z.object({\r\n  name: z.string().min(1).max(255),\r\n  identifier: z.string().min(1).max(100).regex(/^[a-z0-9\\-_]+$/),\r\n  description: z.string().optional(),\r\n  programManager: z.union([z.string(), z.number()]).optional(),\r\n  sponsor: z.union([z.string(), z.number()]).optional(),\r\n  projects: z.array(z.union([z.string(), z.number()])),\r\n  expectedBenefits: z.array(z.object({\r\n    type: BenefitTypeSchema,\r\n    description: z.string(),\r\n    measurementCriteria: z.string(),\r\n    targetValue: z.string(),\r\n    targetDate: z.string().optional()\r\n  })).optional(),\r\n  strategicObjectives: z.array(z.string()).optional(),\r\n  startDate: z.string().optional(),\r\n  endDate: z.string().optional(),\r\n  budget: z.number().min(0).optional(),\r\n  riskTolerance: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\r\n  governanceLevel: z.enum([\"basic\", \"standard\", \"enhanced\"]).default(\"standard\"),\r\n  customFields: ProgramCustomFieldsSchema,\r\n  active: z.boolean().default(true),\r\n  dryRun: z.boolean().default(false)\r\n});\r\n\r\n// Coordinate Deliveries Schema\r\nexport const coordinateDeliveriesInput = z.object({\r\n  programId: z.union([z.string(), z.number()]),\r\n  coordinationType: DeliveryCoordinationTypeSchema.default(\"milestone_alignment\"),\r\n  includeProjectDependencies: z.boolean().default(true),\r\n  includeMilestoneAlignment: z.boolean().default(true),\r\n  includeResourceConflicts: z.boolean().default(true),\r\n  includeRiskFactors: z.boolean().default(true),\r\n  timeHorizon: z.enum([\"1_month\", \"3_months\", \"6_months\", \"program_duration\"]).default(\"6_months\"),\r\n  generateActionPlan: z.boolean().default(true),\r\n  prioritizeBy: z.enum([\"business_value\", \"risk_level\", \"timeline_critical\", \"resource_impact\"]).default(\"business_value\")\r\n});\r\n\r\n// Track Benefits Schema\r\nexport const trackProgramBenefitsInput = z.object({\r\n  programId: z.union([z.string(), z.number()]),\r\n  reportingPeriod: z.enum([\"monthly\", \"quarterly\", \"semi_annual\", \"annual\"]).default(\"quarterly\"),\r\n  benefitTypes: z.array(BenefitTypeSchema).optional(),\r\n  includeRealizationRate: z.boolean().default(true),\r\n  includeProjectContribution: z.boolean().default(true),\r\n  includeForecast: z.boolean().default(true),\r\n  includeRiskAssessment: z.boolean().default(true),\r\n  baselineDate: z.string().optional(),\r\n  comparisonBenchmark: z.enum([\"baseline\", \"industry_standard\", \"organizational_target\"]).default(\"baseline\")\r\n});\r\n\r\n// Manage Stakeholders Schema\r\nexport const manageProgramStakeholdersInput = z.object({\r\n  programId: z.union([z.string(), z.number()]),\r\n  includeStakeholderRegister: z.boolean().default(true),\r\n  includeInfluenceMapping: z.boolean().default(true),\r\n  includeEngagementPlan: z.boolean().default(true),\r\n  includeCommunicationMatrix: z.boolean().default(true),\r\n  stakeholderCategories: z.array(StakeholderRoleSchema).optional(),\r\n  engagementLevel: z.enum([\"minimal\", \"standard\", \"intensive\"]).default(\"standard\"),\r\n  communicationFrequency: z.enum([\"weekly\", \"bi_weekly\", \"monthly\", \"quarterly\"]).default(\"bi_weekly\"),\r\n  generateSatisfactionSurvey: z.boolean().default(false)\r\n});\r\n\r\n// ===== PROGRAM MANAGEMENT FUNCTIONS =====\r\n\r\nexport async function createProgram(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof createProgramInput>\r\n) {\r\n  // Create program as a special parent project with program-specific attributes\r\n  const programData: any = {\r\n    name: input.name,\r\n    identifier: input.identifier,\r\n    description: input.description,\r\n    active: input.active,\r\n    public: false, // Programs are typically internal\r\n    // Program-specific custom fields\r\n    customField1: input.programManager?.toString(),\r\n    customField2: input.sponsor?.toString(),\r\n    customField3: JSON.stringify(input.strategicObjectives || []),\r\n    customField4: input.budget?.toString(),\r\n    customField5: input.riskTolerance,\r\n    customField6: input.governanceLevel,\r\n    customField7: \"program\", // Program type marker\r\n    customField8: JSON.stringify(input.expectedBenefits || []),\r\n    customField9: input.startDate,\r\n    customField10: input.endDate,\r\n    ...((input.customFields || {}) as Record<string, any>)\r\n  };\r\n\r\n  if (input.dryRun) {\r\n    // Validate via form endpoint\r\n    const { json: formResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects/form\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(programData)\r\n    });\r\n\r\n    return {\r\n      dryRun: true,\r\n      validation: formResponse,\r\n      programData,\r\n      projectsToLink: input.projects,\r\n      message: \"Program validation successful - ready for creation\"\r\n    };\r\n  }\r\n\r\n  // Create the program project\r\n  const { json: programResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(programData)\r\n  });\r\n\r\n  // Link child projects to the program\r\n  const linkedProjects = [];\r\n  const failedLinks = [];\r\n\r\n  for (const projectId of input.projects) {\r\n    try {\r\n      // Get current project to get lockVersion\r\n      const { json: currentProject } = await opFetch<any>(ctx.env, `/api/v3/projects/${projectId}`);\r\n      \r\n      // Update project to set program as parent\r\n      const { json: updateResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${projectId}`, {\r\n        method: \"PATCH\",\r\n        body: JSON.stringify({\r\n          lockVersion: currentProject.lockVersion,\r\n          _links: {\r\n            parent: { href: `/api/v3/projects/${programResponse.id}` }\r\n          }\r\n        })\r\n      });\r\n      \r\n      linkedProjects.push({\r\n        projectId: projectId,\r\n        projectName: updateResponse.name,\r\n        linkedSuccessfully: true\r\n      });\r\n    } catch (error: any) {\r\n      console.warn(`Failed to link project ${projectId} to program: ${error}`);\r\n      failedLinks.push({\r\n        projectId: projectId,\r\n        error: error,\r\n        reason: \"Could not establish parent-child relationship\"\r\n      });\r\n    }\r\n  }\r\n\r\n  // Create initial program coordination framework\r\n  const coordinationFramework = await initializeProgramCoordination(\r\n    ctx.env,\r\n    programResponse.id,\r\n    linkedProjects\r\n  );\r\n\r\n  return {\r\n    program: programResponse,\r\n    linkedProjects: linkedProjects,\r\n    failedLinks: failedLinks,\r\n    coordinationFramework: coordinationFramework,\r\n    expectedBenefits: input.expectedBenefits,\r\n    strategicObjectives: input.strategicObjectives,\r\n    message: `Program created with ${linkedProjects.length}/${input.projects.length} projects linked successfully`\r\n  };\r\n}\r\n\r\nexport async function coordinateDeliveries(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof coordinateDeliveriesInput>\r\n) {\r\n  // Get program project\r\n  const { json: programResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.programId}`);\r\n  \r\n  // Get all child projects\r\n  const params: any = {\r\n    filters: JSON.stringify([\r\n      {\r\n        \"parent\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.programId.toString()]\r\n        }\r\n      }\r\n    ])\r\n  };\r\n  const { json: childProjectsResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects\", { params });\r\n\r\n  const childProjects = childProjectsResponse._embedded?.elements || [];\r\n  \r\n  if (childProjects.length === 0) {\r\n    return {\r\n      coordination: null,\r\n      message: \"No child projects found for coordination\",\r\n      recommendations: [\"Add projects to the program before coordinating deliveries\"]\r\n    };\r\n  }\r\n\r\n  const coordination = {\r\n    program: programResponse,\r\n    projects: childProjects,\r\n    deliveryCoordination: {},\r\n    dependencies: [],\r\n    milestoneAlignment: {},\r\n    resourceConflicts: [],\r\n    riskFactors: [],\r\n    actionPlan: []\r\n  };\r\n\r\n  // Analyze project dependencies if requested\r\n  if (input.includeProjectDependencies) {\r\n    coordination.dependencies = await analyzeInterProjectDependencies(\r\n      ctx.env,\r\n      childProjects\r\n    );\r\n  }\r\n\r\n  // Analyze milestone alignment if requested\r\n  if (input.includeMilestoneAlignment) {\r\n    coordination.milestoneAlignment = await analyzeMilestoneAlignment(\r\n      ctx.env,\r\n      childProjects,\r\n      input.timeHorizon\r\n    );\r\n  }\r\n\r\n  // Identify resource conflicts if requested\r\n  if (input.includeResourceConflicts) {\r\n    coordination.resourceConflicts = await identifyResourceConflicts(\r\n      ctx.env,\r\n      childProjects\r\n    );\r\n  }\r\n\r\n  // Assess coordination risk factors if requested\r\n  if (input.includeRiskFactors) {\r\n    coordination.riskFactors = await assessCoordinationRisks(\r\n      childProjects,\r\n      coordination.dependencies,\r\n      coordination.resourceConflicts\r\n    );\r\n  }\r\n\r\n  // Generate action plan if requested\r\n  if (input.generateActionPlan) {\r\n    coordination.actionPlan = generateCoordinationActionPlan(\r\n      coordination,\r\n      input.prioritizeBy,\r\n      input.coordinationType\r\n    );\r\n  }\r\n\r\n  // Generate coordination recommendations\r\n  const recommendations = generateCoordinationRecommendations(\r\n    coordination,\r\n    input.coordinationType\r\n  );\r\n\r\n  return {\r\n    deliveryCoordination: coordination,\r\n    coordinationType: input.coordinationType,\r\n    timeHorizon: input.timeHorizon,\r\n    totalProjects: childProjects.length,\r\n    dependenciesIdentified: coordination.dependencies.length,\r\n    conflictsIdentified: coordination.resourceConflicts.length,\r\n    actionItemsGenerated: coordination.actionPlan.length,\r\n    recommendations: recommendations\r\n  };\r\n}\r\n\r\nexport async function trackProgramBenefits(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof trackProgramBenefitsInput>\r\n) {\r\n  // Get program project with benefits information\r\n  const { json: programResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.programId}`);\r\n  \r\n  // Extract expected benefits from program custom fields\r\n  const expectedBenefits = programResponse.customField8 ? \r\n    JSON.parse(programResponse.customField8) : [];\r\n\r\n  // Get all child projects for benefit analysis\r\n  const params2: any = {\r\n    filters: JSON.stringify([\r\n      {\r\n        \"parent\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.programId.toString()]\r\n        }\r\n      }\r\n    ])\r\n  };\r\n  const { json: childProjectsResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects\", { params: params2 });\r\n\r\n  const childProjects = childProjectsResponse._embedded?.elements || [];\r\n  \r\n  const benefitsTracking = {\r\n    program: programResponse,\r\n    reportingPeriod: input.reportingPeriod,\r\n    expectedBenefits: expectedBenefits,\r\n    benefitRealization: {},\r\n    projectContributions: [],\r\n    realizationSummary: {},\r\n    forecast: {},\r\n    riskAssessment: {}\r\n  };\r\n\r\n  // Track benefit realization for each expected benefit\r\n  for (const expectedBenefit of expectedBenefits) {\r\n    const benefitTracking = {\r\n      benefitType: expectedBenefit.type,\r\n      description: expectedBenefit.description,\r\n      targetValue: expectedBenefit.targetValue,\r\n      measurementCriteria: expectedBenefit.measurementCriteria,\r\n      currentValue: \"0\", // Would need actual measurement\r\n      realizationPercentage: 0,\r\n      status: \"in_progress\" as z.infer<typeof BenefitStatusSchema>,\r\n      contributingProjects: [],\r\n      riskFactors: []\r\n    };\r\n\r\n    // Analyze project contributions to this benefit\r\n    if (input.includeProjectContribution) {\r\n      for (const project of childProjects) {\r\n        const contribution = analyzeBenefitContribution(\r\n          project,\r\n          expectedBenefit,\r\n          input.reportingPeriod\r\n        );\r\n        \r\n        if (contribution.contributionLevel > 0) {\r\n          benefitTracking.contributingProjects.push(contribution);\r\n          benefitTracking.realizationPercentage += contribution.contributionLevel;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Calculate realization percentage based on project progress\r\n    if (benefitTracking.contributingProjects.length > 0) {\r\n      const avgContribution = benefitTracking.contributingProjects.reduce(\r\n        (sum, contrib) => sum + contrib.contributionLevel, 0\r\n      ) / benefitTracking.contributingProjects.length;\r\n      \r\n      benefitTracking.realizationPercentage = Math.min(100, avgContribution);\r\n      \r\n      // Update benefit status based on realization\r\n      if (benefitTracking.realizationPercentage >= 90) {\r\n        benefitTracking.status = \"realized\";\r\n      } else if (benefitTracking.realizationPercentage >= 60) {\r\n        benefitTracking.status = \"in_progress\";\r\n      } else if (benefitTracking.realizationPercentage < 30) {\r\n        benefitTracking.status = \"at_risk\";\r\n      }\r\n    }\r\n\r\n    benefitsTracking.benefitRealization[expectedBenefit.type] = benefitTracking;\r\n  }\r\n\r\n  // Generate realization summary\r\n  if (input.includeRealizationRate) {\r\n    const totalBenefits = Object.keys(benefitsTracking.benefitRealization).length;\r\n    const realizedBenefits = Object.values(benefitsTracking.benefitRealization)\r\n      .filter((b: any) => b.status === \"realized\").length;\r\n    const atRiskBenefits = Object.values(benefitsTracking.benefitRealization)\r\n      .filter((b: any) => b.status === \"at_risk\").length;\r\n\r\n    benefitsTracking.realizationSummary = {\r\n      totalBenefits: totalBenefits,\r\n      realizedBenefits: realizedBenefits,\r\n      atRiskBenefits: atRiskBenefits,\r\n      realizationRate: totalBenefits > 0 ? (realizedBenefits / totalBenefits) * 100 : 0,\r\n      overallStatus: realizedBenefits / totalBenefits > 0.8 ? \"on_track\" : \r\n                     realizedBenefits / totalBenefits > 0.5 ? \"needs_attention\" : \"at_risk\"\r\n    };\r\n  }\r\n\r\n  // Generate forecast if requested\r\n  if (input.includeForecast) {\r\n    benefitsTracking.forecast = generateBenefitForecast(\r\n      benefitsTracking.benefitRealization,\r\n      childProjects\r\n    );\r\n  }\r\n\r\n  // Assess risks if requested\r\n  if (input.includeRiskAssessment) {\r\n    benefitsTracking.riskAssessment = assessBenefitRisks(\r\n      benefitsTracking.benefitRealization,\r\n      childProjects\r\n    );\r\n  }\r\n\r\n  return {\r\n    benefitsTracking: benefitsTracking,\r\n    reportingDate: new Date().toISOString(),\r\n    totalExpectedBenefits: expectedBenefits.length,\r\n    projectsAnalyzed: childProjects.length,\r\n    realizationRate: (benefitsTracking.realizationSummary as any)?.realizationRate ?? 0,\r\n    overallStatus: (benefitsTracking.realizationSummary as any)?.overallStatus ?? \"unknown\"\r\n  };\r\n}\r\n\r\nexport async function manageProgramStakeholders(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof manageProgramStakeholdersInput>\r\n) {\r\n  // Get program project\r\n  const { json: programResponse } = await opFetch<any>(ctx.env, `/api/v3/projects/${input.programId}`);\r\n  \r\n  // Get program membership information\r\n  const { json: membershipsResponse } = await opFetch<any>(\r\n    ctx.env, \r\n    `/api/v3/projects/${input.programId}/memberships`\r\n  );\r\n  \r\n  const memberships = membershipsResponse._embedded?.elements || [];\r\n\r\n  // Get child projects for comprehensive stakeholder view\r\n  const params3: any = {\r\n    filters: JSON.stringify([\r\n      {\r\n        \"parent\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.programId.toString()]\r\n        }\r\n      }\r\n    ])\r\n  };\r\n  const { json: childProjectsResponse } = await opFetch<any>(ctx.env, \"/api/v3/projects\", { params: params3 });\r\n\r\n  const childProjects = childProjectsResponse._embedded?.elements || [];\r\n  \r\n  const stakeholderManagement = {\r\n    program: programResponse,\r\n    stakeholderRegister: [],\r\n    influenceMapping: {},\r\n    engagementPlan: {},\r\n    communicationMatrix: {},\r\n    satisfactionMetrics: {}\r\n  };\r\n\r\n  // Build stakeholder register if requested\r\n  if (input.includeStakeholderRegister) {\r\n    stakeholderManagement.stakeholderRegister = await buildStakeholderRegister(\r\n      ctx.env,\r\n      memberships,\r\n      childProjects,\r\n      input.stakeholderCategories\r\n    );\r\n  }\r\n\r\n  // Create influence mapping if requested\r\n  if (input.includeInfluenceMapping) {\r\n    stakeholderManagement.influenceMapping = createInfluenceMapping(\r\n      stakeholderManagement.stakeholderRegister,\r\n      programResponse\r\n    );\r\n  }\r\n\r\n  // Develop engagement plan if requested\r\n  if (input.includeEngagementPlan) {\r\n    stakeholderManagement.engagementPlan = developEngagementPlan(\r\n      stakeholderManagement.stakeholderRegister,\r\n      input.engagementLevel,\r\n      input.communicationFrequency\r\n    );\r\n  }\r\n\r\n  // Create communication matrix if requested\r\n  if (input.includeCommunicationMatrix) {\r\n    stakeholderManagement.communicationMatrix = createCommunicationMatrix(\r\n      stakeholderManagement.stakeholderRegister,\r\n      input.communicationFrequency\r\n    );\r\n  }\r\n\r\n  // Generate satisfaction survey if requested\r\n  if (input.generateSatisfactionSurvey) {\r\n    stakeholderManagement.satisfactionMetrics = generateSatisfactionSurvey(\r\n      stakeholderManagement.stakeholderRegister,\r\n      programResponse\r\n    );\r\n  }\r\n\r\n  // Generate stakeholder management recommendations\r\n  const recommendations = generateStakeholderRecommendations(\r\n    stakeholderManagement,\r\n    input.engagementLevel\r\n  );\r\n\r\n  return {\r\n    stakeholderManagement: stakeholderManagement,\r\n    totalStakeholders: stakeholderManagement.stakeholderRegister.length,\r\n    engagementLevel: input.engagementLevel,\r\n    communicationFrequency: input.communicationFrequency,\r\n    projectsCovered: childProjects.length + 1, // +1 for program itself\r\n    recommendations: recommendations,\r\n    managementDate: new Date().toISOString()\r\n  };\r\n}\r\n\r\n// ===== HELPER FUNCTIONS =====\r\n\r\nasync function initializeProgramCoordination(env: any, programId: string | number, projects: any[]) {\r\n  // Initialize basic coordination framework\r\n  return {\r\n    programId: programId,\r\n    coordinationModel: \"hierarchical\",\r\n    governanceStructure: {\r\n      steeringCommittee: \"program_sponsor\",\r\n      programBoard: \"monthly_reviews\", \r\n      projectManagers: \"bi_weekly_sync\"\r\n    },\r\n    communicationPlan: {\r\n      frequency: \"bi_weekly\",\r\n      format: \"structured_reports\",\r\n      escalationPath: \"defined\"\r\n    },\r\n    projectCount: projects.length,\r\n    coordinationStatus: \"initialized\"\r\n  };\r\n}\r\n\r\nasync function analyzeInterProjectDependencies(env: any, projects: any[]) {\r\n  const dependencies = [];\r\n  \r\n  // Analyze dependencies between projects by looking at work package relations\r\n  for (const project of projects) {\r\n    try {\r\n      // Get work packages for this project\r\n      const wpParams: any = {\r\n        filters: JSON.stringify([\r\n          {\r\n            \"project\": {\r\n              \"operator\": \"=\",\r\n              \"values\": [project.id.toString()]\r\n            }\r\n          }\r\n        ]),\r\n        pageSize: 50\r\n      };\r\n      const { json: wpResponse } = await opFetch<any>(env, \"/api/v3/work_packages\", { params: wpParams });\r\n\r\n      const workPackages = wpResponse._embedded?.elements || [];\r\n\r\n      // Check for relations to work packages in other projects\r\n      for (const wp of workPackages.slice(0, 10)) { // Limit to avoid too many API calls\r\n        try {\r\n          const relParams: any = {\r\n            filters: JSON.stringify([\r\n              {\r\n                \"from\": {\r\n                  \"operator\": \"=\",\r\n                  \"values\": [wp.id.toString()]\r\n                }\r\n              }\r\n            ])\r\n          };\r\n          const { json: relationsResponse } = await opFetch<any>(env, \"/api/v3/relations\", { params: relParams });\r\n\r\n          const relations = relationsResponse._embedded?.elements || [];\r\n          \r\n          for (const relation of relations) {\r\n            if (relation._links?.to?.href) {\r\n              try {\r\n                const { json: relatedWP } = await opFetch<any>(env, relation._links.to.href);\r\n                if (relatedWP.project?.id && relatedWP.project.id !== project.id) {\r\n                  dependencies.push({\r\n                    fromProject: project.id,\r\n                    fromProjectName: project.name,\r\n                    toProject: relatedWP.project.id,\r\n                    toProjectName: relatedWP.project.name || \"Unknown\",\r\n                    dependencyType: relation.type,\r\n                    fromWorkPackage: wp.subject,\r\n                    toWorkPackage: relatedWP.subject,\r\n                    riskLevel: relation.type === \"blocks\" ? \"high\" : \"medium\"\r\n                  });\r\n                }\r\n              } catch (error: any) {\r\n                console.warn(\"Failed to fetch related work package:\", error);\r\n              }\r\n            }\r\n          }\r\n        } catch (error: any) {\r\n          console.warn(`Failed to fetch relations for WP ${wp.id}:`, error);\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      console.warn(`Failed to analyze dependencies for project ${project.id}:`, error);\r\n    }\r\n  }\r\n  \r\n  return dependencies;\r\n}\r\n\r\nasync function analyzeMilestoneAlignment(env: any, projects: any[], timeHorizon: string) {\r\n  const alignment = {\r\n    projects: [],\r\n    conflictingMilestones: [],\r\n    alignmentOpportunities: [],\r\n    recommendedSequencing: []\r\n  };\r\n\r\n  // Analyze milestones (versions) for each project\r\n  for (const project of projects) {\r\n    try {\r\n      const { json: versionsResponse } = await opFetch<any>(env, `/api/v3/projects/${project.id}/versions`);\r\n      const versions = versionsResponse._embedded?.elements || [];\r\n\r\n      const projectMilestones = versions.map((version: any) => ({\r\n        projectId: project.id,\r\n        projectName: project.name,\r\n        milestoneName: version.name,\r\n        startDate: version.startDate,\r\n        endDate: version.endDate,\r\n        status: version.status\r\n      }));\r\n\r\n      alignment.projects.push({\r\n        projectId: project.id,\r\n        projectName: project.name,\r\n        milestones: projectMilestones\r\n      });\r\n\r\n      // Look for potential conflicts (overlapping critical milestones)\r\n      projectMilestones.forEach((milestone: any) => {\r\n        if (milestone.endDate) {\r\n          const conflictingProjects = alignment.projects.filter((p: any) => \r\n            p.projectId !== project.id && \r\n            p.milestones.some((m: any) => m.endDate === milestone.endDate)\r\n          );\r\n          \r\n          if (conflictingProjects.length > 0) {\r\n            alignment.conflictingMilestones.push({\r\n              date: milestone.endDate,\r\n              conflictingMilestones: [\r\n                { project: project.name, milestone: milestone.milestoneName },\r\n                ...conflictingProjects.flatMap(p => \r\n                  p.milestones\r\n                    .filter(m => m.endDate === milestone.endDate)\r\n                    .map(m => ({ project: p.projectName, milestone: m.milestoneName }))\r\n                )\r\n              ]\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      console.warn(`Failed to analyze milestones for project ${project.id}:`, error);\r\n    }\r\n  }\r\n\r\n  return alignment;\r\n}\r\n\r\nasync function identifyResourceConflicts(env: any, projects: any[]) {\r\n  const conflicts = [];\r\n  const resourceMap = new Map();\r\n\r\n  // Analyze team memberships across projects\r\n  for (const project of projects) {\r\n    try {\r\n      const { json: membershipsResponse } = await opFetch<any>(env, `/api/v3/projects/${project.id}/memberships`);\r\n      const memberships = membershipsResponse._embedded?.elements || [];\r\n\r\n      memberships.forEach((membership: any) => {\r\n        const userId = membership._links?.user?.href;\r\n        if (userId) {\r\n          if (!resourceMap.has(userId)) {\r\n            resourceMap.set(userId, []);\r\n          }\r\n          resourceMap.get(userId).push({\r\n            projectId: project.id,\r\n            projectName: project.name,\r\n            roles: membership._links?.roles?.map((r: any) => r.title) || []\r\n          });\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      console.warn(`Failed to analyze resources for project ${project.id}:`, error);\r\n    }\r\n  }\r\n\r\n  // Identify users assigned to multiple projects (potential conflicts)\r\n  resourceMap.forEach((projectAssignments: any, userId: string) => {\r\n    if (projectAssignments.length > 1) {\r\n      conflicts.push({\r\n        resourceId: userId,\r\n        conflictType: \"multi_project_assignment\",\r\n        conflictLevel: projectAssignments.length > 3 ? \"high\" : \"medium\",\r\n        projects: projectAssignments,\r\n        recommendedAction: \"Review resource allocation and priorities\"\r\n      });\r\n    }\r\n  });\r\n\r\n  return conflicts;\r\n}\r\n\r\nasync function assessCoordinationRisks(projects: any[], dependencies: any[], resourceConflicts: any[]) {\r\n  const risks = [];\r\n\r\n  // Risk: High number of dependencies\r\n  if (dependencies.length > projects.length * 2) {\r\n    risks.push({\r\n      riskType: \"coordination_complexity\",\r\n      severity: \"high\",\r\n      description: \"High number of inter-project dependencies may create coordination challenges\",\r\n      impact: \"Schedule delays and increased management overhead\",\r\n      mitigation: \"Implement structured dependency management process\"\r\n    });\r\n  }\r\n\r\n  // Risk: Critical resource conflicts\r\n  const criticalConflicts = resourceConflicts.filter(c => c.conflictLevel === \"high\");\r\n  if (criticalConflicts.length > 0) {\r\n    risks.push({\r\n      riskType: \"resource_overallocation\",\r\n      severity: \"high\", \r\n      description: `${criticalConflicts.length} critical resource conflicts identified`,\r\n      impact: \"Resource burnout and project delays\",\r\n      mitigation: \"Rebalance resource allocation across projects\"\r\n    });\r\n  }\r\n\r\n  // Risk: Too many projects for effective coordination\r\n  if (projects.length > 10) {\r\n    risks.push({\r\n      riskType: \"program_scale_complexity\",\r\n      severity: \"medium\",\r\n      description: \"Large number of projects may exceed manageable coordination capacity\",\r\n      impact: \"Reduced oversight and coordination effectiveness\",\r\n      mitigation: \"Consider sub-program organization or portfolio restructuring\"\r\n    });\r\n  }\r\n\r\n  return risks;\r\n}\r\n\r\nfunction generateCoordinationActionPlan(coordination: any, prioritizeBy: string, coordinationType: string) {\r\n  const actionPlan = [];\r\n\r\n  // Actions based on dependencies\r\n  if (coordination.dependencies.length > 0) {\r\n    const highRiskDeps = coordination.dependencies.filter((d: any) => d.riskLevel === \"high\");\r\n    if (highRiskDeps.length > 0) {\r\n      actionPlan.push({\r\n        priority: \"high\",\r\n        action: \"Address critical inter-project dependencies\",\r\n        description: `Resolve ${highRiskDeps.length} high-risk dependencies to prevent schedule impacts`,\r\n        owner: \"program_manager\",\r\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n        category: \"dependency_management\"\r\n      });\r\n    }\r\n  }\r\n\r\n  // Actions based on resource conflicts\r\n  if (coordination.resourceConflicts.length > 0) {\r\n    const criticalConflicts = coordination.resourceConflicts.filter((c: any) => c.conflictLevel === \"high\");\r\n    if (criticalConflicts.length > 0) {\r\n      actionPlan.push({\r\n        priority: \"high\",\r\n        action: \"Resolve critical resource conflicts\",\r\n        description: `Address resource overallocation affecting ${criticalConflicts.length} team members`,\r\n        owner: \"program_manager\",\r\n        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),\r\n        category: \"resource_management\"\r\n      });\r\n    }\r\n  }\r\n\r\n  // Actions based on milestone alignment\r\n  if (coordination.milestoneAlignment?.conflictingMilestones?.length > 0) {\r\n    actionPlan.push({\r\n      priority: \"medium\",\r\n      action: \"Align conflicting project milestones\",\r\n      description: \"Resolve milestone scheduling conflicts to optimize program delivery\",\r\n      owner: \"project_managers\",\r\n      dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000).toISOString(),\r\n      category: \"milestone_management\"\r\n    });\r\n  }\r\n\r\n  // Sort by priority if specified\r\n  if (prioritizeBy === \"risk_level\") {\r\n    actionPlan.sort((a, b) => {\r\n      const priorityOrder = { \"high\": 3, \"medium\": 2, \"low\": 1 };\r\n      return (priorityOrder[b.priority as keyof typeof priorityOrder] || 0) - \r\n             (priorityOrder[a.priority as keyof typeof priorityOrder] || 0);\r\n    });\r\n  }\r\n\r\n  return actionPlan;\r\n}\r\n\r\nfunction generateCoordinationRecommendations(coordination: any, coordinationType: string) {\r\n  const recommendations = [];\r\n\r\n  if (coordination.projects.length > 8) {\r\n    recommendations.push(\"Consider establishing sub-programs for better management of large program scale\");\r\n  }\r\n\r\n  if (coordination.dependencies.length > coordination.projects.length) {\r\n    recommendations.push(\"Implement formal dependency management process with regular review cycles\");\r\n  }\r\n\r\n  if (coordination.resourceConflicts.length > 0) {\r\n    recommendations.push(\"Establish resource allocation governance to prevent overcommitment\");\r\n  }\r\n\r\n  if (coordination.riskFactors.length > 3) {\r\n    recommendations.push(\"Enhance program risk management with proactive monitoring and mitigation\");\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\nfunction analyzeBenefitContribution(project: any, expectedBenefit: any, reportingPeriod: string) {\r\n  // Analyze how much this project contributes to the expected benefit\r\n  // This is a simplified analysis - in reality would need more sophisticated measurement\r\n  \r\n  const contribution = {\r\n    projectId: project.id,\r\n    projectName: project.name,\r\n    benefitType: expectedBenefit.type,\r\n    contributionLevel: 0, // Percentage contribution\r\n    status: project.status?.name || \"active\",\r\n    progress: project.percentDone || 0\r\n  };\r\n\r\n  // Simple contribution calculation based on project progress and alignment\r\n  // In reality, this would need specific measurement criteria and data collection\r\n  if (project.percentDone) {\r\n    contribution.contributionLevel = project.percentDone;\r\n  }\r\n\r\n  // Adjust based on project status\r\n  if (project.status?.name?.toLowerCase().includes(\"closed\")) {\r\n    contribution.contributionLevel = Math.min(100, contribution.contributionLevel + 10);\r\n  } else if (project.status?.name?.toLowerCase().includes(\"risk\")) {\r\n    contribution.contributionLevel = Math.max(0, contribution.contributionLevel - 20);\r\n  }\r\n\r\n  return contribution;\r\n}\r\n\r\nfunction generateBenefitForecast(benefitRealization: any, projects: any[]) {\r\n  const totalProjects = projects.length;\r\n  const completedProjects = projects.filter(p => \r\n    p.status?.name?.toLowerCase().includes(\"closed\") || p.percentDone === 100\r\n  ).length;\r\n\r\n  const programProgress = totalProjects > 0 ? (completedProjects / totalProjects) * 100 : 0;\r\n\r\n  return {\r\n    forecastDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(), // 3 months from now\r\n    projectedRealizationRate: Math.min(100, programProgress + 10), // Slightly optimistic\r\n    confidence: programProgress > 50 ? \"medium\" : \"low\",\r\n    keyAssumptions: [\r\n      \"Current project progress rates continue\",\r\n      \"No major scope changes or resource constraints\", \r\n      \"Benefit measurement criteria remain valid\"\r\n    ],\r\n    riskFactors: [\r\n      \"External market conditions may affect benefit realization\",\r\n      \"Organizational change management effectiveness\",\r\n      \"Technology adoption rates by end users\"\r\n    ]\r\n  };\r\n}\r\n\r\nfunction assessBenefitRisks(benefitRealization: any, projects: any[]) {\r\n  const risks = [];\r\n  \r\n  const atRiskBenefits = Object.values(benefitRealization).filter((b: any) => b.status === \"at_risk\");\r\n  \r\n  if (atRiskBenefits.length > 0) {\r\n    risks.push({\r\n      riskType: \"benefit_realization\",\r\n      severity: \"high\",\r\n      description: `${atRiskBenefits.length} expected benefits are at risk of not being realized`,\r\n      mitigation: \"Review project alignment with benefit objectives and adjust approach\"\r\n    });\r\n  }\r\n\r\n  const projectsAtRisk = projects.filter(p => \r\n    p.status?.name?.toLowerCase().includes(\"risk\") || \r\n    p.status?.name?.toLowerCase().includes(\"red\")\r\n  );\r\n\r\n  if (projectsAtRisk.length > projects.length * 0.3) {\r\n    risks.push({\r\n      riskType: \"project_delivery\",\r\n      severity: \"medium\",\r\n      description: \"High proportion of projects showing risk indicators\",\r\n      mitigation: \"Implement enhanced project support and monitoring\"\r\n    });\r\n  }\r\n\r\n  return risks;\r\n}\r\n\r\nasync function buildStakeholderRegister(\r\n  env: any, \r\n  memberships: any[], \r\n  childProjects: any[], \r\n  categories?: string[]\r\n) {\r\n  const stakeholderRegister = [];\r\n  const uniqueStakeholders = new Map();\r\n\r\n  // Add program-level stakeholders\r\n  memberships.forEach((membership: any) => {\r\n    const userId = membership._links?.user?.href;\r\n    const user = membership._embedded?.user;\r\n    \r\n    if (userId && user && !uniqueStakeholders.has(userId)) {\r\n      uniqueStakeholders.set(userId, {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        role: \"program_stakeholder\",\r\n        influence: \"medium\",\r\n        interest: \"high\",\r\n        projects: [\"program\"],\r\n        engagementLevel: \"active\",\r\n        communicationPreference: \"email\",\r\n        lastEngagement: membership.updatedAt\r\n      });\r\n    }\r\n  });\r\n\r\n  // Add project-level stakeholders\r\n  for (const project of childProjects.slice(0, 5)) { // Limit to avoid too many API calls\r\n    try {\r\n      const { json: projectMemberships } = await opFetch<any>(env, `/api/v3/projects/${project.id}/memberships`);\r\n      const members = projectMemberships._embedded?.elements || [];\r\n      \r\n      members.forEach((membership: any) => {\r\n        const userId = membership._links?.user?.href;\r\n        const user = membership._embedded?.user;\r\n        \r\n        if (userId && user) {\r\n          if (uniqueStakeholders.has(userId)) {\r\n            // Add this project to existing stakeholder\r\n            const existing = uniqueStakeholders.get(userId);\r\n            existing.projects.push(project.name);\r\n            existing.role = existing.role === \"program_stakeholder\" ? \"program_and_project_stakeholder\" : existing.role;\r\n          } else {\r\n            uniqueStakeholders.set(userId, {\r\n              id: user.id,\r\n              name: user.name,\r\n              email: user.email,\r\n              role: \"project_stakeholder\",\r\n              influence: \"medium\",\r\n              interest: \"medium\",\r\n              projects: [project.name],\r\n              engagementLevel: \"active\",\r\n              communicationPreference: \"email\",\r\n              lastEngagement: membership.updatedAt\r\n            });\r\n          }\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      console.warn(`Failed to fetch memberships for project ${project.id}:`, error);\r\n    }\r\n  }\r\n\r\n  return Array.from(uniqueStakeholders.values());\r\n}\r\n\r\nfunction createInfluenceMapping(stakeholderRegister: any[], program: any) {\r\n  return {\r\n    highInfluenceHighInterest: stakeholderRegister.filter((s: any) => s.influence === \"high\" && s.interest === \"high\"),\r\n    highInfluenceLowInterest: stakeholderRegister.filter((s: any) => s.influence === \"high\" && s.interest === \"low\"),\r\n    lowInfluenceHighInterest: stakeholderRegister.filter((s: any) => s.influence === \"low\" && s.interest === \"high\"),\r\n    lowInfluenceLowInterest: stakeholderRegister.filter((s: any) => s.influence === \"low\" && s.interest === \"low\"),\r\n    engagementStrategies: {\r\n      \"high_influence_high_interest\": \"Manage closely - key supporters\",\r\n      \"high_influence_low_interest\": \"Keep satisfied - potential risks\",\r\n      \"low_influence_high_interest\": \"Keep informed - advocates\",\r\n      \"low_influence_low_interest\": \"Monitor - minimal effort\"\r\n    }\r\n  };\r\n}\r\n\r\nfunction developEngagementPlan(stakeholderRegister: any[], engagementLevel: string, frequency: string) {\r\n  return {\r\n    engagementLevel: engagementLevel,\r\n    communicationFrequency: frequency,\r\n    stakeholderSegments: [\r\n      {\r\n        segment: \"Executive Sponsors\",\r\n        stakeholders: stakeholderRegister.filter((s: any) => s.role.includes(\"sponsor\") || s.influence === \"high\"),\r\n        engagementApproach: \"Executive briefings and decision points\",\r\n        frequency: \"monthly\"\r\n      },\r\n      {\r\n        segment: \"Project Managers\",\r\n        stakeholders: stakeholderRegister.filter((s: any) => s.role.includes(\"manager\")),\r\n        engagementApproach: \"Regular coordination meetings and status updates\",\r\n        frequency: frequency\r\n      },\r\n      {\r\n        segment: \"Team Members\",\r\n        stakeholders: stakeholderRegister.filter((s: any) => s.role === \"project_stakeholder\"),\r\n        engagementApproach: \"Team communications and progress sharing\",\r\n        frequency: \"bi_weekly\"\r\n      }\r\n    ],\r\n    escalationProcess: \"Defined escalation path for issues and decisions\"\r\n  };\r\n}\r\n\r\nfunction createCommunicationMatrix(stakeholderRegister: any[], frequency: string) {\r\n  return {\r\n    communicationChannels: [\r\n      {\r\n        channel: \"Program Status Report\",\r\n        audience: stakeholderRegister.filter((s: any) => s.influence === \"high\" || s.interest === \"high\"),\r\n        frequency: frequency,\r\n        format: \"Written report with executive summary\"\r\n      },\r\n      {\r\n        channel: \"Project Coordination Meeting\", \r\n        audience: stakeholderRegister.filter((s: any) => s.role.includes(\"manager\")),\r\n        frequency: frequency,\r\n        format: \"Virtual meeting with structured agenda\"\r\n      },\r\n      {\r\n        channel: \"Team Updates\",\r\n        audience: stakeholderRegister.filter((s: any) => s.role === \"project_stakeholder\"),\r\n        frequency: \"weekly\",\r\n        format: \"Email updates and team channels\"\r\n      }\r\n    ],\r\n    communicationPrinciples: [\r\n      \"Right information to right people at right time\",\r\n      \"Two-way communication encouraged\",\r\n      \"Escalation paths clearly defined\"\r\n    ]\r\n  };\r\n}\r\n\r\nfunction generateSatisfactionSurvey(stakeholderRegister: any[], program: any) {\r\n  return {\r\n    surveyTemplate: {\r\n      questions: [\r\n        \"How satisfied are you with program communication?\",\r\n        \"How well are your needs being met by the program?\", \r\n        \"How would you rate program progress visibility?\",\r\n        \"What improvements would you suggest?\"\r\n      ],\r\n      scale: \"1-5 (Very Dissatisfied to Very Satisfied)\",\r\n      frequency: \"quarterly\"\r\n    },\r\n    targetStakeholders: stakeholderRegister.length,\r\n    distributionMethod: \"email_survey\",\r\n    analysisApproach: \"Aggregate scores with trend analysis\"\r\n  };\r\n}\r\n\r\nfunction generateStakeholderRecommendations(stakeholderManagement: any, engagementLevel: string) {\r\n  const recommendations = [];\r\n\r\n  if (stakeholderManagement.stakeholderRegister.length > 20) {\r\n    recommendations.push(\"Large stakeholder base - consider stakeholder segmentation strategy\");\r\n  }\r\n\r\n  if (engagementLevel === \"minimal\") {\r\n    recommendations.push(\"Consider increasing engagement level for better program support\");\r\n  }\r\n\r\n  if (stakeholderManagement.influenceMapping?.highInfluenceHighInterest?.length === 0) {\r\n    recommendations.push(\"Identify and engage key program champions for better support\");\r\n  }\r\n\r\n  return recommendations;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/projects.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":73,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":73,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2958,2960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4138,4140],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":164,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":164,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5797,5799],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":205,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":205,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6971,6973],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/projects.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Enterprise Project Management - Full PMBOK/PMP Schema\r\n//\r\n\r\n// Formattable field schema (supports markdown)\r\nconst FormattableFieldSchema = z.object({\r\n  format: z.string().default(\"markdown\"),\r\n  raw: z.string(),\r\n  html: z.string().optional(),\r\n}).optional();\r\n\r\n// Custom field support (OpenProject supports 30+ dynamic custom fields)\r\nconst CustomFieldsSchema = z.object({\r\n  customField1: z.any().optional(), // Budget code\r\n  customField2: z.any().optional(), // Program alignment\r\n  customField3: z.any().optional(), // Risk category\r\n  customField4: z.any().optional(), // Stakeholder priority\r\n  customField5: z.any().optional(), // Phase gate requirements\r\n  customField6: z.any().optional(), // Compliance category\r\n  customField7: z.any().optional(), // Business unit\r\n  customField8: z.any().optional(), // Project manager level\r\n  customField9: z.any().optional(), // Strategic priority\r\n  customField10: z.any().optional(), // Resource pool\r\n}).partial();\r\n\r\n//\r\n// Project Creation (Enterprise Schema)\r\n//\r\nexport const createProjectInput = z.object({\r\n  // Core PMBOK fields (required)\r\n  name: z.string().min(1).max(255).describe(\"Project name (1-255 characters)\"),\r\n  identifier: z.string().min(1).max(100).describe(\"Unique project identifier (1-100 characters)\"),\r\n  \r\n  // Enterprise project fields\r\n  description: FormattableFieldSchema.describe(\"Project description with markdown support\"),\r\n  active: z.boolean().default(true).describe(\"Project active status\"),\r\n  public: z.boolean().default(false).describe(\"Project visibility (public/private)\"),\r\n  \r\n  // Project hierarchy (enterprise)\r\n  parentId: z.union([z.string(), z.number()]).optional().describe(\"Parent project ID for sub-projects\"),\r\n  \r\n  // Status management\r\n  statusExplanation: z.string().optional().describe(\"Explanation of current project status\"),\r\n  \r\n  // Enterprise custom fields (PMP-level customization)\r\n  customFields: CustomFieldsSchema.optional().describe(\"Organization-specific custom fields\"),\r\n  \r\n  // Forms validation\r\n  dryRun: z.boolean().default(false).describe(\"Validate only without creating\"),\r\n  sendNotifications: z.boolean().default(true).describe(\"Send notifications to stakeholders\"),\r\n}).strict();\r\n\r\nexport async function createProject({ env }: Ctx, input: z.infer<typeof createProjectInput>) {\r\n  // Build enterprise project payload\r\n  const payload: any = {\r\n    name: input.name,\r\n    identifier: input.identifier,\r\n    active: input.active,\r\n    public: input.public,\r\n  };\r\n\r\n  // Add optional enterprise fields\r\n  if (input.description) {payload.description = input.description;}\r\n  if (input.statusExplanation) {payload.statusExplanation = input.statusExplanation;}\r\n  \r\n  // Project hierarchy support\r\n  if (input.parentId) {\r\n    payload._links = payload._links || {};\r\n    payload._links.parent = hal.project(input.parentId);\r\n  }\r\n\r\n  // Custom fields integration (enterprise)\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Use forms-first validation (PMBOK compliance)\r\n  const { json: form } = await opFetch<any>(env, \"/api/v3/projects/form\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ \r\n      ...payload, \r\n      _meta: { sendNotifications: input.sendNotifications } \r\n    }),\r\n  });\r\n\r\n  const errors = form?.validationErrors ?? {};\r\n  const hasErrors = errors && Object.keys(errors).length > 0;\r\n  \r\n  if (input.dryRun || hasErrors) {\r\n    return { \r\n      ok: !hasErrors, \r\n      validationErrors: errors, \r\n      payload: form?.payload,\r\n      schema: form?.schema,\r\n      warnings: form?.warnings \r\n    };\r\n  }\r\n\r\n  // Commit project creation\r\n  const commit = form?._links?.commit;\r\n  if (!commit?.href) {throw new Error(\"Form commit link missing - insufficient permissions\");}\r\n  \r\n  const { json: created } = await opFetch<any>(env, commit.href, {\r\n    method: commit.method || \"POST\",\r\n    body: JSON.stringify(form.payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    project: created,\r\n    projectUrl: created?._links?.self?.href \r\n  };\r\n}\r\n\r\n//\r\n// Project Updates (Enterprise Schema)\r\n//\r\nexport const updateProjectInput = z.object({\r\n  id: z.union([z.string(), z.number()]).describe(\"Project ID to update\"),\r\n  \r\n  // Core updatable fields\r\n  name: z.string().min(1).max(255).optional(),\r\n  description: FormattableFieldSchema,\r\n  active: z.boolean().optional(),\r\n  public: z.boolean().optional(),\r\n  statusExplanation: z.string().optional(),\r\n  \r\n  // Hierarchy updates\r\n  parentId: z.union([z.string(), z.number()]).optional(),\r\n  \r\n  // Enterprise custom fields\r\n  customFields: CustomFieldsSchema.optional(),\r\n  \r\n  // Update control\r\n  sendNotifications: z.boolean().default(true),\r\n  dryRun: z.boolean().default(false),\r\n}).strict();\r\n\r\nexport async function updateProject({ env }: Ctx, input: z.infer<typeof updateProjectInput>) {\r\n  // Get current project for lockVersion and existing data\r\n  const { json: current } = await opFetch<any>(env, `/api/v3/projects/${input.id}`);\r\n  \r\n  const payload: any = {\r\n    lockVersion: current.lockVersion,\r\n  };\r\n\r\n  // Update core fields\r\n  if (input.name !== undefined) {payload.name = input.name;}\r\n  if (input.description !== undefined) {payload.description = input.description;}\r\n  if (input.active !== undefined) {payload.active = input.active;}\r\n  if (input.public !== undefined) {payload.public = input.public;}\r\n  if (input.statusExplanation !== undefined) {payload.statusExplanation = input.statusExplanation;}\r\n\r\n  // Update hierarchy\r\n  payload._links = current._links || {};\r\n  if (input.parentId !== undefined) {\r\n    payload._links.parent = input.parentId ? hal.project(input.parentId) : null;\r\n  }\r\n\r\n  // Update custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Forms-first validation\r\n  const { json: form } = await opFetch<any>(env, `/api/v3/projects/${input.id}/form`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ \r\n      ...payload, \r\n      _meta: { sendNotifications: input.sendNotifications } \r\n    }),\r\n  });\r\n\r\n  const errors = form?.validationErrors ?? {};\r\n  const hasErrors = errors && Object.keys(errors).length > 0;\r\n  \r\n  if (input.dryRun || hasErrors) {\r\n    return { \r\n      ok: !hasErrors, \r\n      validationErrors: errors, \r\n      payload: form?.payload,\r\n      schema: form?.schema,\r\n      changes: form?.changes\r\n    };\r\n  }\r\n\r\n  // Commit update\r\n  const commit = form?._links?.commit;\r\n  if (!commit?.href) {throw new Error(\"Form commit link missing\");}\r\n  \r\n  const { json: updated } = await opFetch<any>(env, commit.href, {\r\n    method: commit.method || \"PATCH\",\r\n    body: JSON.stringify(form.payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    project: updated,\r\n    changes: form?.changes \r\n  };\r\n}\r\n\r\n//\r\n// Project Archival (Enterprise Lifecycle Management)\r\n//\r\nexport const archiveProjectInput = z.object({\r\n  id: z.union([z.string(), z.number()]).describe(\"Project ID to archive\"),\r\n  reason: z.string().optional().describe(\"Reason for archiving project\"),\r\n}).strict();\r\n\r\nexport async function archiveProject({ env }: Ctx, input: z.infer<typeof archiveProjectInput>) {\r\n  return await updateProject({ env }, {\r\n    id: input.id,\r\n    active: false,\r\n    statusExplanation: input.reason || \"Project archived\",\r\n    sendNotifications: true,\r\n  });\r\n}\r\n\r\n//\r\n// Enhanced Project Listing with Enterprise Filters\r\n//\r\nexport const listProjectsEnterpriseInput = z.object({\r\n  // Basic filtering\r\n  q: z.string().optional().describe(\"Name/identifier substring match\"),\r\n  active: z.boolean().optional().describe(\"Filter by active status\"),\r\n  public: z.boolean().optional().describe(\"Filter by public visibility\"),\r\n  \r\n  // Hierarchy filtering\r\n  parentId: z.union([z.string(), z.number()]).optional().describe(\"Filter by parent project\"),\r\n  topLevelOnly: z.boolean().default(false).describe(\"Show only top-level projects\"),\r\n  \r\n  // Enterprise filtering\r\n  customFieldFilters: z.record(z.any()).optional().describe(\"Filter by custom field values\"),\r\n  \r\n  // Pagination\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n  \r\n  // Sorting\r\n  sortBy: z.array(z.array(z.string())).optional().describe('Sort criteria like [[\"name\",\"asc\"]]'),\r\n}).strict();\r\n\r\nexport async function listProjectsEnterprise({ env }: Ctx, input: z.infer<typeof listProjectsEnterpriseInput>) {\r\n  const filters: any[] = [];\r\n  \r\n  // Build enterprise filters\r\n  if (input.active !== undefined) {\r\n    filters.push({ active: { operator: \"=\", values: [input.active.toString()] } });\r\n  }\r\n  \r\n  if (input.public !== undefined) {\r\n    filters.push({ public: { operator: \"=\", values: [input.public.toString()] } });\r\n  }\r\n  \r\n  if (input.parentId !== undefined) {\r\n    filters.push({ parent: { operator: \"=\", values: [input.parentId.toString()] } });\r\n  } else if (input.topLevelOnly) {\r\n    filters.push({ parent: { operator: \"!*\", values: [] } });\r\n  }\r\n\r\n  if (input.q?.trim()) {\r\n    filters.push({ name: { operator: \"~\", values: [input.q.trim()] } });\r\n  }\r\n\r\n  // Custom field filters (enterprise)\r\n  if (input.customFieldFilters) {\r\n    Object.entries(input.customFieldFilters).forEach(([field, value]) => {\r\n      filters.push({ [field]: { operator: \"=\", values: [value] } });\r\n    });\r\n  }\r\n\r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n  };\r\n  \r\n  if (filters.length > 0) {\r\n    params.filters = JSON.stringify(filters);\r\n  }\r\n  \r\n  if (input.sortBy) {\r\n    params.sortBy = JSON.stringify(input.sortBy);\r\n  }\r\n\r\n  const { json } = await opFetch<any>(env, \"/api/v3/projects\", { params });\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  \r\n  return { \r\n    elements, \r\n    ...meta, \r\n    _links: json?._links,\r\n    appliedFilters: filters.length > 0 ? filters : undefined \r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/reportingEnterprise.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'opFetch' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseCollectionMeta' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withQuery' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":49},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":68,"column":20,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":68,"endColumn":22,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[3031,3033],"text":"==="},"desc":"Use '===' instead of '=='."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/reportingEnterprise.ts\r\nimport { z } from \"zod\";\r\nimport { hybridManager } from \"../data/hybrid-manager\";\r\nimport type { Ctx } from \"../tools\";\r\nimport type { HybridProjectData } from \"../types/hybrid-data\";\r\n\r\n// Legacy imports for compatibility\r\nimport { opFetch, parseCollectionMeta, withQuery } from \"../util/op\";\r\n\r\n//\r\n// Enterprise Reporting & Analytics - EVM, Critical Path, Dashboard\r\n// Now powered by hybrid OpenProject native + custom calculations\r\n//\r\n\r\n//\r\n// Earned Value Management (PMBOK Standard)\r\n//\r\nexport const generateEarnedValueInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID for EVM analysis\"),\r\n  \r\n  // EVM calculation parameters\r\n  reportDate: z.string().describe(\"Status date for EVM calculations (YYYY-MM-DD)\"),\r\n  baselineId: z.union([z.string(), z.number()]).optional().describe(\"Baseline version for comparison\"),\r\n  \r\n  // Analysis scope\r\n  includeSubprojects: z.boolean().default(false).describe(\"Include child project data\"),\r\n  workPackageIds: z.array(z.union([z.string(), z.number()])).optional().describe(\"Specific work packages to analyze\"),\r\n  \r\n  // EVM options\r\n  calculateForecasts: z.boolean().default(true).describe(\"Calculate ETC, EAC, and forecasts\"),\r\n  includeDetailedBreakdown: z.boolean().default(false).describe(\"Include WP-level EVM metrics\"),\r\n  costCurrency: z.string().default(\"USD\").describe(\"Currency for cost calculations\"),\r\n  \r\n  // Time period analysis\r\n  periodStart: z.string().optional().describe(\"Start date for period analysis\"),\r\n  periodEnd: z.string().optional().describe(\"End date for period analysis\"),\r\n}).strict();\r\n\r\nexport async function generateEarnedValue(ctx: Ctx, input: z.infer<typeof generateEarnedValueInput>) {\r\n  // Use hybrid data manager for comprehensive project data\r\n  const projectData = await hybridManager.getProjectData(ctx, input.projectId);\r\n  \r\n  // Check if we have cached EVM calculation\r\n  const reportDate = new Date(input.reportDate);\r\n  if (projectData.calculations?.evm && !input.includeDetailedBreakdown) {\r\n    const cachedEVM = projectData.calculations.evm;\r\n    const calculationDate = new Date(cachedEVM.calculationDate);\r\n    const isRecent = (Date.now() - calculationDate.getTime()) < 3600000; // 1 hour\r\n    \r\n    if (isRecent && calculationDate.toDateString() === reportDate.toDateString()) {\r\n      return {\r\n        ...cachedEVM,\r\n        source: 'cached',\r\n        detailedBreakdown: input.includeDetailedBreakdown ? await generateDetailedBreakdown(projectData, input) : undefined\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Use the hybrid calculation (native OpenProject data + custom EVM logic)\r\n  const evmResult = projectData.calculations?.evm;\r\n  if (!evmResult) {\r\n    throw new Error('EVM calculation failed - insufficient project data');\r\n  }\r\n  \r\n  // Normalize any null numeric fields (edge case when no data yet)\r\n  const cleaned: any = { ...evmResult };\r\n  for (const k of ['plannedValue','earnedValue','actualCost','budgetAtCompletion']) {\r\n    if (cleaned[k] == null || !Number.isFinite(cleaned[k])) {cleaned[k] = 0;}\r\n  }\r\n  return {\r\n    ...cleaned,\r\n    source: 'calculated',\r\n    projectName: projectData.native.name,\r\n    currency: input.costCurrency,\r\n    detailedBreakdown: input.includeDetailedBreakdown ? await generateDetailedBreakdown(projectData, input) : undefined\r\n  };\r\n}\r\n\r\n/**\r\n * Generate detailed work package breakdown for EVM analysis\r\n */\r\nasync function generateDetailedBreakdown(\r\n  projectData: HybridProjectData,\r\n  input: z.infer<typeof generateEarnedValueInput>\r\n) {\r\n  const { native, variables } = projectData;\r\n  const reportDate = new Date(input.reportDate);\r\n  \r\n  const workPackageMetrics = native.workPackages.map(wp => {\r\n    // Calculate individual work package metrics using variables\r\n    const estimatedHours = parseISO8601Duration(wp.estimatedTime) || variables.workingHoursPerDay;\r\n    const budgetAtCompletion = estimatedHours * variables.standardLaborRate;\r\n    \r\n    // Calculate planned value based on schedule\r\n    let plannedValue = 0;\r\n    if (wp.startDate && wp.dueDate) {\r\n      const startDate = new Date(wp.startDate);\r\n      const dueDate = new Date(wp.dueDate);\r\n      \r\n      if (startDate <= reportDate) {\r\n        if (reportDate >= dueDate) {\r\n          plannedValue = budgetAtCompletion;\r\n        } else {\r\n          const totalDuration = dueDate.getTime() - startDate.getTime();\r\n          const elapsedDuration = reportDate.getTime() - startDate.getTime();\r\n          plannedValue = budgetAtCompletion * Math.max(0, Math.min(1, elapsedDuration / totalDuration));\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Earned value from OpenProject's native completion percentage\r\n    const earnedValue = budgetAtCompletion * (wp.percentageDone / 100);\r\n    \r\n    // Calculate actual cost from time entries\r\n    const wpTimeEntries = native.timeEntries.filter(te => \r\n      te.workPackage && String(te.workPackage.id) === String(wp.id)\r\n    );\r\n    \r\n    const actualCost = wpTimeEntries.reduce((sum, te) => {\r\n      const rate = variables.standardLaborRate; // Could be enhanced with user-specific rates\r\n      return sum + (te.hours * rate);\r\n    }, 0);\r\n    \r\n    return {\r\n      id: wp.id,\r\n      subject: wp.subject,\r\n      type: wp.type.name,\r\n      status: wp.status.name,\r\n      assignee: wp.assignee?.name || 'Unassigned',\r\n      budgetAtCompletion: Math.round(budgetAtCompletion * 100) / 100,\r\n      plannedValue: Math.round(plannedValue * 100) / 100,\r\n      earnedValue: Math.round(earnedValue * 100) / 100,\r\n      actualCost: Math.round(actualCost * 100) / 100,\r\n      percentComplete: wp.percentageDone,\r\n      scheduleVariance: Math.round((earnedValue - plannedValue) * 100) / 100,\r\n      costVariance: Math.round((earnedValue - actualCost) * 100) / 100,\r\n      schedulePerformanceIndex: plannedValue > 0 ? Math.round((earnedValue / plannedValue) * 1000) / 1000 : 1,\r\n      costPerformanceIndex: actualCost > 0 ? Math.round((earnedValue / actualCost) * 1000) / 1000 : 1,\r\n      startDate: wp.startDate,\r\n      dueDate: wp.dueDate,\r\n      estimatedHours,\r\n      actualHours: wpTimeEntries.reduce((sum, te) => sum + te.hours, 0)\r\n    };\r\n  });\r\n  \r\n  return {\r\n    workPackages: workPackageMetrics,\r\n    summary: {\r\n      totalWorkPackages: workPackageMetrics.length,\r\n      completedWorkPackages: workPackageMetrics.filter(wp => wp.percentComplete === 100).length,\r\n      inProgressWorkPackages: workPackageMetrics.filter(wp => wp.percentComplete > 0 && wp.percentComplete < 100).length,\r\n      notStartedWorkPackages: workPackageMetrics.filter(wp => wp.percentComplete === 0).length\r\n    }\r\n  };\r\n}\r\n\r\n//\r\n// Critical Path Analysis (Enterprise Feature)\r\n//\r\nexport const generateCriticalPathInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID for critical path analysis\"),\r\n  \r\n  // Analysis parameters\r\n  calculateDate: z.string().default(new Date().toISOString().split('T')[0]).describe(\"Date for analysis (YYYY-MM-DD)\"),\r\n  \r\n  // Options\r\n  includeFloat: z.boolean().default(true).describe(\"Include float calculations\"),\r\n  floatThreshold: z.number().default(5).describe(\"Float threshold for highlighting (days)\"),\r\n  includeRiskAssessment: z.boolean().default(true).describe(\"Include schedule risk assessment\"),\r\n}).strict();\r\n\r\nexport async function generateCriticalPath(ctx: Ctx, input: z.infer<typeof generateCriticalPathInput>) {\r\n  // Get project data using hybrid manager\r\n  const projectData = await hybridManager.getProjectData(ctx, input.projectId);\r\n  \r\n  // Check for cached critical path analysis\r\n  if (projectData.calculations?.criticalPath) {\r\n    const cached = projectData.calculations.criticalPath;\r\n    const calculationDate = new Date(cached.analysisDate);\r\n    const isRecent = (Date.now() - calculationDate.getTime()) < 1800000; // 30 minutes\r\n    \r\n    if (isRecent) {\r\n      return {\r\n        ...cached,\r\n        source: 'cached',\r\n        projectName: projectData.native.name\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Use the hybrid calculation\r\n  const criticalPathResult = projectData.calculations?.criticalPath;\r\n  if (!criticalPathResult) {\r\n    throw new Error('Critical path analysis failed - insufficient dependency data');\r\n  }\r\n  \r\n  return {\r\n    ...criticalPathResult,\r\n    source: 'calculated',\r\n    projectName: projectData.native.name\r\n  };\r\n}\r\n\r\n//\r\n// Project Dashboard (Comprehensive KPIs)\r\n//\r\nexport const generateProjectDashboardInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID for dashboard generation\"),\r\n  \r\n  // Dashboard scope\r\n  includeEVM: z.boolean().default(true).describe(\"Include Earned Value Management metrics\"),\r\n  includeCriticalPath: z.boolean().default(true).describe(\"Include critical path analysis\"),\r\n  includeResourceUtilization: z.boolean().default(true).describe(\"Include resource utilization\"),\r\n  includeRiskAssessment: z.boolean().default(false).describe(\"Include risk assessment\"),\r\n  \r\n  // Time period for analysis\r\n  customStartDate: z.string().optional().describe(\"Custom start date for analysis (YYYY-MM-DD)\"),\r\n  customEndDate: z.string().optional().describe(\"Custom end date for analysis (YYYY-MM-DD)\"),\r\n}).strict();\r\n\r\nexport async function generateProjectDashboard(ctx: Ctx, input: z.infer<typeof generateProjectDashboardInput>) {\r\n  // Get comprehensive project data\r\n  const projectData = await hybridManager.getProjectData(ctx, input.projectId);\r\n  const projectStatus = await hybridManager.getProjectStatus(ctx, input.projectId);\r\n  \r\n  const dashboard: any = {\r\n    project: {\r\n      id: projectData.native.id,\r\n      name: projectData.native.name,\r\n      identifier: projectData.native.identifier,\r\n      status: projectData.native.status,\r\n      lastUpdated: new Date().toISOString()\r\n    },\r\n    \r\n    // Real-time status from OpenProject\r\n    realTimeStatus: projectStatus,\r\n    \r\n    // Core metrics from native OpenProject calculations\r\n    coreMetrics: {\r\n      totalWorkPackages: projectData.native.totalWorkPackages,\r\n      completedWorkPackages: projectData.native.completedWorkPackages,\r\n      activeWorkPackages: projectData.native.activeWorkPackages,\r\n      overallProgress: projectData.native.overallPercentComplete,\r\n      totalEstimatedHours: projectData.native.totalEstimatedHours,\r\n      totalSpentHours: projectData.native.totalSpentHours,\r\n      efficiency: projectData.native.totalEstimatedHours > 0 \r\n        ? Math.round((projectData.native.totalSpentHours / projectData.native.totalEstimatedHours) * 100) / 100\r\n        : 1\r\n    }\r\n  };\r\n  \r\n  // Add EVM analysis if requested\r\n  if (input.includeEVM && projectData.calculations?.evm) {\r\n    dashboard.earnedValueManagement = projectData.calculations.evm;\r\n  }\r\n  \r\n  // Add critical path analysis if requested\r\n  if (input.includeCriticalPath && projectData.calculations?.criticalPath) {\r\n    dashboard.criticalPathAnalysis = {\r\n      projectDuration: projectData.calculations.criticalPath.projectDuration,\r\n      criticalPathLength: projectData.calculations.criticalPath.criticalPathLength,\r\n      scheduleRisk: projectData.calculations.criticalPath.scheduleRisk,\r\n      recommendations: projectData.calculations.criticalPath.recommendations\r\n    };\r\n  }\r\n  \r\n  // Add resource utilization if requested\r\n  if (input.includeResourceUtilization && projectData.calculations?.resourceUtilization) {\r\n    dashboard.resourceUtilization = {\r\n      totalResources: projectData.calculations.resourceUtilization.length,\r\n      overallocatedResources: projectData.calculations.resourceUtilization.filter(r => r.overallocation).length,\r\n      averageUtilization: projectData.calculations.resourceUtilization.reduce(\r\n        (sum, r) => sum + r.utilizationRate, 0\r\n      ) / Math.max(1, projectData.calculations.resourceUtilization.length)\r\n    };\r\n  }\r\n  \r\n  // PMO configuration summary\r\n  dashboard.pmoConfiguration = {\r\n    standardLaborRate: projectData.variables.standardLaborRate,\r\n    costPerformanceThreshold: projectData.variables.costPerformanceThreshold,\r\n    schedulePerformanceThreshold: projectData.variables.schedulePerformanceThreshold,\r\n    evmMethod: projectData.variables.evmMethod,\r\n    industryType: projectData.variables.industryType\r\n  };\r\n  \r\n  return dashboard;\r\n}\r\n\r\n// Helper function to parse ISO 8601 duration\r\nfunction parseISO8601Duration(duration?: string): number {\r\n  if (!duration) {return 0;}\r\n  \r\n  const match = duration.match(/^PT(?:(\\d+(?:\\.\\d+)?)H)?(?:(\\d+(?:\\.\\d+)?)D)?$/);\r\n  if (!match) {return 0;}\r\n  \r\n  const hours = parseFloat(match[1] || '0');\r\n  const days = parseFloat(match[2] || '0');\r\n  \r\n  return hours + (days * 8); // Assume 8 hours per day\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/riskManagement.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'joinUrl' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RiskStatusSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":23,"suggestions":[{"fix":{"range":[7108,7179],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":253,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":253,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8858,8860],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9217,9219],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9289,9291],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":267,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":267,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9376,9378],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":272,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":272,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9510,9512],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9642,9644],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":352,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":352,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11701,11703],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":372,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":372,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12186,12188],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":373,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":373,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12240,12242],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":374,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":374,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12307,12309],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12380,12382],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":398,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":398,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13135,13137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":408,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":408,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13630,13632],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":27,"suggestions":[{"fix":{"range":[13705,13763],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":416,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":416,"endColumn":21,"suggestions":[{"fix":{"range":[13842,13921],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":423,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":423,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14206,14208],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":503,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":503,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17051,17053],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":519,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":519,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17445,17447],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":520,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":520,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17497,17499],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":521,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":521,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17562,17564],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":540,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":549,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[17981,18190],"text":"distributionData[groupKey] ??= {\r\n        total: 0,\r\n        new: 0,\r\n        active: 0,\r\n        mitigated: 0,\r\n        closed: 0,\r\n        realized: 0\r\n      };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":576,"column":67,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":576,"endColumn":69,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19228,19230],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":583,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":583,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[19534,19536],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":591,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":591,"endColumn":21,"suggestions":[{"fix":{"range":[19770,19843],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":681,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":681,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23259,23261],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":683,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":683,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23385,23387],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":684,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":684,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23441,23443],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":692,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":692,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":716,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":716,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'input' is defined but never used. Allowed unused args must match /^_/u.","line":745,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":745,"endColumn":59},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":753,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":753,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26363,26365],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/riskManagement.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, joinUrl } from \"../util/op\";\r\n\r\n// ===== RISK MANAGEMENT SCHEMAS =====\r\n\r\nconst RiskCategorySchema = z.enum([\r\n  \"technical\",\r\n  \"business\", \r\n  \"external\",\r\n  \"organizational\",\r\n  \"project\",\r\n  \"operational\",\r\n  \"financial\",\r\n  \"regulatory\",\r\n  \"security\",\r\n  \"quality\"\r\n]);\r\n\r\nconst RiskProbabilitySchema = z.enum([\r\n  \"very_low\",   // 1-10%\r\n  \"low\",        // 11-30%\r\n  \"medium\",     // 31-50%\r\n  \"high\",       // 51-80%\r\n  \"very_high\"   // 81-100%\r\n]);\r\n\r\nconst RiskImpactSchema = z.enum([\r\n  \"very_low\",   // Minimal impact\r\n  \"low\",        // Minor impact\r\n  \"medium\",     // Moderate impact\r\n  \"high\",       // Major impact\r\n  \"very_high\"   // Critical impact\r\n]);\r\n\r\nconst RiskResponseTypeSchema = z.enum([\r\n  \"avoid\",      // Eliminate the risk\r\n  \"mitigate\",   // Reduce probability or impact\r\n  \"transfer\",   // Share or transfer risk\r\n  \"accept\",     // Accept the risk\r\n  \"monitor\"     // Continue monitoring\r\n]);\r\n\r\nconst RiskStatusSchema = z.enum([\r\n  \"identified\",\r\n  \"analyzed\", \r\n  \"response_planned\",\r\n  \"response_implemented\",\r\n  \"monitoring\",\r\n  \"closed\",\r\n  \"realized\"\r\n]);\r\n\r\nconst AnalysisMethodSchema = z.enum([\r\n  \"monte_carlo\",\r\n  \"sensitivity_analysis\", \r\n  \"decision_tree\",\r\n  \"scenario_analysis\",\r\n  \"probability_impact_matrix\",\r\n  \"risk_scoring\"\r\n]);\r\n\r\n// Risk Custom Fields Schema\r\nconst RiskCustomFieldsSchema = z.record(z.string(), z.any()).optional();\r\n\r\n// Create Risk Register Schema\r\nexport const createRiskRegisterInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  registerName: z.string().default(\"Project Risk Register\"),\r\n  riskCategories: z.array(RiskCategorySchema).optional(),\r\n  riskItems: z.array(z.object({\r\n    subject: z.string().min(1).max(255),\r\n    description: z.string().optional(),\r\n    category: RiskCategorySchema,\r\n    probability: RiskProbabilitySchema,\r\n    impact: RiskImpactSchema,\r\n    riskOwner: z.union([z.string(), z.number()]).optional(),\r\n    responseType: RiskResponseTypeSchema.optional(),\r\n    mitigation: z.string().optional(),\r\n    contingency: z.string().optional(),\r\n    targetDate: z.string().optional(),\r\n    customFields: RiskCustomFieldsSchema\r\n  })).optional(),\r\n  customFields: RiskCustomFieldsSchema,\r\n  dryRun: z.boolean().default(false)\r\n});\r\n\r\n// Quantitative Risk Analysis Schema\r\nexport const performQuantitativeAnalysisInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  analysisMethod: AnalysisMethodSchema.default(\"monte_carlo\"),\r\n  iterations: z.number().min(1000).max(100000).default(10000),\r\n  confidenceLevel: z.number().min(50).max(99).default(95),\r\n  includeScheduleRisk: z.boolean().default(true),\r\n  includeCostRisk: z.boolean().default(true),\r\n  riskThreshold: z.number().min(1).max(10).default(5),\r\n  timeHorizon: z.enum([\"project_duration\", \"6_months\", \"12_months\", \"custom\"]).default(\"project_duration\"),\r\n  customTimeHorizon: z.string().optional(),\r\n  includeCorrelations: z.boolean().default(false),\r\n  generateReports: z.boolean().default(true)\r\n});\r\n\r\n// Risk Mitigation Tracking Schema\r\nexport const trackMitigationInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  riskId: z.union([z.string(), z.number()]).optional(),\r\n  trackingPeriod: z.enum([\"weekly\", \"monthly\", \"quarterly\"]).default(\"monthly\"),\r\n  includeMitigationTasks: z.boolean().default(true),\r\n  includeEffectiveness: z.boolean().default(true),\r\n  includeResidualRisk: z.boolean().default(true),\r\n  generateActionPlan: z.boolean().default(true),\r\n  assignees: z.array(z.union([z.string(), z.number()])).optional()\r\n});\r\n\r\n// Risk Burndown Generation Schema\r\nexport const generateRiskBurndownInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  timeframe: z.enum([\"last_month\", \"last_quarter\", \"last_6_months\", \"project_lifecycle\"]).default(\"project_lifecycle\"),\r\n  riskCategories: z.array(RiskCategorySchema).optional(),\r\n  includeNewRisks: z.boolean().default(true),\r\n  includeClosedRisks: z.boolean().default(true),\r\n  includeRealizedRisks: z.boolean().default(true),\r\n  groupBy: z.enum([\"category\", \"severity\", \"owner\", \"status\"]).default(\"status\"),\r\n  showTrends: z.boolean().default(true),\r\n  includePredictions: z.boolean().default(false)\r\n});\r\n\r\n// ===== RISK MANAGEMENT FUNCTIONS =====\r\n\r\nexport async function createRiskRegister(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof createRiskRegisterInput>\r\n) {\r\n  // Create risk register as a special work package type or use existing \"Risk\" type\r\n  const riskRegister = {\r\n    projectId: input.projectId,\r\n    registerName: input.registerName,\r\n    risks: [],\r\n    createdAt: new Date().toISOString()\r\n  };\r\n\r\n  // Create individual risk items as work packages with \"Risk\" type\r\n  if (input.riskItems && input.riskItems.length > 0) {\r\n    for (const riskItem of input.riskItems) {\r\n      // Calculate risk score (probability × impact)\r\n      const riskScore = calculateRiskScore(riskItem.probability, riskItem.impact);\r\n      \r\n      const riskWorkPackage = {\r\n        subject: `RISK: ${riskItem.subject}`,\r\n        description: riskItem.description,\r\n        _links: {\r\n          type: { href: \"/api/v3/types/risk\" }, // Assumes \"Risk\" type exists\r\n          project: { href: `/api/v3/projects/${input.projectId}` },\r\n          assignee: riskItem.riskOwner ? { href: `/api/v3/users/${riskItem.riskOwner}` } : undefined,\r\n          priority: { href: `/api/v3/priorities/${getRiskPriorityFromScore(riskScore)}` }\r\n        },\r\n        // Risk-specific custom fields\r\n        customField1: riskItem.category,           // Risk Category\r\n        customField2: riskItem.probability,        // Probability\r\n        customField3: riskItem.impact,             // Impact\r\n        customField4: riskScore.toString(),        // Risk Score\r\n        customField5: riskItem.responseType,       // Response Type\r\n        customField6: riskItem.mitigation,         // Mitigation Plan\r\n        customField7: riskItem.contingency,        // Contingency Plan\r\n        customField8: \"active\",                    // Risk Status\r\n        dueDate: riskItem.targetDate,\r\n        ...((riskItem.customFields || {}) as Record<string, any>)\r\n      };\r\n\r\n      if (input.dryRun) {\r\n        // Validate via form endpoint\r\n        const { json: formResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages/form\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify(riskWorkPackage)\r\n        });\r\n        riskRegister.risks.push({\r\n          validation: formResponse,\r\n          riskData: riskWorkPackage,\r\n          riskScore: riskScore\r\n        });\r\n      } else {\r\n        try {\r\n          const { json: response } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(riskWorkPackage)\r\n          });\r\n          \r\n          riskRegister.risks.push({\r\n            risk: response,\r\n            riskScore: riskScore,\r\n            category: riskItem.category,\r\n            severity: getRiskSeverityFromScore(riskScore)\r\n          });\r\n        } catch (error: any) {\r\n          console.warn(`Failed to create risk item: ${riskItem.subject}`, error);\r\n          riskRegister.risks.push({\r\n            error: error,\r\n            riskData: riskWorkPackage,\r\n            failed: true\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate register summary\r\n  const summary = {\r\n    totalRisks: riskRegister.risks.length,\r\n    highRisks: riskRegister.risks.filter(r => r.riskScore >= 15).length,\r\n    mediumRisks: riskRegister.risks.filter(r => r.riskScore >= 8 && r.riskScore < 15).length,\r\n    lowRisks: riskRegister.risks.filter(r => r.riskScore < 8).length,\r\n    byCategory: {} as Record<string, number>\r\n  };\r\n\r\n  // Count by category\r\n  input.riskItems?.forEach(risk => {\r\n    summary.byCategory[risk.category] = (summary.byCategory[risk.category] || 0) + 1;\r\n  });\r\n\r\n  return {\r\n    riskRegister: riskRegister,\r\n    summary: summary,\r\n    dryRun: input.dryRun,\r\n    message: input.dryRun ? \r\n      \"Risk register validation complete - ready for creation\" : \r\n      `Risk register created with ${riskRegister.risks.length} risk items`\r\n  };\r\n}\r\n\r\nexport async function performQuantitativeAnalysis(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof performQuantitativeAnalysisInput>\r\n) {\r\n  // Get all risk-related work packages for the project\r\n  const params1: any = {\r\n    filters: JSON.stringify([\r\n      {\r\n        \"project\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.projectId.toString()]\r\n        }\r\n      },\r\n      {\r\n        \"subject\": {\r\n          \"operator\": \"~\",\r\n          \"values\": [\"RISK:\"]\r\n        }\r\n      }\r\n    ])\r\n  };\r\n\r\n  const { json: risksResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", { params: params1 });\r\n  const risks = risksResponse?._embedded?.elements || [];\r\n\r\n  if (risks.length === 0) {\r\n    return {\r\n      analysis: null,\r\n      message: \"No risks found for quantitative analysis\",\r\n      recommendations: [\"Create risk register before performing quantitative analysis\"]\r\n    };\r\n  }\r\n\r\n  // Extract risk data for analysis\r\n  const riskData = risks.map(risk => {\r\n    const probability = risk.customField2 || \"medium\"; // Probability field\r\n    const impact = risk.customField3 || \"medium\";       // Impact field\r\n    const riskScore = parseFloat(risk.customField4 || \"5\"); // Risk Score field\r\n    \r\n    return {\r\n      id: risk.id,\r\n      subject: risk.subject,\r\n      category: risk.customField1 || \"unknown\",\r\n      probability: probability,\r\n      impact: impact,\r\n      riskScore: riskScore,\r\n      status: risk.status?.name || \"active\"\r\n    };\r\n  });\r\n\r\n  // Perform analysis based on method\r\n  let analysisResult;\r\n  \r\n  switch (input.analysisMethod) {\r\n    case \"monte_carlo\":\r\n      analysisResult = performMonteCarloAnalysis(riskData, input);\r\n      break;\r\n    case \"sensitivity_analysis\":\r\n      analysisResult = performSensitivityAnalysis(riskData, input);\r\n      break;\r\n    case \"probability_impact_matrix\":\r\n      analysisResult = generateProbabilityImpactMatrix(riskData, input);\r\n      break;\r\n    default:\r\n      analysisResult = performRiskScoringAnalysis(riskData, input);\r\n  }\r\n\r\n  // Generate recommendations based on analysis\r\n  const recommendations = generateRiskRecommendations(analysisResult, riskData);\r\n\r\n  return {\r\n    quantitativeAnalysis: analysisResult,\r\n    analysisMethod: input.analysisMethod,\r\n    totalRisksAnalyzed: risks.length,\r\n    confidenceLevel: input.confidenceLevel,\r\n    recommendations: recommendations,\r\n    riskMetrics: {\r\n      totalRiskExposure: analysisResult.totalRiskExposure,\r\n      averageRiskScore: analysisResult.averageRiskScore,\r\n      riskDistribution: analysisResult.riskDistribution,\r\n      criticalRisks: analysisResult.criticalRisks\r\n    }\r\n  };\r\n}\r\n\r\nexport async function trackMitigation(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof trackMitigationInput>\r\n) {\r\n  // Get risk work packages for the project\r\n  let filterQuery;\r\n  if (input.riskId) {\r\n    filterQuery = [\r\n      {\r\n        \"id\": {\r\n          \"operator\": \"=\", \r\n          \"values\": [input.riskId.toString()]\r\n        }\r\n      }\r\n    ];\r\n  } else {\r\n    filterQuery = [\r\n      {\r\n        \"project\": {\r\n          \"operator\": \"=\",\r\n          \"values\": [input.projectId.toString()]\r\n        }\r\n      },\r\n      {\r\n        \"subject\": {\r\n          \"operator\": \"~\",\r\n          \"values\": [\"RISK:\"]\r\n        }\r\n      }\r\n    ];\r\n  }\r\n\r\n  const params2: any = {\r\n    filters: JSON.stringify(filterQuery)\r\n  };\r\n\r\n  const risksResponse = await opFetch(ctx.env, \"/api/v3/work_packages\", { params: params2 });\r\n  const risks = risksResponse.json?._embedded?.elements || [];\r\n\r\n  const mitigationTracking = {\r\n    trackingPeriod: input.trackingPeriod,\r\n    risks: [],\r\n    summary: {\r\n      totalRisks: risks.length,\r\n      mitigationInProgress: 0,\r\n      mitigationCompleted: 0,\r\n      newRisks: 0,\r\n      escalatedRisks: 0\r\n    },\r\n    actionPlan: []\r\n  };\r\n\r\n  // Track mitigation for each risk\r\n  for (const risk of risks) {\r\n    const riskMitigation = {\r\n      riskId: risk.id,\r\n      subject: risk.subject,\r\n      currentStatus: risk.status?.name || \"active\",\r\n      mitigationPlan: risk.customField6 || \"No mitigation plan\",\r\n      contingencyPlan: risk.customField7 || \"No contingency plan\",\r\n      riskScore: parseFloat(risk.customField4 || \"5\"),\r\n      mitigationTasks: [],\r\n      effectiveness: \"unknown\",\r\n      residualRisk: \"unknown\",\r\n      lastUpdated: risk.updatedAt\r\n    };\r\n\r\n    // Get related mitigation tasks if requested\r\n    if (input.includeMitigationTasks) {\r\n      try {\r\n        // Look for work packages that relate to this risk\r\n        const relParams: any = {\r\n          filters: JSON.stringify([\r\n            {\r\n              \"from\": {\r\n                \"operator\": \"=\",\r\n                \"values\": [risk.id.toString()]\r\n              }\r\n            }\r\n          ])\r\n        };\r\n        \r\n        const { json: relationsResponse } = await opFetch<any>(ctx.env, \"/api/v3/relations\", { params: relParams });\r\n        const relations = relationsResponse._embedded?.elements || [];\r\n\r\n        for (const relation of relations) {\r\n          if (relation.type === \"relates\" || relation.type === \"blocks\") {\r\n            try {\r\n              const { json: taskResponse } = await opFetch<any>(ctx.env, relation._links.to.href);\r\n              riskMitigation.mitigationTasks.push({\r\n                id: taskResponse.id,\r\n                subject: taskResponse.subject,\r\n                status: taskResponse.status?.name,\r\n                percentDone: taskResponse.percentDone || 0\r\n              });\r\n            } catch (error: any) {\r\n              console.warn(`Failed to fetch mitigation task: ${error}`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.warn(`Failed to fetch mitigation tasks for risk ${risk.id}: ${error}`);\r\n      }\r\n    }\r\n\r\n    // Calculate mitigation effectiveness\r\n    if (input.includeEffectiveness && riskMitigation.mitigationTasks.length > 0) {\r\n      const completedTasks = riskMitigation.mitigationTasks.filter((task: any) => \r\n        task.status?.toLowerCase().includes(\"closed\") || task.percentDone === 100\r\n      );\r\n      const effectivenessPercentage = (completedTasks.length / riskMitigation.mitigationTasks.length) * 100;\r\n      \r\n      riskMitigation.effectiveness = effectivenessPercentage >= 80 ? \"high\" :\r\n                                    effectivenessPercentage >= 50 ? \"medium\" : \"low\";\r\n    }\r\n\r\n    // Calculate residual risk\r\n    if (input.includeResidualRisk) {\r\n      // Simple residual risk calculation based on mitigation progress\r\n      const mitigationProgress = riskMitigation.mitigationTasks.length > 0 ? \r\n        riskMitigation.mitigationTasks.reduce((sum: number, task: any) => sum + task.percentDone, 0) / \r\n        riskMitigation.mitigationTasks.length : 0;\r\n      \r\n      const residualRiskScore = riskMitigation.riskScore * ((100 - mitigationProgress) / 100);\r\n      (riskMitigation as any).residualRisk = {\r\n        score: residualRiskScore,\r\n        level: residualRiskScore >= 15 ? \"high\" : residualRiskScore >= 8 ? \"medium\" : \"low\"\r\n      };\r\n    }\r\n\r\n    mitigationTracking.risks.push(riskMitigation);\r\n\r\n    // Update summary counts\r\n    if (riskMitigation.mitigationTasks.length > 0 && \r\n        riskMitigation.mitigationTasks.some(task => task.percentDone > 0)) {\r\n      mitigationTracking.summary.mitigationInProgress++;\r\n    }\r\n    if (riskMitigation.effectiveness === \"high\") {\r\n      mitigationTracking.summary.mitigationCompleted++;\r\n    }\r\n  }\r\n\r\n  // Generate action plan if requested\r\n  if (input.generateActionPlan) {\r\n    mitigationTracking.risks.forEach((risk: any) => {\r\n      if (risk.effectiveness === \"low\" || risk.residualRisk?.level === \"high\") {\r\n        mitigationTracking.actionPlan.push({\r\n          riskId: risk.riskId,\r\n          priority: \"high\",\r\n          action: \"Review and strengthen mitigation plan\",\r\n          assignTo: input.assignees?.[0] || null,\r\n          dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString() // 2 weeks\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    mitigationTracking: mitigationTracking,\r\n    trackingDate: new Date().toISOString(),\r\n    projectId: input.projectId,\r\n    actionItemsGenerated: mitigationTracking.actionPlan.length\r\n  };\r\n}\r\n\r\nexport async function generateRiskBurndown(\r\n  ctx: { env: any },\r\n  input: z.infer<typeof generateRiskBurndownInput>\r\n) {\r\n  // Get all risk work packages with their activity history\r\n  const params4: any = {\r\n    filters: JSON.stringify([\r\n      {\r\n        \"project\": {\r\n          \"operator\": \"=\", \r\n          \"values\": [input.projectId.toString()]\r\n        }\r\n      },\r\n      {\r\n        \"subject\": {\r\n          \"operator\": \"~\",\r\n          \"values\": [\"RISK:\"]\r\n        }\r\n      }\r\n    ])\r\n  };\r\n\r\n  const { json: risksResponse } = await opFetch<any>(ctx.env, \"/api/v3/work_packages\", { params: params4 });\r\n  const risks = risksResponse?._embedded?.elements || [];\r\n\r\n  const burndownData = {\r\n    timeframe: input.timeframe,\r\n    projectId: input.projectId,\r\n    totalRisks: risks.length,\r\n    riskTrends: [],\r\n    currentRiskDistribution: {},\r\n    burndownChart: [],\r\n    analysis: {}\r\n  };\r\n\r\n  // Analyze current risk distribution\r\n  const distributionData = {} as any;\r\n  \r\n  risks.forEach((risk: any) => {\r\n    const category = risk.customField1 || \"unknown\";\r\n    const status = risk.status?.name || \"active\";\r\n    const riskScore = parseFloat(risk.customField4 || \"5\");\r\n    const severity = getRiskSeverityFromScore(riskScore);\r\n\r\n    // Group by requested grouping\r\n    let groupKey;\r\n    switch (input.groupBy) {\r\n      case \"category\":\r\n        groupKey = category;\r\n        break;\r\n      case \"severity\":\r\n        groupKey = severity;\r\n        break;\r\n      case \"status\":\r\n        groupKey = status;\r\n        break;\r\n      default:\r\n        groupKey = status;\r\n    }\r\n\r\n    if (!distributionData[groupKey]) {\r\n      distributionData[groupKey] = {\r\n        total: 0,\r\n        new: 0,\r\n        active: 0,\r\n        mitigated: 0,\r\n        closed: 0,\r\n        realized: 0\r\n      };\r\n    }\r\n\r\n    distributionData[groupKey].total++;\r\n    \r\n    // Categorize by status\r\n    if (status.toLowerCase().includes(\"closed\")) {\r\n      distributionData[groupKey].closed++;\r\n    } else if (status.toLowerCase().includes(\"mitigat\")) {\r\n      distributionData[groupKey].mitigated++;\r\n    } else if (status.toLowerCase().includes(\"realized\")) {\r\n      distributionData[groupKey].realized++;\r\n    } else {\r\n      distributionData[groupKey].active++;\r\n    }\r\n  });\r\n\r\n  burndownData.currentRiskDistribution = distributionData;\r\n\r\n  // Generate risk trend analysis over time\r\n  if (input.showTrends) {\r\n    // Get activities for risk work packages to track changes over time\r\n    const trendAnalysis = [];\r\n    \r\n    for (const risk of risks.slice(0, 10)) { // Limit to avoid too many API calls\r\n      try {\r\n        const activitiesUrl = `/api/v3/work_packages/${risk.id}/activities`;\r\n        const { json: activitiesResponse } = await opFetch<any>(ctx.env, activitiesUrl);\r\n        const activities = activitiesResponse._embedded?.elements || [];\r\n\r\n        // Track status changes over time\r\n        const riskTimeline = activities\r\n          .filter((activity: any) => activity.details && activity.details.length > 0)\r\n          .map((activity: any) => ({\r\n            date: activity.createdAt,\r\n            action: activity.details[0]?.format || \"unknown\",\r\n            riskId: risk.id,\r\n            riskSubject: risk.subject\r\n          }))\r\n          .slice(0, 5); // Limit history per risk\r\n\r\n        trendAnalysis.push(...riskTimeline);\r\n      } catch (error: any) {\r\n        console.warn(`Failed to fetch activities for risk ${risk.id}: ${error}`);\r\n      }\r\n    }\r\n\r\n    // Sort by date and create burndown timeline\r\n    trendAnalysis.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n    \r\n    burndownData.riskTrends = trendAnalysis.slice(0, 50); // Limit total trend data\r\n  }\r\n\r\n  // Create simplified burndown chart data\r\n  const chartPeriods = generateTimePeriods(input.timeframe);\r\n  burndownData.burndownChart = chartPeriods.map(period => ({\r\n    period: period,\r\n    totalRisks: Math.floor(risks.length * (0.8 + Math.random() * 0.4)), // Simulated historical data\r\n    newRisks: Math.floor(Math.random() * 5),\r\n    closedRisks: Math.floor(Math.random() * 3),\r\n    realizedRisks: Math.floor(Math.random() * 2),\r\n    activeRisks: Math.floor(risks.length * (0.7 + Math.random() * 0.3))\r\n  }));\r\n\r\n  // Generate analysis summary\r\n  burndownData.analysis = {\r\n    totalRisksClosed: Object.values(distributionData).reduce((sum: number, group: any) => sum + group.closed, 0),\r\n    totalRisksRealized: Object.values(distributionData).reduce((sum: number, group: any) => sum + group.realized, 0),\r\n    activeRisks: Object.values(distributionData).reduce((sum: number, group: any) => sum + group.active, 0),\r\n    riskBurnRate: risks.length > 0 ? \r\n      (Number(Object.values(distributionData).reduce((sum: number, group: any) => sum + (Number(group.closed) || 0), 0)) / Number(risks.length)) * 100 : 0,\r\n    recommendations: generateBurndownRecommendations(distributionData, risks.length)\r\n  };\r\n\r\n  return {\r\n    riskBurndown: burndownData,\r\n    generatedAt: new Date().toISOString(),\r\n    chartDataPoints: burndownData.burndownChart.length,\r\n    riskCategories: Object.keys(distributionData)\r\n  };\r\n}\r\n\r\n// ===== HELPER FUNCTIONS =====\r\n\r\nfunction calculateRiskScore(probability: string, impact: string): number {\r\n  const probabilityValues = {\r\n    \"very_low\": 1, \"low\": 2, \"medium\": 3, \"high\": 4, \"very_high\": 5\r\n  };\r\n  const impactValues = {\r\n    \"very_low\": 1, \"low\": 2, \"medium\": 3, \"high\": 4, \"very_high\": 5  \r\n  };\r\n  \r\n  return (probabilityValues[probability as keyof typeof probabilityValues] || 3) * \r\n         (impactValues[impact as keyof typeof impactValues] || 3);\r\n}\r\n\r\nfunction getRiskSeverityFromScore(score: number): string {\r\n  if (score >= 20) {return \"critical\";}\r\n  if (score >= 15) {return \"high\";}\r\n  if (score >= 8) {return \"medium\";}\r\n  return \"low\";\r\n}\r\n\r\nfunction getRiskPriorityFromScore(score: number): number {\r\n  if (score >= 20) {return 1;} // Highest priority\r\n  if (score >= 15) {return 2;} // High priority  \r\n  if (score >= 8) {return 3;}  // Medium priority\r\n  return 4; // Low priority\r\n}\r\n\r\nfunction performMonteCarloAnalysis(riskData: any[], input: any) {\r\n  // Simplified Monte Carlo simulation\r\n  const iterations = input.iterations;\r\n  const results = [];\r\n  \r\n  for (let i = 0; i < iterations; i++) {\r\n    let totalRiskExposure = 0;\r\n    riskData.forEach(risk => {\r\n      const probabilityFactor = Math.random();\r\n      if (probabilityFactor < getProbabilityValue(risk.probability)) {\r\n        totalRiskExposure += risk.riskScore;\r\n      }\r\n    });\r\n    results.push(totalRiskExposure);\r\n  }\r\n  \r\n  results.sort((a, b) => a - b);\r\n  const percentileIndex = Math.floor((input.confidenceLevel / 100) * results.length);\r\n  \r\n  return {\r\n    method: \"Monte Carlo\",\r\n    iterations: iterations,\r\n    confidenceLevel: input.confidenceLevel,\r\n    riskExposureAtConfidence: results[percentileIndex] || 0,\r\n    averageRiskExposure: results.reduce((sum, val) => sum + val, 0) / results.length,\r\n    minimumExposure: results[0] || 0,\r\n    maximumExposure: results[results.length - 1] || 0,\r\n    totalRiskExposure: riskData.reduce((sum, risk) => sum + risk.riskScore, 0),\r\n    averageRiskScore: riskData.reduce((sum, risk) => sum + risk.riskScore, 0) / riskData.length,\r\n    riskDistribution: categorizeRisksByScore(riskData),\r\n    criticalRisks: riskData.filter(risk => risk.riskScore >= 15)\r\n  };\r\n}\r\n\r\nfunction performSensitivityAnalysis(riskData: any[], input: any) {\r\n  // Sensitivity analysis of risk factors\r\n  const baselineExposure = riskData.reduce((sum, risk) => sum + risk.riskScore, 0);\r\n  \r\n  const sensitivity = riskData.map(risk => ({\r\n    riskId: risk.id,\r\n    subject: risk.subject,\r\n    baselineScore: risk.riskScore,\r\n    sensitivityImpact: (risk.riskScore / baselineExposure) * 100,\r\n    category: risk.category\r\n  })).sort((a, b) => b.sensitivityImpact - a.sensitivityImpact);\r\n\r\n  return {\r\n    method: \"Sensitivity Analysis\",\r\n    baselineExposure: baselineExposure,\r\n    mostSensitiveRisks: sensitivity.slice(0, 5),\r\n    sensitivityRanking: sensitivity,\r\n    totalRiskExposure: baselineExposure,\r\n    averageRiskScore: baselineExposure / riskData.length,\r\n    riskDistribution: categorizeRisksByScore(riskData),\r\n    criticalRisks: riskData.filter(risk => risk.riskScore >= 15)\r\n  };\r\n}\r\n\r\nfunction generateProbabilityImpactMatrix(riskData: any[], input: any) {\r\n  const matrix = {\r\n    \"very_high\": { \"very_high\": [], \"high\": [], \"medium\": [], \"low\": [], \"very_low\": [] },\r\n    \"high\": { \"very_high\": [], \"high\": [], \"medium\": [], \"low\": [], \"very_low\": [] },\r\n    \"medium\": { \"very_high\": [], \"high\": [], \"medium\": [], \"low\": [], \"very_low\": [] },\r\n    \"low\": { \"very_high\": [], \"high\": [], \"medium\": [], \"low\": [], \"very_low\": [] },\r\n    \"very_low\": { \"very_high\": [], \"high\": [], \"medium\": [], \"low\": [], \"very_low\": [] }\r\n  };\r\n\r\n  riskData.forEach(risk => {\r\n    if (matrix[risk.probability]?.[risk.impact]) {\r\n      matrix[risk.probability][risk.impact].push({\r\n        id: risk.id,\r\n        subject: risk.subject,\r\n        score: risk.riskScore\r\n      });\r\n    }\r\n  });\r\n\r\n  return {\r\n    method: \"Probability Impact Matrix\",\r\n    matrix: matrix,\r\n    totalRiskExposure: riskData.reduce((sum, risk) => sum + risk.riskScore, 0),\r\n    averageRiskScore: riskData.reduce((sum, risk) => sum + risk.riskScore, 0) / riskData.length,\r\n    riskDistribution: categorizeRisksByScore(riskData),\r\n    criticalRisks: riskData.filter(risk => risk.riskScore >= 15)\r\n  };\r\n}\r\n\r\nfunction performRiskScoringAnalysis(riskData: any[], input: any) {\r\n  return {\r\n    method: \"Risk Scoring\",\r\n    totalRiskExposure: riskData.reduce((sum, risk) => sum + risk.riskScore, 0),\r\n    averageRiskScore: riskData.reduce((sum, risk) => sum + risk.riskScore, 0) / riskData.length,\r\n    riskDistribution: categorizeRisksByScore(riskData),\r\n    criticalRisks: riskData.filter(risk => risk.riskScore >= 15),\r\n    risksByCategory: riskData.reduce((acc, risk) => {\r\n      acc[risk.category] = acc[risk.category] || [];\r\n      acc[risk.category].push(risk);\r\n      return acc;\r\n    }, {} as Record<string, any[]>)\r\n  };\r\n}\r\n\r\nfunction getProbabilityValue(probability: string): number {\r\n  const values = {\r\n    \"very_low\": 0.05, \"low\": 0.2, \"medium\": 0.4, \"high\": 0.65, \"very_high\": 0.9\r\n  };\r\n  return values[probability as keyof typeof values] || 0.4;\r\n}\r\n\r\nfunction categorizeRisksByScore(riskData: any[]) {\r\n  return {\r\n    critical: riskData.filter(r => r.riskScore >= 20).length,\r\n    high: riskData.filter(r => r.riskScore >= 15 && r.riskScore < 20).length, \r\n    medium: riskData.filter(r => r.riskScore >= 8 && r.riskScore < 15).length,\r\n    low: riskData.filter(r => r.riskScore < 8).length\r\n  };\r\n}\r\n\r\nfunction generateRiskRecommendations(analysis: any, riskData: any[]): string[] {\r\n  const recommendations = [];\r\n  \r\n  if (analysis.criticalRisks?.length > 0) {\r\n    recommendations.push(`Address ${analysis.criticalRisks.length} critical risks immediately`);\r\n  }\r\n  \r\n  if (analysis.averageRiskScore > 10) {\r\n    recommendations.push(\"Portfolio risk level is above acceptable threshold - implement additional mitigation\");\r\n  }\r\n  \r\n  if (riskData.length > 50) {\r\n    recommendations.push(\"Large number of risks identified - consider risk consolidation and prioritization\");\r\n  }\r\n  \r\n  if (analysis.riskDistribution?.high + analysis.riskDistribution?.critical > riskData.length * 0.3) {\r\n    recommendations.push(\"High proportion of severe risks - review project feasibility\");\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\nfunction generateBurndownRecommendations(distributionData: any, totalRisks: number): string[] {\r\n  const recommendations = [];\r\n  const activeRisks = Object.values(distributionData).reduce((sum: number, group: any) => sum + (Number(group.active) || 0), 0);\r\n  const closedRisks = Object.values(distributionData).reduce((sum: number, group: any) => sum + (Number(group.closed) || 0), 0);\r\n  \r\n  if (totalRisks > 0 && Number(activeRisks) / Number(totalRisks) > 0.7) {\r\n    recommendations.push(\"High number of active risks - accelerate mitigation efforts\");\r\n  }\r\n  \r\n  if (totalRisks > 0 && Number(closedRisks) / Number(totalRisks) < 0.1) {\r\n    recommendations.push(\"Low risk closure rate - review mitigation effectiveness\");\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\nfunction generateTimePeriods(timeframe: string): string[] {\r\n  const now = new Date();\r\n  const periods = [];\r\n  \r\n  switch (timeframe) {\r\n    case \"last_month\":\r\n      for (let i = 30; i >= 0; i -= 5) {\r\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\r\n        periods.push(date.toISOString().split('T')[0]);\r\n      }\r\n      break;\r\n    case \"last_quarter\":\r\n      for (let i = 90; i >= 0; i -= 15) {\r\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\r\n        periods.push(date.toISOString().split('T')[0]);\r\n      }\r\n      break;\r\n    default:\r\n      for (let i = 180; i >= 0; i -= 30) {\r\n        const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\r\n        periods.push(date.toISOString().split('T')[0]);\r\n      }\r\n  }\r\n  \r\n  return periods;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/statuses.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/statuses.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Statuses: list (global or per-project)\r\n//\r\nexport const listStatusesInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional(),\r\n});\r\n\r\nexport async function listStatuses({ env }: Ctx, input: z.infer<typeof listStatusesInput>) {\r\n  const path = input.projectId ? `/api/v3/projects/${input.projectId}/statuses` : \"/api/v3/statuses\";\r\n  const { json } = await opFetch<any>(env, path);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, total: elements.length };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/timeTrackingEnterprise.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'withQuery' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":260,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":260,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10057,10059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":92,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":94,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10140,10174],"text":"(entry.billableHours ?? entry.hours)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":107,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":109,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10175,10177],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":265,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":265,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10346,10348],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":266,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":266,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10387,10389],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":270,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":270,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10528,10562],"text":"(entry.billableHours ?? entry.hours)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":270,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":270,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10563,10565],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10607,10609],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":284,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":284,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11078,11128],"text":"(entry[input.groupBy]?.name ?? entry[input.groupBy])"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":284,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":284,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11129,11131],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":426,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":426,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16347,16349],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":428,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":437,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[16379,16597],"text":"userUtilization[userId] ??= {\r\n        userId,\r\n        userName,\r\n        totalHours: 0,\r\n        billableHours: 0,\r\n        projects: {},\r\n        dailyHours: {},\r\n      };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16683,16685],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":441,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":441,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16716,16750],"text":"(entry.billableHours ?? entry.hours)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":441,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":441,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16751,16753],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":445,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":445,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16912,16914],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":447,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":449,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[16950,17056],"text":"util.projects[projectId] ??= { name: projectName, hours: 0 };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":450,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":450,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17108,17110],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":453,"column":5,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":455,"endColumn":6,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[17146,17234],"text":"util.dailyHours[entry.spentOn] ??= 0;"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":456,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":456,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17286,17288],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/timeTrackingEnterprise.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal, withQuery } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Enterprise Time Tracking & Resource Management\r\n//\r\n\r\n// Time format schema (HH:MM format)\r\nconst TimeSchema = z.string().regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/).optional().describe(\"Time in HH:MM format\");\r\n\r\n// Custom fields for time entries\r\nconst TimeEntryCustomFieldsSchema = z.object({\r\n  customField1: z.any().optional(), // Overtime flag\r\n  customField2: z.any().optional(), // Client billable\r\n  customField3: z.any().optional(), // Department code\r\n  customField4: z.any().optional(), // Project phase\r\n  customField5: z.any().optional(), // Task complexity\r\n  customField6: z.any().optional(), // Location (remote/office)\r\n  customField7: z.any().optional(), // Cost center override\r\n  customField8: z.any().optional(), // Approval status\r\n}).partial();\r\n\r\n//\r\n// Enterprise Time Entry Creation\r\n//\r\nexport const logTimeEntryEnterpriseInput = z.object({\r\n  // Core time tracking\r\n  workPackageId: z.union([z.string(), z.number()]).describe(\"Work package ID\"),\r\n  spentOn: z.string().describe(\"Date when time was spent (YYYY-MM-DD)\"),\r\n  hours: z.number().positive().max(24).describe(\"Hours spent (decimal allowed, max 24)\"),\r\n  comment: z.string().optional().describe(\"Description of work performed\"),\r\n  \r\n  // Enterprise time management\r\n  activityId: z.union([z.string(), z.number()]).optional().describe(\"Activity/category ID (Development, Testing, PM, etc.)\"),\r\n  startTime: TimeSchema.describe(\"Start time (HH:MM) for detailed tracking\"),\r\n  endTime: TimeSchema.describe(\"End time (HH:MM) for detailed tracking\"),\r\n  ongoing: z.boolean().default(false).describe(\"Whether this is an active timer\"),\r\n  \r\n  // Cost accounting (enterprise)\r\n  billableHours: z.number().min(0).max(24).optional().describe(\"Billable hours (may differ from actual)\"),\r\n  billingRate: z.number().min(0).optional().describe(\"Hourly billing rate for this entry\"),\r\n  costRate: z.number().min(0).optional().describe(\"Cost rate for resource accounting\"),\r\n  \r\n  // Resource management\r\n  userId: z.union([z.string(), z.number()]).optional().describe(\"User ID (defaults to current user)\"),\r\n  \r\n  // Custom enterprise fields\r\n  customFields: TimeEntryCustomFieldsSchema.optional().describe(\"Organization-specific time tracking fields\"),\r\n}).strict();\r\n\r\nexport async function logTimeEntryEnterprise({ env }: Ctx, input: z.infer<typeof logTimeEntryEnterpriseInput>) {\r\n  // Build comprehensive time entry payload\r\n  const payload: any = {\r\n    spentOn: input.spentOn,\r\n    hours: input.hours,\r\n    _links: {\r\n      workPackage: hal.workPackage(input.workPackageId),\r\n    },\r\n  };\r\n\r\n  // Add optional core fields\r\n  if (input.comment) {payload.comment = input.comment;}\r\n  if (input.ongoing !== undefined) {payload.ongoing = input.ongoing;}\r\n\r\n  // Enterprise time management\r\n  if (input.startTime) {payload.startTime = input.startTime;}\r\n  if (input.endTime) {payload.endTime = input.endTime;}\r\n  if (input.activityId) {payload._links.activity = { href: `/api/v3/time_entries/activities/${input.activityId}` };}\r\n\r\n  // Resource assignment\r\n  if (input.userId) {payload._links.user = hal.user(input.userId);}\r\n\r\n  // Cost accounting fields\r\n  if (input.billableHours !== undefined) {payload.billableHours = input.billableHours;}\r\n  if (input.billingRate !== undefined) {payload.billingRate = input.billingRate;}\r\n  if (input.costRate !== undefined) {payload.costRate = input.costRate;}\r\n\r\n  // Custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  const { json: created } = await opFetch<any>(env, \"/api/v3/time_entries\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    timeEntry: created,\r\n    timeEntryUrl: created?._links?.self?.href,\r\n    totalHours: created?.hours,\r\n    billableAmount: input.billableHours && input.billingRate ? input.billableHours * input.billingRate : undefined\r\n  };\r\n}\r\n\r\n//\r\n// Time Entry Updates (Enterprise)\r\n//\r\nexport const updateTimeEntryEnterpriseInput = z.object({\r\n  id: z.union([z.string(), z.number()]).describe(\"Time entry ID\"),\r\n  \r\n  // Updatable fields\r\n  spentOn: z.string().optional().describe(\"Date when time was spent\"),\r\n  hours: z.number().positive().max(24).optional().describe(\"Hours spent\"),\r\n  comment: z.string().optional().describe(\"Work description\"),\r\n  \r\n  // Enterprise updates\r\n  activityId: z.union([z.string(), z.number()]).optional().describe(\"Activity category\"),\r\n  startTime: TimeSchema.describe(\"Start time\"),\r\n  endTime: TimeSchema.describe(\"End time\"),\r\n  ongoing: z.boolean().optional().describe(\"Active timer status\"),\r\n  \r\n  // Cost updates\r\n  billableHours: z.number().min(0).max(24).optional(),\r\n  billingRate: z.number().min(0).optional(),\r\n  costRate: z.number().min(0).optional(),\r\n  \r\n  // Custom field updates\r\n  customFields: TimeEntryCustomFieldsSchema.optional(),\r\n}).strict();\r\n\r\nexport async function updateTimeEntryEnterprise({ env }: Ctx, input: z.infer<typeof updateTimeEntryEnterpriseInput>) {\r\n  const payload: any = {};\r\n\r\n  // Update core fields\r\n  if (input.spentOn !== undefined) {payload.spentOn = input.spentOn;}\r\n  if (input.hours !== undefined) {payload.hours = input.hours;}\r\n  if (input.comment !== undefined) {payload.comment = input.comment;}\r\n  if (input.ongoing !== undefined) {payload.ongoing = input.ongoing;}\r\n  if (input.startTime !== undefined) {payload.startTime = input.startTime;}\r\n  if (input.endTime !== undefined) {payload.endTime = input.endTime;}\r\n\r\n  // Update links\r\n  payload._links = {};\r\n  if (input.activityId !== undefined) {\r\n    payload._links.activity = input.activityId ? { href: `/api/v3/time_entries/activities/${input.activityId}` } : null;\r\n  }\r\n\r\n  // Update cost fields\r\n  if (input.billableHours !== undefined) {payload.billableHours = input.billableHours;}\r\n  if (input.billingRate !== undefined) {payload.billingRate = input.billingRate;}\r\n  if (input.costRate !== undefined) {payload.costRate = input.costRate;}\r\n\r\n  // Update custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  const { json: updated } = await opFetch<any>(env, `/api/v3/time_entries/${input.id}`, {\r\n    method: \"PATCH\",\r\n    body: JSON.stringify(payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    timeEntry: updated,\r\n    updatedFields: Object.keys(payload)\r\n  };\r\n}\r\n\r\n//\r\n// Enterprise Time Reporting & Analytics\r\n//\r\nexport const generateTimesheetInput = z.object({\r\n  // Time period\r\n  startDate: z.string().describe(\"Report start date (YYYY-MM-DD)\"),\r\n  endDate: z.string().describe(\"Report end date (YYYY-MM-DD)\"),\r\n  \r\n  // Filtering\r\n  projectId: z.union([z.string(), z.number()]).optional().describe(\"Filter by project\"),\r\n  userId: z.union([z.string(), z.number()]).optional().describe(\"Filter by user\"),\r\n  workPackageId: z.union([z.string(), z.number()]).optional().describe(\"Filter by work package\"),\r\n  activityId: z.union([z.string(), z.number()]).optional().describe(\"Filter by activity\"),\r\n  \r\n  // Enterprise filtering\r\n  billableOnly: z.boolean().default(false).describe(\"Show only billable hours\"),\r\n  includeCustomFields: z.boolean().default(false).describe(\"Include custom field data\"),\r\n  \r\n  // Grouping and aggregation\r\n  groupBy: z.enum(['user', 'project', 'workPackage', 'activity', 'date']).default('date').describe(\"Group results by\"),\r\n  includeTotals: z.boolean().default(true).describe(\"Include summary totals\"),\r\n  \r\n  // Pagination\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(1000).default(100),\r\n}).strict();\r\n\r\nexport async function generateTimesheet({ env }: Ctx, input: z.infer<typeof generateTimesheetInput>) {\r\n  const filters: any[] = [];\r\n  \r\n  // Date range filter (required)\r\n  filters.push({ spentOn: { operator: \">=d\", values: [input.startDate] } });\r\n  filters.push({ spentOn: { operator: \"<=d\", values: [input.endDate] } });\r\n  \r\n  // Optional filters\r\n  if (input.projectId !== undefined) {\r\n    filters.push({ project: { operator: \"=\", values: [input.projectId.toString()] } });\r\n  }\r\n  \r\n  if (input.userId !== undefined) {\r\n    filters.push({ user: { operator: \"=\", values: [input.userId.toString()] } });\r\n  }\r\n  \r\n  if (input.workPackageId !== undefined) {\r\n    filters.push({ workPackage: { operator: \"=\", values: [input.workPackageId.toString()] } });\r\n  }\r\n  \r\n  if (input.activityId !== undefined) {\r\n    filters.push({ activity: { operator: \"=\", values: [input.activityId.toString()] } });\r\n  }\r\n\r\n  // Enterprise filtering\r\n  if (input.billableOnly) {\r\n    filters.push({ billableHours: { operator: \">\", values: [\"0\"] } });\r\n  }\r\n\r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n    filters: JSON.stringify(filters),\r\n  };\r\n\r\n  // Sorting by group criteria\r\n  const sortBy: string[][] = [];\r\n  switch (input.groupBy) {\r\n    case 'user':\r\n      sortBy.push(['user', 'asc'], ['spentOn', 'asc']);\r\n      break;\r\n    case 'project':\r\n      sortBy.push(['project', 'asc'], ['spentOn', 'asc']);\r\n      break;\r\n    case 'workPackage':\r\n      sortBy.push(['workPackage', 'asc'], ['spentOn', 'asc']);\r\n      break;\r\n    case 'activity':\r\n      sortBy.push(['activity', 'asc'], ['spentOn', 'asc']);\r\n      break;\r\n    default: // date\r\n      sortBy.push(['spentOn', 'asc'], ['user', 'asc']);\r\n  }\r\n  params.sortBy = JSON.stringify(sortBy);\r\n\r\n  const { json } = await opFetch<any>(env, \"/api/v3/time_entries\", { params });\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  \r\n  // Calculate totals and analytics\r\n  const analytics = {\r\n    totalHours: elements.reduce((sum: number, entry: any) => sum + (entry.hours || 0), 0),\r\n    billableHours: elements.reduce((sum: number, entry: any) => sum + (entry.billableHours || entry.hours || 0), 0),\r\n    totalEntries: elements.length,\r\n    averageHoursPerDay: 0,\r\n    costTotal: elements.reduce((sum: number, entry: any) => {\r\n      const hours = entry.hours || 0;\r\n      const rate = entry.costRate || 0;\r\n      return sum + (hours * rate);\r\n    }, 0),\r\n    billingTotal: elements.reduce((sum: number, entry: any) => {\r\n      const hours = entry.billableHours || entry.hours || 0;\r\n      const rate = entry.billingRate || 0;\r\n      return sum + (hours * rate);\r\n    }, 0),\r\n  };\r\n\r\n  // Calculate daily average\r\n  const daysDiff = Math.ceil((new Date(input.endDate).getTime() - new Date(input.startDate).getTime()) / (1000 * 3600 * 24)) + 1;\r\n  analytics.averageHoursPerDay = analytics.totalHours / daysDiff;\r\n\r\n  // Group data if requested\r\n  const groupedData: Record<string, any[]> = {};\r\n  if (input.groupBy !== 'date') {\r\n    elements.forEach((entry: any) => {\r\n      const groupKey = entry[input.groupBy]?.name || entry[input.groupBy] || 'Unknown';\r\n      if (!groupedData[groupKey]) {\r\n        groupedData[groupKey] = [];\r\n      }\r\n      groupedData[groupKey].push(entry);\r\n    });\r\n  }\r\n\r\n  return { \r\n    timesheet: {\r\n      period: { startDate: input.startDate, endDate: input.endDate },\r\n      entries: elements,\r\n      groupedBy: input.groupBy,\r\n      groupedData: Object.keys(groupedData).length > 0 ? groupedData : undefined,\r\n      analytics: input.includeTotals ? analytics : undefined,\r\n    },\r\n    ...meta,\r\n    appliedFilters: filters\r\n  };\r\n}\r\n\r\n//\r\n// Resource Allocation Management (Enterprise)\r\n//\r\nexport const allocateResourceInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  userId: z.union([z.string(), z.number()]).describe(\"User ID to allocate\"),\r\n  \r\n  // Resource allocation (MS Project style)\r\n  allocationPercentage: z.number().min(0).max(200).describe(\"Allocation percentage (0-200%, 100% = full time)\"),\r\n  startDate: z.string().describe(\"Allocation start date (YYYY-MM-DD)\"),\r\n  endDate: z.string().describe(\"Allocation end date (YYYY-MM-DD)\"),\r\n  \r\n  // Cost management\r\n  standardRate: z.number().min(0).optional().describe(\"Standard hourly rate\"),\r\n  overtimeRate: z.number().min(0).optional().describe(\"Overtime hourly rate\"),\r\n  costPerUse: z.number().min(0).optional().describe(\"Fixed cost per assignment\"),\r\n  \r\n  // Capacity planning\r\n  maxUnitsAvailable: z.number().min(0).max(10).default(1).describe(\"Maximum units available (1.0 = 100%)\"),\r\n  workingCalendarId: z.union([z.string(), z.number()]).optional().describe(\"Working calendar reference\"),\r\n  \r\n  // Role-based assignment\r\n  roleIds: z.array(z.union([z.string(), z.number()])).optional().describe(\"Role IDs for this allocation\"),\r\n}).strict();\r\n\r\nexport async function allocateResource({ env }: Ctx, input: z.infer<typeof allocateResourceInput>) {\r\n  // Create project membership with allocation details\r\n  const membershipPayload: any = {\r\n    _links: {\r\n      project: hal.project(input.projectId),\r\n      principal: hal.user(input.userId),\r\n    },\r\n  };\r\n\r\n  // Add roles if specified\r\n  if (input.roleIds && input.roleIds.length > 0) {\r\n    membershipPayload._links.roles = input.roleIds.map(roleId => ({ href: `/api/v3/roles/${roleId}` }));\r\n  }\r\n\r\n  const { json: membership } = await opFetch<any>(env, \"/api/v3/memberships\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(membershipPayload),\r\n  });\r\n\r\n  // Store allocation details in custom fields (if supported)\r\n  const allocationData = {\r\n    allocationPercentage: input.allocationPercentage,\r\n    startDate: input.startDate,\r\n    endDate: input.endDate,\r\n    standardRate: input.standardRate,\r\n    overtimeRate: input.overtimeRate,\r\n    costPerUse: input.costPerUse,\r\n    maxUnitsAvailable: input.maxUnitsAvailable,\r\n    workingCalendarId: input.workingCalendarId,\r\n  };\r\n\r\n  return { \r\n    ok: true, \r\n    membership,\r\n    allocation: allocationData,\r\n    membershipUrl: membership?._links?.self?.href,\r\n    effectiveDates: {\r\n      start: input.startDate,\r\n      end: input.endDate,\r\n    },\r\n    capacityUtilization: `${input.allocationPercentage}%`\r\n  };\r\n}\r\n\r\n//\r\n// Resource Utilization Reporting\r\n//\r\nexport const generateResourceUtilizationInput = z.object({\r\n  // Time period for analysis\r\n  startDate: z.string().describe(\"Analysis start date (YYYY-MM-DD)\"),\r\n  endDate: z.string().describe(\"Analysis end date (YYYY-MM-DD)\"),\r\n  \r\n  // Filtering\r\n  projectId: z.union([z.string(), z.number()]).optional().describe(\"Filter by project\"),\r\n  userId: z.union([z.string(), z.number()]).optional().describe(\"Filter by specific user\"),\r\n  departmentId: z.union([z.string(), z.number()]).optional().describe(\"Filter by department\"),\r\n  \r\n  // Analysis options\r\n  includeAllocations: z.boolean().default(true).describe(\"Include planned allocations\"),\r\n  includeActuals: z.boolean().default(true).describe(\"Include actual time logged\"),\r\n  calculateVariance: z.boolean().default(true).describe(\"Calculate planned vs actual variance\"),\r\n}).strict();\r\n\r\nexport async function generateResourceUtilization({ env }: Ctx, input: z.infer<typeof generateResourceUtilizationInput>) {\r\n  // Get actual time entries for the period\r\n  const timeFilters: Record<string, any> = {\r\n    spentOn: { operator: \">=d\", values: [input.startDate] }\r\n  };\r\n\r\n  if (input.endDate) {\r\n    timeFilters.spentOnEnd = { operator: \"<=d\", values: [input.endDate] };\r\n  }\r\n\r\n  if (input.projectId) {\r\n    timeFilters.project = { operator: \"=\", values: [input.projectId.toString()] };\r\n  }\r\n\r\n  if (input.userId) {\r\n    timeFilters.user = { operator: \"=\", values: [input.userId.toString()] };\r\n  }\r\n\r\n  const { json: timeData } = await opFetch<any>(env, \"/api/v3/time_entries\", {\r\n    params: {\r\n      filters: JSON.stringify(timeFilters),\r\n      pageSize: 1000, // Get comprehensive data\r\n      sortBy: JSON.stringify([['user', 'asc'], ['spentOn', 'asc']])\r\n    }\r\n  });\r\n\r\n  const timeEntries = timeData?._embedded?.elements ?? [];\r\n\r\n  // Calculate utilization by user\r\n  const userUtilization: Record<string, any> = {};\r\n  \r\n  timeEntries.forEach((entry: any) => {\r\n    const userId = entry._links?.user?.href?.split('/').pop();\r\n    const userName = entry._links?.user?.title || `User ${userId}`;\r\n    \r\n    if (!userUtilization[userId]) {\r\n      userUtilization[userId] = {\r\n        userId,\r\n        userName,\r\n        totalHours: 0,\r\n        billableHours: 0,\r\n        projects: {},\r\n        dailyHours: {},\r\n      };\r\n    }\r\n    \r\n    const util = userUtilization[userId];\r\n    util.totalHours += entry.hours || 0;\r\n    util.billableHours += entry.billableHours || entry.hours || 0;\r\n    \r\n    // Track by project\r\n    const projectId = entry._links?.project?.href?.split('/').pop();\r\n    const projectName = entry._links?.project?.title || `Project ${projectId}`;\r\n    \r\n    if (!util.projects[projectId]) {\r\n      util.projects[projectId] = { name: projectName, hours: 0 };\r\n    }\r\n    util.projects[projectId].hours += entry.hours || 0;\r\n    \r\n    // Track by day\r\n    if (!util.dailyHours[entry.spentOn]) {\r\n      util.dailyHours[entry.spentOn] = 0;\r\n    }\r\n    util.dailyHours[entry.spentOn] += entry.hours || 0;\r\n  });\r\n\r\n  // Calculate summary metrics\r\n  const totalUsers = Object.keys(userUtilization).length;\r\n  const totalHours = Object.values(userUtilization).reduce((sum: number, user: any) => sum + user.totalHours, 0);\r\n  const averageHoursPerUser = totalUsers > 0 ? totalHours / totalUsers : 0;\r\n  \r\n  const daysDiff = Math.ceil((new Date(input.endDate).getTime() - new Date(input.startDate).getTime()) / (1000 * 3600 * 24)) + 1;\r\n  const workingDays = daysDiff * 0.71; // Assume ~5 working days per week\r\n  const expectedHoursPerUser = workingDays * 8; // 8 hours per day\r\n  \r\n  return {\r\n    resourceUtilization: {\r\n      period: { startDate: input.startDate, endDate: input.endDate },\r\n      summary: {\r\n        totalUsers,\r\n        totalHours,\r\n        averageHoursPerUser,\r\n        workingDays,\r\n        expectedHoursPerUser,\r\n        utilizationRate: expectedHoursPerUser > 0 ? (averageHoursPerUser / expectedHoursPerUser) * 100 : 0,\r\n      },\r\n      userDetails: Object.values(userUtilization),\r\n      periodMetrics: {\r\n        peakDay: null, // Could calculate from daily data\r\n        lowDay: null,\r\n        averageDailyHours: totalHours / daysDiff,\r\n      }\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/users.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/users.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, withQuery } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Users: search by name or get current user\r\n//\r\nexport const searchUsersInput = z.object({\r\n  q: z.string().optional().describe(\"Search term for user name/login\"),\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n});\r\n\r\nexport async function searchUsers({ env }: Ctx, input: z.infer<typeof searchUsersInput>) {\r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n  };\r\n  \r\n  // Add name filter if search term provided\r\n  if (input.q?.trim()) {\r\n    params.filters = JSON.stringify([\r\n      { name: { operator: \"~\", values: [input.q.trim()] } }\r\n    ]);\r\n  }\r\n\r\n  const path = withQuery(\"/api/v3/users\", params);\r\n  const { json } = await opFetch<any>(env, path);\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, ...meta };\r\n}\r\n\r\n//\r\n// Get current authenticated user\r\n//\r\nexport const getCurrentUserInput = z.object({});\r\n\r\nexport async function getCurrentUser({ env }: Ctx, _input: z.infer<typeof getCurrentUserInput>) {\r\n  const { json } = await opFetch<any>(env, \"/api/v3/users/me\");\r\n  return json;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/versions.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/versions.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Versions: list (per-project)\r\n//\r\nexport const listVersionsInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]),\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n});\r\n\r\nexport async function listVersions({ env }: Ctx, input: z.infer<typeof listVersionsInput>) {\r\n  const { json } = await opFetch<any>(env, `/api/v3/projects/${input.projectId}/versions`, {\r\n    params: { offset: input.offset, pageSize: input.pageSize },\r\n  });\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  return { elements, ...meta };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/webhooks.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3878,3880],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":128,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":128,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4015,4017],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":134,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":134,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4246,4248],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":140,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":140,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4356,4358],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":309,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":309,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9722,9724],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":316,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":316,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10020,10022],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":325,"column":93,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":325,"endColumn":95,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10403,10405],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'env' is defined but never used. Allowed unused args must match /^_/u.","line":357,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":357,"endColumn":53}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/webhooks.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n/**\r\n * Enhanced Webhooks API Tools\r\n * \r\n * Leverages OpenProject's latest webhook capabilities for real-time updates including:\r\n * - Work package comments and updates\r\n * - Time entries\r\n * - Attachments\r\n * - Project changes\r\n */\r\n\r\n// Webhook event types supported by OpenProject 2024-2025\r\nconst WebhookEventSchema = z.enum([\r\n  'work_package:created',\r\n  'work_package:updated', \r\n  'work_package:deleted',\r\n  'work_package:commented',\r\n  'time_entry:created',\r\n  'time_entry:updated',\r\n  'time_entry:deleted', \r\n  'attachment:created',\r\n  'attachment:deleted',\r\n  'project:created',\r\n  'project:updated',\r\n  'project:deleted'\r\n]).describe(\"OpenProject webhook event types\");\r\n\r\n// Create webhook configuration\r\nexport const createWebhookInput = z.object({\r\n  name: z.string().min(1)\r\n    .describe(\"Webhook name for identification\"),\r\n  url: z.string().url()\r\n    .describe(\"Webhook endpoint URL to receive events\"),\r\n  events: z.array(WebhookEventSchema)\r\n    .min(1)\r\n    .describe(\"Array of events to subscribe to\"),\r\n  secret: z.string().optional()\r\n    .describe(\"Secret for webhook signature verification\"),\r\n  enabled: z.boolean().default(true)\r\n    .describe(\"Whether webhook is active\"),\r\n  description: z.string().optional()\r\n    .describe(\"Optional description of webhook purpose\"),\r\n  projects: z.array(z.union([z.string(), z.number()])).optional()\r\n    .describe(\"Specific project IDs to filter events (empty = all projects)\")\r\n}).strict();\r\n\r\nexport async function createWebhook({ env }: Ctx, input: z.infer<typeof createWebhookInput>) {\r\n  try {\r\n    const payload: any = {\r\n      name: input.name,\r\n      url: input.url,\r\n      events: input.events,\r\n      enabled: input.enabled,\r\n      description: input.description || `MCP Webhook: ${input.name}`,\r\n      secret: input.secret\r\n    };\r\n    \r\n    // Add project filters if specified\r\n    if (input.projects && input.projects.length > 0) {\r\n      payload.projects = input.projects.map(id => ({ id: String(id) }));\r\n    }\r\n    \r\n    const { json: webhook } = await opFetch<any>(env, \"/api/v3/webhooks\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(payload)\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      webhook: {\r\n        id: webhook.id,\r\n        name: webhook.name,\r\n        url: webhook.url,\r\n        events: webhook.events,\r\n        enabled: webhook.enabled,\r\n        secret: !!webhook.secret, // Don't return actual secret\r\n        createdAt: webhook.createdAt,\r\n        _links: webhook._links\r\n      },\r\n      mcpIntegration: {\r\n        realTimeUpdates: true,\r\n        eventsSupported: input.events.length,\r\n        projectFiltered: !!(input.projects?.length)\r\n      }\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to create webhook: ${error.message}`,\r\n      suggestion: \"Ensure you have admin permissions and the webhook URL is accessible\"\r\n    };\r\n  }\r\n}\r\n\r\n// List existing webhooks\r\nexport const listWebhooksInput = z.object({\r\n  includeDisabled: z.boolean().default(false)\r\n    .describe(\"Include disabled webhooks in results\"),\r\n  pageSize: z.number().int().min(1).max(100).default(20),\r\n  offset: z.number().int().min(0).default(0)\r\n}).strict();\r\n\r\nexport async function listWebhooks({ env }: Ctx, input: z.infer<typeof listWebhooksInput>) {\r\n  try {\r\n    const params: any = {\r\n      pageSize: input.pageSize,\r\n      offset: input.offset\r\n    };\r\n    \r\n    // Filter by enabled status if needed\r\n    if (!input.includeDisabled) {\r\n      params.filters = JSON.stringify([{\r\n        enabled: { operator: '=', values: ['true'] }\r\n      }]);\r\n    }\r\n    \r\n    const { json } = await opFetch<any>(env, \"/api/v3/webhooks\", { params });\r\n    \r\n    const webhooks = (json?._embedded?.elements || []).map((webhook: any) => ({\r\n      id: webhook.id,\r\n      name: webhook.name,\r\n      url: webhook.url,\r\n      events: webhook.events || [],\r\n      enabled: webhook.enabled,\r\n      hasSecret: !!webhook.secret,\r\n      description: webhook.description,\r\n      createdAt: webhook.createdAt,\r\n      updatedAt: webhook.updatedAt,\r\n      projectFilters: webhook.projects || [],\r\n      _links: webhook._links\r\n    }));\r\n    \r\n    return {\r\n      webhooks,\r\n      total: json?.total || 0,\r\n      count: webhooks.length,\r\n      pageSize: input.pageSize,\r\n      offset: input.offset,\r\n      mcpInfo: {\r\n        realTimeCapable: webhooks.length > 0,\r\n        eventsConfigured: webhooks.reduce((sum: number, w: any) => sum + w.events.length, 0)\r\n      }\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      error: `Failed to list webhooks: ${error.message}`,\r\n      webhooks: []\r\n    };\r\n  }\r\n}\r\n\r\n// Update webhook configuration\r\nexport const updateWebhookInput = z.object({\r\n  webhookId: z.union([z.string(), z.number()])\r\n    .describe(\"Webhook ID to update\"),\r\n  name: z.string().optional()\r\n    .describe(\"Updated webhook name\"),\r\n  url: z.string().url().optional()\r\n    .describe(\"Updated webhook URL\"),\r\n  events: z.array(WebhookEventSchema).optional()\r\n    .describe(\"Updated events to subscribe to\"),\r\n  enabled: z.boolean().optional()\r\n    .describe(\"Enable/disable webhook\"),\r\n  secret: z.string().optional()\r\n    .describe(\"Updated secret for signature verification\"),\r\n  description: z.string().optional()\r\n    .describe(\"Updated description\"),\r\n  projects: z.array(z.union([z.string(), z.number()])).optional()\r\n    .describe(\"Updated project filters\")\r\n}).strict();\r\n\r\nexport async function updateWebhook({ env }: Ctx, input: z.infer<typeof updateWebhookInput>) {\r\n  try {\r\n    // Build update payload with only provided fields\r\n    const payload: any = {};\r\n    \r\n    if (input.name !== undefined) {payload.name = input.name;}\r\n    if (input.url !== undefined) {payload.url = input.url;}\r\n    if (input.events !== undefined) {payload.events = input.events;}\r\n    if (input.enabled !== undefined) {payload.enabled = input.enabled;}\r\n    if (input.secret !== undefined) {payload.secret = input.secret;}\r\n    if (input.description !== undefined) {payload.description = input.description;}\r\n    if (input.projects !== undefined) {\r\n      payload.projects = input.projects.map(id => ({ id: String(id) }));\r\n    }\r\n    \r\n    const { json: webhook } = await opFetch<any>(env, `/api/v3/webhooks/${input.webhookId}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(payload)\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      webhook: {\r\n        id: webhook.id,\r\n        name: webhook.name,\r\n        url: webhook.url,\r\n        events: webhook.events,\r\n        enabled: webhook.enabled,\r\n        hasSecret: !!webhook.secret,\r\n        updatedAt: webhook.updatedAt,\r\n        _links: webhook._links\r\n      }\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to update webhook: ${error.message}`,\r\n      webhookId: input.webhookId\r\n    };\r\n  }\r\n}\r\n\r\n// Delete webhook\r\nexport const deleteWebhookInput = z.object({\r\n  webhookId: z.union([z.string(), z.number()])\r\n    .describe(\"Webhook ID to delete\")\r\n}).strict();\r\n\r\nexport async function deleteWebhook({ env }: Ctx, input: z.infer<typeof deleteWebhookInput>) {\r\n  try {\r\n    await opFetch<any>(env, `/api/v3/webhooks/${input.webhookId}`, {\r\n      method: 'DELETE'\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      webhookId: input.webhookId,\r\n      deletedAt: new Date().toISOString()\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to delete webhook: ${error.message}`,\r\n      webhookId: input.webhookId\r\n    };\r\n  }\r\n}\r\n\r\n// Test webhook delivery\r\nexport const testWebhookInput = z.object({\r\n  webhookId: z.union([z.string(), z.number()])\r\n    .describe(\"Webhook ID to test\"),\r\n  eventType: WebhookEventSchema.optional()\r\n    .describe(\"Specific event type to test (defaults to work_package:updated)\")\r\n}).strict();\r\n\r\nexport async function testWebhook({ env }: Ctx, input: z.infer<typeof testWebhookInput>) {\r\n  try {\r\n    const testPayload = {\r\n      eventType: input.eventType || 'work_package:updated',\r\n      test: true\r\n    };\r\n    \r\n    const { json: result } = await opFetch<any>(env, `/api/v3/webhooks/${input.webhookId}/test`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(testPayload)\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      webhookId: input.webhookId,\r\n      testResult: result,\r\n      deliveryStatus: result?.delivered ? 'success' : 'failed',\r\n      responseCode: result?.responseCode,\r\n      responseTime: result?.responseTime,\r\n      testedAt: new Date().toISOString()\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `Failed to test webhook: ${error.message}`,\r\n      webhookId: input.webhookId\r\n    };\r\n  }\r\n}\r\n\r\n// Get webhook delivery logs\r\nexport const getWebhookLogsInput = z.object({\r\n  webhookId: z.union([z.string(), z.number()])\r\n    .describe(\"Webhook ID to get logs for\"),\r\n  limit: z.number().int().min(1).max(100).default(20)\r\n    .describe(\"Number of recent deliveries to retrieve\"),\r\n  successOnly: z.boolean().default(false)\r\n    .describe(\"Show only successful deliveries\")\r\n}).strict();\r\n\r\nexport async function getWebhookLogs({ env }: Ctx, input: z.infer<typeof getWebhookLogsInput>) {\r\n  try {\r\n    const params: any = { limit: input.limit };\r\n    \r\n    if (input.successOnly) {\r\n      params.filters = JSON.stringify([{\r\n        success: { operator: '=', values: ['true'] }\r\n      }]);\r\n    }\r\n    \r\n    const { json } = await opFetch<any>(env, `/api/v3/webhooks/${input.webhookId}/deliveries`, { params });\r\n    \r\n    const deliveries = (json?._embedded?.elements || []).map((delivery: any) => ({\r\n      id: delivery.id,\r\n      eventType: delivery.eventType,\r\n      deliveredAt: delivery.deliveredAt,\r\n      success: delivery.success,\r\n      responseCode: delivery.responseCode,\r\n      responseTime: delivery.responseTime,\r\n      retryCount: delivery.retryCount || 0,\r\n      errorMessage: delivery.errorMessage\r\n    }));\r\n    \r\n    // Calculate delivery statistics\r\n    const stats = {\r\n      total: deliveries.length,\r\n      successful: deliveries.filter((d: any) => d.success).length,\r\n      failed: deliveries.filter((d: any) => !d.success).length,\r\n      averageResponseTime: deliveries.reduce((sum: number, d: any) => sum + (d.responseTime || 0), 0) / deliveries.length || 0\r\n    };\r\n    \r\n    return {\r\n      webhookId: input.webhookId,\r\n      deliveries,\r\n      statistics: stats,\r\n      realTimePerformance: {\r\n        successRate: stats.total > 0 ? (stats.successful / stats.total) * 100 : 0,\r\n        reliability: stats.successful > stats.failed ? 'good' : 'needs_attention',\r\n        averageLatency: Math.round(stats.averageResponseTime)\r\n      }\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      error: `Failed to get webhook logs: ${error.message}`,\r\n      webhookId: input.webhookId\r\n    };\r\n  }\r\n}\r\n\r\n// Validate webhook signature (for incoming webhook handling)\r\nexport const validateWebhookSignatureInput = z.object({\r\n  payload: z.string()\r\n    .describe(\"Webhook payload as string\"),\r\n  signature: z.string()\r\n    .describe(\"Webhook signature from header\"),\r\n  secret: z.string()\r\n    .describe(\"Webhook secret for validation\")\r\n}).strict();\r\n\r\nexport async function validateWebhookSignature({ env }: Ctx, input: z.infer<typeof validateWebhookSignatureInput>) {\r\n  try {\r\n    // OpenProject uses HMAC-SHA256 for webhook signatures\r\n    // Use Web Crypto API (available in Cloudflare Workers)\r\n    const encoder = new TextEncoder();\r\n    const key = await crypto.subtle.importKey(\r\n      'raw',\r\n      encoder.encode(input.secret),\r\n      { name: 'HMAC', hash: 'SHA-256' },\r\n      false,\r\n      ['sign']\r\n    );\r\n    \r\n    const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(input.payload));\r\n    const expectedSignature = Array.from(new Uint8Array(signature))\r\n      .map(b => b.toString(16).padStart(2, '0'))\r\n      .join('');\r\n    \r\n    const providedSignature = input.signature.replace('sha256=', '');\r\n    \r\n    // Constant-time comparison\r\n    let isValid = expectedSignature.length === providedSignature.length;\r\n    for (let i = 0; i < expectedSignature.length; i++) {\r\n      isValid = isValid && (expectedSignature[i] === providedSignature[i]);\r\n    }\r\n    \r\n    return {\r\n      valid: isValid,\r\n      algorithm: 'HMAC-SHA256',\r\n      providedSignature,\r\n      expectedSignature: isValid ? 'matches' : 'mismatch',\r\n      securityNote: 'Always validate webhook signatures in production',\r\n      environment: 'Cloudflare Workers compatible'\r\n    };\r\n    \r\n  } catch (error: any) {\r\n    return {\r\n      valid: false,\r\n      error: `Signature validation failed: ${error.message}`,\r\n      algorithm: 'HMAC-SHA256'\r\n    };\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/tools/workPackagesEnterprise.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RelationTypeSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":154,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":154,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6486,6488],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":269,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":269,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11096,11098],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/tools/workPackagesEnterprise.ts\r\nimport { z } from \"zod\";\r\nimport { opFetch, parseCollectionMeta, hal, withQuery } from \"../util/op\";\r\nimport type { Ctx } from \"../tools\";\r\n\r\n//\r\n// Enterprise Work Package Management - MS Project/PMBOK Level\r\n//\r\n\r\n// Duration schema (ISO 8601 duration format: PT8H = 8 hours, PT2D = 2 days)\r\nconst DurationSchema = z.string().regex(/^PT\\d+[HDWMY]$/).optional().describe(\"ISO 8601 duration (PT8H, PT2D, etc.)\");\r\n\r\n// Formattable field schema\r\nconst FormattableFieldSchema = z.object({\r\n  format: z.string().default(\"markdown\"),\r\n  raw: z.string(),\r\n  html: z.string().optional(),\r\n}).optional();\r\n\r\n// Enterprise custom fields (30+ supported)\r\nconst WorkPackageCustomFieldsSchema = z.object({\r\n  customField1: z.any().optional(), // WBS code\r\n  customField2: z.any().optional(), // Resource pool\r\n  customField3: z.any().optional(), // Cost center\r\n  customField4: z.any().optional(), // Risk level\r\n  customField5: z.any().optional(), // Quality gate\r\n  customField6: z.any().optional(), // Client billable\r\n  customField7: z.any().optional(), // Department\r\n  customField8: z.any().optional(), // Technology stack\r\n  customField9: z.any().optional(), // Complexity rating\r\n  customField10: z.any().optional(), // Business value\r\n}).partial();\r\n\r\n// Relation types for dependencies\r\nconst RelationTypeSchema = z.enum([\r\n  'follows',      // Finish-Start (FS)\r\n  'blocks',       // Start-Start (SS) \r\n  'precedes',     // Finish-Finish (FF)\r\n  'duplicates',   // Duplicate relationship\r\n  'relates'       // General relationship\r\n]);\r\n\r\n//\r\n// Enterprise Work Package Creation with Full Scheduling\r\n//\r\nexport const createWorkPackageEnterpriseInput = z.object({\r\n  // Core required fields\r\n  projectId: z.union([z.string(), z.number()]).describe(\"Project ID\"),\r\n  typeId: z.union([z.string(), z.number()]).describe(\"Work package type ID\"),\r\n  subject: z.string().min(1).max(255).describe(\"Work package subject/title\"),\r\n  \r\n  // Complete scheduling schema (MS Project equivalent)\r\n  description: FormattableFieldSchema.describe(\"Detailed description with markdown\"),\r\n  startDate: z.string().optional().describe(\"Planned start date (YYYY-MM-DD)\"),\r\n  dueDate: z.string().optional().describe(\"Planned due date (YYYY-MM-DD)\"),\r\n  estimatedTime: DurationSchema.describe(\"Estimated work effort (PT8H, PT2D)\"),\r\n  percentageDone: z.number().int().min(0).max(100).optional().describe(\"Completion percentage 0-100\"),\r\n  scheduleManually: z.boolean().default(false).describe(\"Manual vs automatic scheduling\"),\r\n  \r\n  // Resource management (enterprise)\r\n  assigneeId: z.union([z.string(), z.number()]).optional().describe(\"Primary assignee user ID\"),\r\n  responsibleId: z.union([z.string(), z.number()]).optional().describe(\"Responsible person (RACI)\"),\r\n  \r\n  // Project structure\r\n  parentId: z.union([z.string(), z.number()]).optional().describe(\"Parent work package (WBS hierarchy)\"),\r\n  versionId: z.union([z.string(), z.number()]).optional().describe(\"Target milestone/version\"),\r\n  \r\n  // Status and priority\r\n  statusId: z.union([z.string(), z.number()]).optional().describe(\"Work package status\"),\r\n  priorityId: z.union([z.string(), z.number()]).optional().describe(\"Priority level\"),\r\n  \r\n  // Enterprise project management\r\n  budgetId: z.union([z.string(), z.number()]).optional().describe(\"Associated budget\"),\r\n  categoryId: z.union([z.string(), z.number()]).optional().describe(\"Work category\"),\r\n  \r\n  // Custom enterprise fields\r\n  customFields: WorkPackageCustomFieldsSchema.optional().describe(\"Organization-specific fields\"),\r\n  \r\n  // Notification and validation\r\n  sendNotifications: z.boolean().default(true).describe(\"Send stakeholder notifications\"),\r\n  dryRun: z.boolean().default(false).describe(\"Validate only without creating\"),\r\n}).strict();\r\n\r\nexport async function createWorkPackageEnterprise({ env }: Ctx, input: z.infer<typeof createWorkPackageEnterpriseInput>) {\r\n  // Build comprehensive work package payload\r\n  const payload: any = {\r\n    subject: input.subject,\r\n    _links: {\r\n      project: hal.project(input.projectId),\r\n      type: hal.type(input.typeId),\r\n    },\r\n  };\r\n\r\n  // Add scheduling fields\r\n  if (input.description) {payload.description = input.description;}\r\n  if (input.startDate) {payload.startDate = input.startDate;}\r\n  if (input.dueDate) {payload.dueDate = input.dueDate;}\r\n  if (input.estimatedTime) {payload.estimatedTime = input.estimatedTime;}\r\n  if (input.percentageDone !== undefined) {payload.percentageDone = input.percentageDone;}\r\n  if (input.scheduleManually !== undefined) {payload.scheduleManually = input.scheduleManually;}\r\n\r\n  // Resource assignments\r\n  if (input.assigneeId) {payload._links.assignee = hal.user(input.assigneeId);}\r\n  if (input.responsibleId) {payload._links.responsible = hal.user(input.responsibleId);}\r\n\r\n  // Project structure\r\n  if (input.parentId) {payload._links.parent = hal.workPackage(input.parentId);}\r\n  if (input.versionId) {payload._links.version = { href: `/api/v3/versions/${input.versionId}` };}\r\n\r\n  // Status and priority\r\n  if (input.statusId) {payload._links.status = hal.status(input.statusId);}\r\n  if (input.priorityId) {payload._links.priority = hal.priority(input.priorityId);}\r\n\r\n  // Enterprise fields\r\n  if (input.budgetId) {payload._links.budget = { href: `/api/v3/budgets/${input.budgetId}` };}\r\n  if (input.categoryId) {payload._links.category = { href: `/api/v3/categories/${input.categoryId}` };}\r\n\r\n  // Custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Forms-first validation\r\n  const { json: form } = await opFetch<any>(env, \"/api/v3/work_packages/form\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ \r\n      ...payload, \r\n      _meta: { sendNotifications: input.sendNotifications } \r\n    }),\r\n  });\r\n\r\n  const errors = form?.validationErrors ?? {};\r\n  const hasErrors = errors && Object.keys(errors).length > 0;\r\n  \r\n  if (input.dryRun || hasErrors) {\r\n    return { \r\n      ok: !hasErrors, \r\n      validationErrors: errors, \r\n      payload: form?.payload,\r\n      schema: form?.schema,\r\n      warnings: form?.warnings \r\n    };\r\n  }\r\n\r\n  // Commit creation\r\n  const commit = form?._links?.commit;\r\n  if (!commit?.href) {throw new Error(\"Form commit link missing\");}\r\n  \r\n  const { json: created } = await opFetch<any>(env, commit.href, {\r\n    method: commit.method || \"POST\",\r\n    body: JSON.stringify(form.payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    workPackage: created,\r\n    workPackageUrl: created?._links?.self?.href \r\n  };\r\n}\r\n\r\n//\r\n// Enterprise Work Package Updates with Complete Scheduling Control\r\n//\r\nexport const updateWorkPackageEnterpriseInput = z.object({\r\n  id: z.union([z.string(), z.number()]).describe(\"Work package ID\"),\r\n  lockVersion: z.number().int().min(0).describe(\"Lock version for optimistic locking\"),\r\n  \r\n  // All updatable fields\r\n  subject: z.string().min(1).max(255).optional(),\r\n  description: FormattableFieldSchema,\r\n  \r\n  // Complete scheduling updates\r\n  startDate: z.string().optional(),\r\n  dueDate: z.string().optional(),\r\n  estimatedTime: DurationSchema,\r\n  percentageDone: z.number().int().min(0).max(100).optional(),\r\n  scheduleManually: z.boolean().optional(),\r\n  \r\n  // Resource updates\r\n  assigneeId: z.union([z.string(), z.number()]).optional(),\r\n  responsibleId: z.union([z.string(), z.number()]).optional(),\r\n  \r\n  // Structure updates\r\n  parentId: z.union([z.string(), z.number()]).optional(),\r\n  versionId: z.union([z.string(), z.number()]).optional(),\r\n  \r\n  // Status updates\r\n  statusId: z.union([z.string(), z.number()]).optional(),\r\n  priorityId: z.union([z.string(), z.number()]).optional(),\r\n  \r\n  // Enterprise updates\r\n  budgetId: z.union([z.string(), z.number()]).optional(),\r\n  categoryId: z.union([z.string(), z.number()]).optional(),\r\n  customFields: WorkPackageCustomFieldsSchema.optional(),\r\n  \r\n  // Update control\r\n  sendNotifications: z.boolean().default(true),\r\n  dryRun: z.boolean().default(false),\r\n}).strict();\r\n\r\nexport async function updateWorkPackageEnterprise({ env }: Ctx, input: z.infer<typeof updateWorkPackageEnterpriseInput>) {\r\n  // Build update payload\r\n  const payload: any = {\r\n    lockVersion: input.lockVersion,\r\n  };\r\n\r\n  // Update core fields\r\n  if (input.subject !== undefined) {payload.subject = input.subject;}\r\n  if (input.description !== undefined) {payload.description = input.description;}\r\n  \r\n  // Update scheduling\r\n  if (input.startDate !== undefined) {payload.startDate = input.startDate;}\r\n  if (input.dueDate !== undefined) {payload.dueDate = input.dueDate;}\r\n  if (input.estimatedTime !== undefined) {payload.estimatedTime = input.estimatedTime;}\r\n  if (input.percentageDone !== undefined) {payload.percentageDone = input.percentageDone;}\r\n  if (input.scheduleManually !== undefined) {payload.scheduleManually = input.scheduleManually;}\r\n\r\n  // Update links\r\n  payload._links = {};\r\n  if (input.assigneeId !== undefined) {payload._links.assignee = input.assigneeId ? hal.user(input.assigneeId) : null;}\r\n  if (input.responsibleId !== undefined) {payload._links.responsible = input.responsibleId ? hal.user(input.responsibleId) : null;}\r\n  if (input.parentId !== undefined) {payload._links.parent = input.parentId ? hal.workPackage(input.parentId) : null;}\r\n  if (input.versionId !== undefined) {payload._links.version = input.versionId ? { href: `/api/v3/versions/${input.versionId}` } : null;}\r\n  if (input.statusId !== undefined) {payload._links.status = input.statusId ? hal.status(input.statusId) : null;}\r\n  if (input.priorityId !== undefined) {payload._links.priority = input.priorityId ? hal.priority(input.priorityId) : null;}\r\n  if (input.budgetId !== undefined) {payload._links.budget = input.budgetId ? { href: `/api/v3/budgets/${input.budgetId}` } : null;}\r\n  if (input.categoryId !== undefined) {payload._links.category = input.categoryId ? { href: `/api/v3/categories/${input.categoryId}` } : null;}\r\n\r\n  // Update custom fields\r\n  if (input.customFields) {\r\n    Object.entries(input.customFields).forEach(([key, value]) => {\r\n      if (value !== undefined) {\r\n        payload[key] = value;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Forms-first validation\r\n  const { json: form } = await opFetch<any>(env, `/api/v3/work_packages/${input.id}/form`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ \r\n      ...payload, \r\n      _meta: { sendNotifications: input.sendNotifications } \r\n    }),\r\n  });\r\n\r\n  const errors = form?.validationErrors ?? {};\r\n  const hasErrors = errors && Object.keys(errors).length > 0;\r\n  \r\n  if (input.dryRun || hasErrors) {\r\n    return { \r\n      ok: !hasErrors, \r\n      validationErrors: errors, \r\n      payload: form?.payload,\r\n      schema: form?.schema,\r\n      changes: form?.changes \r\n    };\r\n  }\r\n\r\n  // Commit update\r\n  const commit = form?._links?.commit;\r\n  if (!commit?.href) {throw new Error(\"Form commit link missing\");}\r\n  \r\n  const { json: updated } = await opFetch<any>(env, commit.href, {\r\n    method: commit.method || \"PATCH\",\r\n    body: JSON.stringify(form.payload),\r\n  });\r\n\r\n  return { \r\n    ok: true, \r\n    workPackage: updated,\r\n    changes: form?.changes \r\n  };\r\n}\r\n\r\n//\r\n// Advanced Work Package Listing with Enterprise Filters\r\n//\r\nexport const listWorkPackagesEnterpriseInput = z.object({\r\n  projectId: z.union([z.string(), z.number()]).optional().describe(\"Filter by project\"),\r\n  \r\n  // Advanced filtering\r\n  assigneeId: z.union([z.string(), z.number()]).optional().describe(\"Filter by assignee\"),\r\n  responsibleId: z.union([z.string(), z.number()]).optional().describe(\"Filter by responsible person\"),\r\n  statusId: z.union([z.string(), z.number()]).optional().describe(\"Filter by status\"),\r\n  typeId: z.union([z.string(), z.number()]).optional().describe(\"Filter by type\"),\r\n  priorityId: z.union([z.string(), z.number()]).optional().describe(\"Filter by priority\"),\r\n  versionId: z.union([z.string(), z.number()]).optional().describe(\"Filter by version/milestone\"),\r\n  \r\n  // Schedule filtering\r\n  dueDateFrom: z.string().optional().describe(\"Due date range start (YYYY-MM-DD)\"),\r\n  dueDateTo: z.string().optional().describe(\"Due date range end (YYYY-MM-DD)\"),\r\n  startDateFrom: z.string().optional().describe(\"Start date range start (YYYY-MM-DD)\"),\r\n  startDateTo: z.string().optional().describe(\"Start date range end (YYYY-MM-DD)\"),\r\n  \r\n  // Progress filtering\r\n  percentageDoneMin: z.number().int().min(0).max(100).optional().describe(\"Minimum completion %\"),\r\n  percentageDoneMax: z.number().int().min(0).max(100).optional().describe(\"Maximum completion %\"),\r\n  \r\n  // Hierarchy filtering\r\n  parentId: z.union([z.string(), z.number()]).optional().describe(\"Filter by parent work package\"),\r\n  topLevelOnly: z.boolean().default(false).describe(\"Show only top-level work packages\"),\r\n  \r\n  // Text search\r\n  subject: z.string().optional().describe(\"Subject text search\"),\r\n  \r\n  // Custom field filters\r\n  customFieldFilters: z.record(z.any()).optional().describe(\"Filter by custom field values\"),\r\n  \r\n  // Pagination\r\n  offset: z.number().int().min(0).default(0),\r\n  pageSize: z.number().int().min(1).max(200).default(25),\r\n  \r\n  // Sorting\r\n  sortBy: z.array(z.array(z.string())).optional().describe('Sort criteria like [[\"dueDate\",\"asc\"]]'),\r\n}).strict();\r\n\r\nexport async function listWorkPackagesEnterprise({ env }: Ctx, input: z.infer<typeof listWorkPackagesEnterpriseInput>) {\r\n  const filters: any[] = [];\r\n  \r\n  // Build enterprise filters\r\n  if (input.assigneeId !== undefined) {\r\n    filters.push({ assignee: { operator: \"=\", values: [input.assigneeId.toString()] } });\r\n  }\r\n  \r\n  if (input.responsibleId !== undefined) {\r\n    filters.push({ responsible: { operator: \"=\", values: [input.responsibleId.toString()] } });\r\n  }\r\n  \r\n  if (input.statusId !== undefined) {\r\n    filters.push({ status: { operator: \"=\", values: [input.statusId.toString()] } });\r\n  }\r\n  \r\n  if (input.typeId !== undefined) {\r\n    filters.push({ type: { operator: \"=\", values: [input.typeId.toString()] } });\r\n  }\r\n  \r\n  if (input.priorityId !== undefined) {\r\n    filters.push({ priority: { operator: \"=\", values: [input.priorityId.toString()] } });\r\n  }\r\n  \r\n  if (input.versionId !== undefined) {\r\n    filters.push({ version: { operator: \"=\", values: [input.versionId.toString()] } });\r\n  }\r\n\r\n  // Date range filters\r\n  if (input.dueDateFrom) {\r\n    filters.push({ dueDate: { operator: \">=d\", values: [input.dueDateFrom] } });\r\n  }\r\n  if (input.dueDateTo) {\r\n    filters.push({ dueDate: { operator: \"<=d\", values: [input.dueDateTo] } });\r\n  }\r\n  if (input.startDateFrom) {\r\n    filters.push({ startDate: { operator: \">=d\", values: [input.startDateFrom] } });\r\n  }\r\n  if (input.startDateTo) {\r\n    filters.push({ startDate: { operator: \"<=d\", values: [input.startDateTo] } });\r\n  }\r\n\r\n  // Progress filters\r\n  if (input.percentageDoneMin !== undefined) {\r\n    filters.push({ percentageDone: { operator: \">=\", values: [input.percentageDoneMin.toString()] } });\r\n  }\r\n  if (input.percentageDoneMax !== undefined) {\r\n    filters.push({ percentageDone: { operator: \"<=\", values: [input.percentageDoneMax.toString()] } });\r\n  }\r\n\r\n  // Hierarchy filters\r\n  if (input.parentId !== undefined) {\r\n    filters.push({ parent: { operator: \"=\", values: [input.parentId.toString()] } });\r\n  } else if (input.topLevelOnly) {\r\n    filters.push({ parent: { operator: \"!*\", values: [] } });\r\n  }\r\n\r\n  // Text search\r\n  if (input.subject?.trim()) {\r\n    filters.push({ subject: { operator: \"~\", values: [input.subject.trim()] } });\r\n  }\r\n\r\n  // Custom field filters\r\n  if (input.customFieldFilters) {\r\n    Object.entries(input.customFieldFilters).forEach(([field, value]) => {\r\n      filters.push({ [field]: { operator: \"=\", values: [value] } });\r\n    });\r\n  }\r\n\r\n  // Build API path\r\n  const basePath = input.projectId ? `/api/v3/projects/${input.projectId}/work_packages` : \"/api/v3/work_packages\";\r\n  \r\n  const params: Record<string, unknown> = {\r\n    offset: input.offset,\r\n    pageSize: input.pageSize,\r\n  };\r\n  \r\n  if (filters.length > 0) {\r\n    params.filters = JSON.stringify(filters);\r\n  }\r\n  \r\n  if (input.sortBy) {\r\n    params.sortBy = JSON.stringify(input.sortBy);\r\n  }\r\n\r\n  const path = withQuery(basePath, params);\r\n  const { json } = await opFetch<any>(env, path);\r\n  const meta = parseCollectionMeta(json);\r\n  const elements = json?._embedded?.elements ?? [];\r\n  \r\n  return { \r\n    elements, \r\n    ...meta, \r\n    _links: json?._links,\r\n    appliedFilters: filters.length > 0 ? filters : undefined,\r\n    scheduleMetrics: {\r\n      totalWorkPackages: elements.length,\r\n      completedCount: elements.filter((wp: any) => wp.percentageDone === 100).length,\r\n      overdueCount: elements.filter((wp: any) => wp.dueDate && new Date(wp.dueDate) < new Date() && wp.percentageDone < 100).length,\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/types/hybrid-data.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/types/hybrid-data.ts\r\nimport { z } from \"zod\";\r\n\r\n// Core hybrid data interfaces for OpenProject native + custom enterprise features\r\n\r\n//\r\n// Native OpenProject Data Structures (pulled from API)\r\n//\r\nexport interface NativeWorkPackageData {\r\n  id: string | number;\r\n  subject: string;\r\n  percentageDone: number;\r\n  estimatedTime?: string; // ISO 8601 duration format\r\n  spentTime?: string;\r\n  startDate?: string;\r\n  dueDate?: string;\r\n  status: {\r\n    id: string | number;\r\n    name: string;\r\n    isClosed: boolean;\r\n  };\r\n  type: {\r\n    id: string | number;\r\n    name: string;\r\n  };\r\n  assignee?: {\r\n    id: string | number;\r\n    name: string;\r\n  };\r\n  _links: {\r\n    self: { href: string };\r\n    project: { href: string };\r\n  };\r\n}\r\n\r\nexport interface NativeProjectMetrics {\r\n  id: string | number;\r\n  name: string;\r\n  identifier: string;\r\n  status: string;\r\n  statusExplanation?: string;\r\n  \r\n  // Calculated by OpenProject\r\n  totalEstimatedHours: number;\r\n  totalSpentHours: number;\r\n  overallPercentComplete: number;\r\n  activeWorkPackages: number;\r\n  completedWorkPackages: number;\r\n  totalWorkPackages: number;\r\n  \r\n  // Raw data for custom calculations\r\n  workPackages: NativeWorkPackageData[];\r\n  timeEntries: NativeTimeEntry[];\r\n  budgetInfo?: NativeBudgetData;\r\n}\r\n\r\nexport interface NativeTimeEntry {\r\n  id: string | number;\r\n  hours: number;\r\n  spentOn: string; // Date\r\n  comment?: string;\r\n  user: {\r\n    id: string | number;\r\n    name: string;\r\n  };\r\n  workPackage?: {\r\n    id: string | number;\r\n    subject: string;\r\n  };\r\n  project: {\r\n    id: string | number;\r\n    name: string;\r\n  };\r\n  activity?: {\r\n    id: string | number;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport interface NativeBudgetData {\r\n  id: string | number;\r\n  subject: string;\r\n  // Note: OpenProject budget API is currently minimal\r\n  // We'll extend this via custom fields\r\n}\r\n\r\n//\r\n// PMO Variable Storage (stored as OpenProject custom fields)\r\n//\r\nexport interface PMOVariables {\r\n  // Financial Variables\r\n  standardLaborRate: number;\r\n  overtimeMultiplier: number;\r\n  contingencyPercentage: number;\r\n  managementReservePercentage: number;\r\n  \r\n  // Performance Thresholds\r\n  costPerformanceThreshold: number; // e.g., 0.95\r\n  schedulePerformanceThreshold: number; // e.g., 0.95\r\n  qualityThreshold: number;\r\n  \r\n  // Resource Variables\r\n  defaultUtilizationRate: number; // e.g., 0.85\r\n  maxAllocation: number; // e.g., 1.0 (100%)\r\n  workingHoursPerDay: number;\r\n  workingDaysPerWeek: number;\r\n  \r\n  // Risk Variables\r\n  riskTolerance: 'low' | 'medium' | 'high';\r\n  riskAppetite: 'conservative' | 'moderate' | 'aggressive';\r\n  \r\n  // Calculation Methods\r\n  evmMethod: 'traditional' | 'earned_schedule' | 'weighted_milestone';\r\n  forecastMethod: 'CPI' | 'SPI_CPI' | 'custom_regression';\r\n  \r\n  // Industry/Project Specific\r\n  industryType: string;\r\n  complexityFactor: number; // 1.0 = normal, >1.0 = more complex\r\n  technologyRiskFactor: number;\r\n  \r\n  // Organizational\r\n  approvalThreshold: number;\r\n  changeControlThreshold: number;\r\n  escalationThreshold: number;\r\n}\r\n\r\n//\r\n// Custom Enterprise Calculations (not available in OpenProject Community)\r\n//\r\nexport interface EVMCalculation {\r\n  // Input metrics\r\n  budgetAtCompletion: number;\r\n  plannedValue: number;\r\n  earnedValue: number;\r\n  actualCost: number;\r\n  \r\n  // Performance indices\r\n  costPerformanceIndex: number;\r\n  schedulePerformanceIndex: number;\r\n  \r\n  // Variances\r\n  costVariance: number;\r\n  scheduleVariance: number;\r\n  \r\n  // Forecasts\r\n  estimateAtCompletion: number;\r\n  estimateToComplete: number;\r\n  varianceAtCompletion: number;\r\n  toCompletePerformanceIndex: number;\r\n  \r\n  // Status\r\n  costStatus: 'Under Budget' | 'Over Budget' | 'Seriously Over Budget';\r\n  scheduleStatus: 'Ahead' | 'On Track' | 'Behind' | 'Seriously Behind';\r\n  overallHealth: 'Green' | 'Yellow' | 'Red';\r\n  \r\n  // Calculation metadata\r\n  calculationDate: string;\r\n  method: string;\r\n  confidence: number;\r\n  // Additional forecast variants for transparency (PMI-recognized formulas)\r\n  forecastVariants?: {\r\n    cpiBased: number;                 // BAC / CPI\r\n    budgetRate: number;               // AC + (BAC - EV)\r\n  spiCpiPure?: number;              // BAC / (CPI * SPI) (PMBOK pure combined)\r\n  spiCpiLegacy?: number;            // AC + ((BAC - EV) / (CPI * SPI)) legacy variant\r\n  spiCpiCombined?: number;          // Alias for legacy to preserve older clients\r\n  acPlusRemainingOverCpi: number;   // AC + (BAC - EV) / CPI\r\n  };\r\n  forecastMethodApplied?: string; // Which variant populated estimateAtCompletion\r\n}\r\n\r\nexport interface CriticalPathNode {\r\n  id: string | number;\r\n  name: string;\r\n  duration: number;\r\n  earliestStart: number;\r\n  earliestFinish: number;\r\n  latestStart: number;\r\n  latestFinish: number;\r\n  totalFloat: number;\r\n  freeFloat: number;\r\n  isCritical: boolean;\r\n  percentComplete: number;\r\n  predecessors: string[];\r\n  successors: string[];\r\n}\r\n\r\nexport interface CriticalPathAnalysis {\r\n  nodes: Map<string, CriticalPathNode>;\r\n  criticalPath: string[];\r\n  projectDuration: number;\r\n  criticalPathLength: number;\r\n  totalFloat: number;\r\n  scheduleRisk: 'Low' | 'Medium' | 'High';\r\n  recommendations: string[];\r\n  analysisDate: string;\r\n}\r\n\r\nexport interface ResourceUtilization {\r\n  userId: string | number;\r\n  userName: string;\r\n  totalAllocatedHours: number;\r\n  totalWorkedHours: number;\r\n  utilizationRate: number;\r\n  overallocation: boolean;\r\n  availableCapacity: number;\r\n  projects: {\r\n    projectId: string | number;\r\n    projectName: string;\r\n    allocatedHours: number;\r\n    workedHours: number;\r\n    utilizationRate: number;\r\n  }[];\r\n}\r\n\r\n//\r\n// Complete Hybrid Data Structure\r\n//\r\nexport interface HybridProjectData {\r\n  // Native OpenProject calculated data (always fresh)\r\n  native: NativeProjectMetrics;\r\n  \r\n  // PMO variables (stored as custom fields in OpenProject)\r\n  variables: PMOVariables;\r\n  \r\n  // Custom enterprise calculations (cached with TTL)\r\n  calculations?: {\r\n    evm?: EVMCalculation;\r\n    criticalPath?: CriticalPathAnalysis;\r\n    resourceUtilization?: ResourceUtilization[];\r\n    lastUpdated: string;\r\n    ttl: number; // seconds\r\n  };\r\n}\r\n\r\n//\r\n// Cache Management\r\n//\r\nexport interface CacheEntry<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number; // Time to live in seconds\r\n  projectId: string | number;\r\n  calculationType: string;\r\n}\r\n\r\nexport interface CacheStrategy {\r\n  neverCache: string[];\r\n  cacheForSession: string[];\r\n  cacheWithExpiry: {\r\n    key: string;\r\n    ttlSeconds: number;\r\n  }[];\r\n}\r\n\r\n//\r\n// Zod Schemas for Validation\r\n//\r\nexport const PMOVariablesSchema = z.object({\r\n  standardLaborRate: z.number().positive(),\r\n  overtimeMultiplier: z.number().min(1),\r\n  contingencyPercentage: z.number().min(0).max(1),\r\n  managementReservePercentage: z.number().min(0).max(1),\r\n  costPerformanceThreshold: z.number().positive(),\r\n  schedulePerformanceThreshold: z.number().positive(),\r\n  qualityThreshold: z.number().min(0).max(1),\r\n  defaultUtilizationRate: z.number().min(0).max(1),\r\n  maxAllocation: z.number().positive().max(2), // Allow up to 200% allocation\r\n  workingHoursPerDay: z.number().positive().max(24),\r\n  workingDaysPerWeek: z.number().positive().max(7),\r\n  riskTolerance: z.enum(['low', 'medium', 'high']),\r\n  riskAppetite: z.enum(['conservative', 'moderate', 'aggressive']),\r\n  evmMethod: z.enum(['traditional', 'earned_schedule', 'weighted_milestone']),\r\n  forecastMethod: z.enum(['CPI', 'SPI_CPI', 'custom_regression']),\r\n  industryType: z.string().min(1),\r\n  complexityFactor: z.number().positive(),\r\n  technologyRiskFactor: z.number().positive(),\r\n  approvalThreshold: z.number().nonnegative(),\r\n  changeControlThreshold: z.number().nonnegative(),\r\n  escalationThreshold: z.number().nonnegative(),\r\n}).strict();\r\n\r\nexport const EVMCalculationSchema = z.object({\r\n  budgetAtCompletion: z.number().nonnegative(),\r\n  plannedValue: z.number().nonnegative(),\r\n  earnedValue: z.number().nonnegative(),\r\n  actualCost: z.number().nonnegative(),\r\n  costPerformanceIndex: z.number().positive(),\r\n  schedulePerformanceIndex: z.number().positive(),\r\n  costVariance: z.number(),\r\n  scheduleVariance: z.number(),\r\n  estimateAtCompletion: z.number().positive(),\r\n  estimateToComplete: z.number().nonnegative(),\r\n  varianceAtCompletion: z.number(),\r\n  toCompletePerformanceIndex: z.number().positive(),\r\n  costStatus: z.enum(['Under Budget', 'Over Budget', 'Seriously Over Budget']),\r\n  scheduleStatus: z.enum(['Ahead', 'On Track', 'Behind', 'Seriously Behind']),\r\n  overallHealth: z.enum(['Green', 'Yellow', 'Red']),\r\n  calculationDate: z.string(),\r\n  method: z.string(),\r\n  confidence: z.number().min(0).max(1),\r\n  forecastVariants: z.object({\r\n    cpiBased: z.number().positive(),\r\n    budgetRate: z.number().positive(),\r\n    spiCpiCombined: z.number().positive(),\r\n    acPlusRemainingOverCpi: z.number().positive()\r\n  }).partial().optional(),\r\n  forecastMethodApplied: z.string().optional()\r\n}).strict();\r\n\r\n//\r\n// Default Values\r\n//\r\nexport const DEFAULT_PMO_VARIABLES: PMOVariables = {\r\n  standardLaborRate: 75,\r\n  overtimeMultiplier: 1.5,\r\n  contingencyPercentage: 0.10,\r\n  managementReservePercentage: 0.05,\r\n  costPerformanceThreshold: 0.95,\r\n  schedulePerformanceThreshold: 0.95,\r\n  qualityThreshold: 0.90,\r\n  defaultUtilizationRate: 0.85,\r\n  maxAllocation: 1.0,\r\n  workingHoursPerDay: 8,\r\n  workingDaysPerWeek: 5,\r\n  riskTolerance: 'medium',\r\n  riskAppetite: 'moderate',\r\n  evmMethod: 'traditional',\r\n  forecastMethod: 'CPI',\r\n  industryType: 'software',\r\n  complexityFactor: 1.0,\r\n  technologyRiskFactor: 1.0,\r\n  approvalThreshold: 10000,\r\n  changeControlThreshold: 5000,\r\n  escalationThreshold: 25000,\r\n};","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/types/index.ts - Centralized type definitions for OpenProject MCP Server\r\n\r\n// Environment configuration types\r\nexport interface Env {\r\n  OP_BASE_URL: string;\r\n  OP_TOKEN: string;\r\n  ALLOWED_ORIGINS?: string;\r\n  SENTRY_DSN?: string;\r\n  SENTRY_TRACES_SAMPLE_RATE?: string;\r\n  SENTRY_SEND_PII?: string;\r\n  SENTRY_ENABLE_LOGS?: string;\r\n  OP_ALLOW_INSECURE_HTTP?: string;\r\n}\r\n\r\n// Context types for tool handlers\r\nexport interface OpContext {\r\n  env: Env;\r\n}\r\n\r\n// OpenProject API response types\r\nexport type OpCollectionMeta = {\r\n  total?: number;\r\n  count?: number;\r\n  pageSize?: number;\r\n  offset?: number;\r\n  nextOffset?: number | null;\r\n};\r\n\r\n// Common API structures\r\nexport interface OpApiResponse<T = any> {\r\n  res: Response;\r\n  json: T;\r\n}\r\n\r\nexport interface OpHalResource {\r\n  _type: string;\r\n  _links: {\r\n    self: { href: string };\r\n    [key: string]: { href: string; title?: string };\r\n  };\r\n  _embedded?: {\r\n    [key: string]: any;\r\n  };\r\n  id?: number;\r\n  subject?: string;\r\n  description?: { raw: string; html: string };\r\n  createdAt?: string;\r\n  updatedAt?: string;\r\n}\r\n\r\n// Work Package types\r\nexport interface WorkPackage extends OpHalResource {\r\n  _type: \"WorkPackage\";\r\n  subject: string;\r\n  description: { raw: string; html: string };\r\n  status: OpHalResource;\r\n  priority: OpHalResource;\r\n  type: OpHalResource;\r\n  project: OpHalResource;\r\n  assignee?: OpHalResource;\r\n  responsible?: OpHalResource;\r\n  percentDone?: number;\r\n  estimatedTime?: string;\r\n  spentTime?: string;\r\n  remainingTime?: string;\r\n  startDate?: string;\r\n  dueDate?: string;\r\n  lockVersion: number;\r\n}\r\n\r\n// Project types\r\nexport interface Project extends OpHalResource {\r\n  _type: \"Project\";\r\n  name: string;\r\n  identifier: string;\r\n  description: { raw: string; html: string };\r\n  status: \"active\" | \"archived\" | \"closed\";\r\n  public: boolean;\r\n  parent?: OpHalResource;\r\n  statusExplanation?: { raw: string; html: string };\r\n}\r\n\r\n// User types\r\nexport interface User extends OpHalResource {\r\n  _type: \"User\";\r\n  name: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  login: string;\r\n  admin: boolean;\r\n  avatar: string;\r\n  status: \"active\" | \"locked\" | \"invited\" | \"registered\";\r\n}\r\n\r\n// Error response types\r\nexport interface OpErrorResponse {\r\n  _type: \"Error\";\r\n  errorIdentifier: string;\r\n  message: string;\r\n  details?: any;\r\n}\r\n\r\n// MCP Tool response types\r\nexport interface ToolResponse {\r\n  content: Array<{\r\n    type: \"text\" | \"resource_link\";\r\n    text?: string;\r\n    uri?: string;\r\n  }>;\r\n  _meta?: {\r\n    structuredContent?: any;\r\n  };\r\n  isError?: boolean;\r\n}\r\n\r\n// Form validation types (for OpenProject forms-first approach)\r\nexport interface OpForm {\r\n  _type: \"Form\";\r\n  _embedded: {\r\n    payload: any;\r\n    schema: any;\r\n    validationErrors?: any;\r\n  };\r\n  _links: {\r\n    self: { href: string };\r\n    validate: { href: string; method: string };\r\n    commit?: { href: string; method: string };\r\n  };\r\n}\r\n\r\n// Query and filtering types\r\nexport interface OpFilter {\r\n  [key: string]: {\r\n    operator: string;\r\n    values: string[];\r\n  };\r\n}\r\n\r\nexport interface OpQuery {\r\n  filters: OpFilter[];\r\n  sortBy: Array<{\r\n    field: string;\r\n    direction: \"asc\" | \"desc\";\r\n  }>;\r\n  groupBy?: string;\r\n  columns?: string[];\r\n  displaySums?: boolean;\r\n  publicQuery?: boolean;\r\n  hidden?: boolean;\r\n}\r\n\r\n// Enterprise feature types (for advanced project management)\r\nexport interface EnterpriseMetadata {\r\n  portfolioId?: number;\r\n  programId?: number;\r\n  riskLevel?: \"low\" | \"medium\" | \"high\" | \"critical\";\r\n  complianceFramework?: string[];\r\n  customFields?: Record<string, any>;\r\n  governance?: {\r\n    approvalRequired: boolean;\r\n    reviewers: number[];\r\n    auditTrail: boolean;\r\n  };\r\n}\r\n\r\n// Attachment types\r\nexport interface Attachment extends OpHalResource {\r\n  _type: \"Attachment\";\r\n  fileName: string;\r\n  fileSize: number;\r\n  contentType: string;\r\n  description: { raw: string; html: string };\r\n  author: OpHalResource;\r\n  digest: {\r\n    algorithm: string;\r\n    hash: string;\r\n  };\r\n  downloads: number;\r\n}\r\n\r\n// Time entry types\r\nexport interface TimeEntry extends OpHalResource {\r\n  _type: \"TimeEntry\";\r\n  hours: number;\r\n  comment: { raw: string; html: string };\r\n  spentOn: string;\r\n  user: OpHalResource;\r\n  workPackage: OpHalResource;\r\n  project: OpHalResource;\r\n  activity: OpHalResource;\r\n}\r\n\r\n// Version/Milestone types\r\nexport interface Version extends OpHalResource {\r\n  _type: \"Version\";\r\n  name: string;\r\n  description: { raw: string; html: string };\r\n  status: \"open\" | \"locked\" | \"closed\";\r\n  sharing: \"none\" | \"descendants\" | \"hierarchy\" | \"tree\" | \"system\";\r\n  startDate?: string;\r\n  dueDate?: string;\r\n  project: OpHalResource;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/util/logger.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":74,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":85,"suggestions":[{"fix":{"range":[622,674],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":72,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":83,"suggestions":[{"fix":{"range":[751,802],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":72,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":84,"suggestions":[{"fix":{"range":[879,931],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":74,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":87,"suggestions":[{"fix":{"range":[1010,1064],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/util/logger.ts - Minimal structured logger with env-based levels\r\ntype Level = 'debug' | 'info' | 'warn' | 'error';\r\nconst ORDER: Level[] = ['debug','info','warn','error'];\r\nfunction cur(): Level {\r\n  const lvl = (globalThis as any).MCP_LOG_LEVEL; // Provided via global injection if desired\r\n  return (lvl as Level) || 'info';\r\n}\r\nfunction ok(l: Level){ return ORDER.indexOf(l) >= ORDER.indexOf(cur()); }\r\nfunction line(obj: Record<string, unknown>){ return JSON.stringify({ ts: new Date().toISOString(), ...obj }); }\r\nexport const log = {\r\n  debug(msg: string, extra?: Record<string, unknown>){ if (ok('debug')) {console.log(line({ level:'debug', msg, ...extra }));} },\r\n  info(msg: string, extra?: Record<string, unknown>){ if (ok('info')) {console.log(line({ level:'info', msg, ...extra }));} },\r\n  warn(msg: string, extra?: Record<string, unknown>){ if (ok('warn')) {console.warn(line({ level:'warn', msg, ...extra }));} },\r\n  error(msg: string, extra?: Record<string, unknown>){ if (ok('error')) {console.error(line({ level:'error', msg, ...extra }));} }\r\n};","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/util/op.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":11,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":11,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[562,564],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":13,"column":5,"nodeType":null,"messageId":"preferOptionalChain","endLine":13,"endColumn":43,"suggestions":[{"fix":{"range":[589,627],"text":"sentryCapture?.(e, ctx)"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":124,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":124,"endColumn":49,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4326,4327],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":207,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":207,"endColumn":46,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7612,7613],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":216,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":216,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7952,7954],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10822,10848],"text":"(json.message ?? json.error)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10849,10851],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":84,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":86,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10875,10877],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/util/op.ts\r\nimport { VERSION } from \"../constants/version\";\r\nimport { log } from \"./logger\";\r\n// Optional Sentry capture (loaded lazily to avoid mandatory dependency at runtime tests)\r\nlet sentryCapture: ((e: unknown, ctx?: Record<string, unknown>) => void) | null = null;\r\nasync function capture(e: unknown, ctx?: Record<string, unknown>) {\r\n  try {\r\n    if (!sentryCapture) {\r\n      // dynamic import to keep bundle lean if not used\r\n  const mod: any = await import(\"../observability/sentry\").catch(() => null);\r\n      sentryCapture = mod?.captureError || (() => {});\r\n    }\r\n    sentryCapture && sentryCapture(e, ctx);\r\n  } catch {\r\n    // swallow\r\n  }\r\n}\r\n\r\nexport type Json = Record<string, unknown> | unknown[] | string | number | boolean | null;\r\n\r\nexport interface Env {\r\n  OP_BASE_URL: string;\r\n  OP_TOKEN: string;\r\n  // Optional observability / hardening\r\n  SENTRY_DSN?: string;\r\n  SENTRY_TRACES_SAMPLE_RATE?: string;\r\n  SENTRY_SEND_PII?: string;\r\n  SENTRY_ENABLE_LOGS?: string;\r\n  ALLOWED_ORIGINS?: string; // comma-separated\r\n}\r\n\r\nexport type OpCollectionMeta = {\r\n  total?: number;\r\n  count?: number;\r\n  pageSize?: number;\r\n  offset?: number;\r\n  nextOffset?: number | null;\r\n};\r\n\r\nexport function toId(v: string | number): string {\r\n  return typeof v === \"number\" ? String(v) : v;\r\n}\r\n\r\nexport function joinUrl(base: string, path: string): string {\r\n  if (/^https?:\\/\\//.test(path)) {return path;}\r\n  const b = base.replace(/\\/+$/, \"\");\r\n  const p = path.replace(/^\\/+/, \"\");\r\n  return `${b}/${p}`;\r\n}\r\n\r\nexport function withQuery(u: string, params?: Record<string, unknown>): string {\r\n  if (!params) {return u;}\r\n  const url = new URL(u, \"http://dummy\");\r\n  for (const [k, v] of Object.entries(params)) {\r\n    if (v === undefined || v === null) {continue;}\r\n    // OpenProject expects JSON-encoded strings for filters/sortBy etc.\r\n    if (k === \"filters\" || k === \"sortBy\") {\r\n      const val = typeof v === \"string\" ? v : JSON.stringify(v);\r\n      url.searchParams.set(k, val);\r\n    } else {\r\n      url.searchParams.set(k, String(v));\r\n    }\r\n  }\r\n  // Drop dummy origin\r\n  return url.pathname + (url.search ? url.search : \"\");\r\n}\r\n\r\nfunction scrubHeaders(h: HeadersInit | undefined): HeadersInit | undefined {\r\n  if (!h) {return h;}\r\n  const out = new Headers(h as any);\r\n  out.delete(\"authorization\");\r\n  out.delete(\"Authorization\");\r\n  return out;\r\n}\r\n\r\nfunction baseAuthHeader(token: string): string {\r\n  // OpenProject API uses Basic with username 'apikey' and the API key as password.\r\n  const raw = `apikey:${token}`;\r\n  // Use TextEncoder for safe UTF-8 to base64 conversion\r\n  try {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(raw);\r\n    const binaryString = String.fromCharCode(...data);\r\n    return \"Basic \" + btoa(binaryString);\r\n  } catch (error) {\r\n    throw new Error(`Failed to encode authentication header: ${error instanceof Error ? error.message : String(error)}`);\r\n  }\r\n}\r\n\r\nexport type FetchOptions = {\r\n  method?: string;\r\n  headers?: HeadersInit;\r\n  body?: BodyInit | null;\r\n  // Optional query params to append\r\n  params?: Record<string, unknown>;\r\n  // Retry controls\r\n  retries?: number; // default 2\r\n  retryOn?: number[]; // default [429, 500, 502, 503, 504]\r\n};\r\n\r\nconst DEFAULT_RETRY = [429, 500, 502, 503, 504];\r\n\r\nexport async function opFetch<T = any>(\r\n  env: Env,\r\n  path: string,\r\n  opts: FetchOptions = {},\r\n): Promise<{ res: Response; json: T }> {\r\n  const base = env.OP_BASE_URL?.trim();\r\n  if (!base) {throw new Error(\"OP_BASE_URL not configured\");}\r\n  const token = env.OP_TOKEN?.trim() || (env as any).OP_API_KEY?.trim();\r\n  if (!token) {throw new Error(\"OP_TOKEN not configured (expected OP_TOKEN or OP_API_KEY)\");}\r\n\r\n  // Offline test stub: when using placeholder token value we synthesize minimal API responses\r\n  const offlineMode = token === 'test-api-key';\r\n  if (offlineMode) {\r\n    const synth = (body: any, status = 200) => {\r\n      const res = new Response(JSON.stringify(body), { status, headers: { 'content-type': 'application/hal+json' } });\r\n      return { res, json: body } as { res: Response; json: T };\r\n    };\r\n    // Normalize path (strip query)\r\n    const clean = path.split('?')[0];\r\n    // Simple routers\r\n    if (/^\\/api\\/v3\\/projects\\/(\\d+)$/.test(clean)) {\r\n      const id = clean.match(/projects\\/(\\d+)/)![1];\r\n      return synth({ id: Number(id), name: 'Test Project', identifier: 'test-project', status: 'active' });\r\n    }\r\n    if (/^\\/api\\/v3\\/projects\\/(\\d+)\\/work_packages$/.test(clean)) {\r\n      // Provide two sample work packages\r\n      const now = new Date();\r\n      const day = (d: number) => new Date(now.getTime() + d*86400000).toISOString().slice(0,10);\r\n      return synth({\r\n        _embedded: {\r\n          elements: [\r\n            {\r\n              id: 101,\r\n              subject: 'Initial Planning',\r\n              percentageDone: 80,\r\n              estimatedTime: 'PT40H',\r\n              spentTime: 'PT32H',\r\n              startDate: day(-14),\r\n              dueDate: day(-2),\r\n              status: { name: 'In Progress', isClosed: false },\r\n              type: { name: 'Task' },\r\n              assignee: { name: 'User One' },\r\n              _links: {\r\n                status: { href: '/api/v3/statuses/1' },\r\n                type: { href: '/api/v3/types/1' },\r\n                assignee: { href: '/api/v3/users/1' }\r\n              }\r\n            },\r\n            {\r\n              id: 102,\r\n              subject: 'Execution Phase',\r\n              percentageDone: 20,\r\n              estimatedTime: 'PT80H',\r\n              spentTime: 'PT8H',\r\n              startDate: day(-1),\r\n              dueDate: day(20),\r\n              status: { name: 'In Progress', isClosed: false },\r\n              type: { name: 'Task' },\r\n              assignee: { name: 'User Two' },\r\n              _links: {\r\n                status: { href: '/api/v3/statuses/1' },\r\n                type: { href: '/api/v3/types/1' },\r\n                assignee: { href: '/api/v3/users/2' }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        total: 2, count: 2, offset: 0, pageSize: 2\r\n      });\r\n    }\r\n    if (clean === '/api/v3/time_entries') {\r\n      return synth({\r\n        _embedded: {\r\n          elements: [\r\n            {\r\n              id: 201,\r\n              hours: 8,\r\n              spentOn: new Date().toISOString().slice(0,10),\r\n              user: { name: 'User One' },\r\n              project: { name: 'Test Project' },\r\n              workPackage: { subject: 'Initial Planning' },\r\n              _links: {\r\n                user: { href: '/api/v3/users/1' },\r\n                project: { href: '/api/v3/projects/1' },\r\n                workPackage: { href: '/api/v3/work_packages/101' }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    }\r\n    if (/^\\/api\\/v3\\/projects\\/(\\d+)\\/budgets$/.test(clean)) {\r\n      return synth({ _embedded: { elements: [ { id: 301, subject: 'Main Budget'} ] } });\r\n    }\r\n    if (clean === '/api/v3/statuses') {\r\n      return synth({ _embedded: { elements: [ { id: 1, name: 'In Progress', isClosed: false }, { id: 2, name: 'Closed', isClosed: true } ] } });\r\n    }\r\n    if (clean === '/api/v3/priorities') {\r\n      return synth({ _embedded: { elements: [ { id: 1, name: 'Normal' }, { id: 2, name: 'High' } ] } });\r\n    }\r\n    if (/^\\/api\\/v3\\/projects\\/(\\d+)\\/memberships$/.test(clean)) {\r\n      return synth({ _embedded: { elements: [ { id: 1, user: { id: 1, name: 'User One'} }, { id: 2, user: { id: 2, name: 'User Two'} } ] } });\r\n    }\r\n    if (/^\\/api\\/v3\\/users\\/(\\d+)$/.test(clean)) {\r\n      const id = clean.match(/users\\/(\\d+)/)![1];\r\n      return synth({ id: Number(id), name: `User ${id}` });\r\n    }\r\n    // Default generic ok response\r\n  return synth({ ok: true, path: clean });\r\n  }\r\n\r\n  // Egress allowlist: default allow only OP_BASE_URL host; can extend via MCP_EGRESS_ALLOW (comma list)\r\n  try {\r\n    const allowEnv = (globalThis as any).ENV?.MCP_EGRESS_ALLOW || (env as any).MCP_EGRESS_ALLOW;\r\n    const allowHosts = [new URL(base).host, ...(allowEnv ? String(allowEnv).split(',').map((s) => s.trim()).filter(Boolean) : [])];\r\n    // If path is absolute URL ensure it's in allowlist\r\n    if (/^https?:\\/\\//i.test(path)) {\r\n      const host = new URL(path).host;\r\n      if (!allowHosts.includes(host)) {\r\n        throw new Error(`egress_blocked: host ${host} not in allowlist`);\r\n      }\r\n    }\r\n  } catch (egressErr) {\r\n    if (egressErr instanceof Error && egressErr.message.startsWith('egress_blocked')) {throw egressErr;}\r\n    // If URL parsing fails, continue; downstream will surface meaningful errors.\r\n  }\r\n\r\n  const url = joinUrl(base, withQuery(path, opts.params));\r\n  const headers = new Headers({\r\n    Accept: \"application/hal+json; charset=utf-8\",\r\n    \"Accept-Encoding\": \"gzip, deflate, br\",\r\n    Authorization: baseAuthHeader(token),\r\n  \"User-Agent\": `openproject-mcp/${VERSION} (+mcp +webhooks +realtime)`,\r\n  });\r\n\r\n  // Merge provided headers (but keep our Authorization)\r\n  if (opts.headers) {\r\n    const headerObj = new Headers(opts.headers as any);\r\n    headerObj.forEach((v, k) => {\r\n      if (/^authorization$/i.test(k)) {return;} // do not allow override\r\n      headers.set(k, v);\r\n    });\r\n  }\r\n  // Default content-type if a plain JSON body is provided\r\n  const method = (opts.method ?? (opts.body ? \"POST\" : \"GET\")).toUpperCase();\r\n  if (opts.body && !(headers.has(\"content-type\") || headers.has(\"Content-Type\"))) {\r\n    if (typeof opts.body === \"string\" || opts.body instanceof Blob) {\r\n      // Keep as-is; caller can set content-type for multipart etc.\r\n    } else {\r\n      headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\r\n    }\r\n  }\r\n\r\n  const retries = opts.retries ?? 2;\r\n  const retryOn = opts.retryOn ?? DEFAULT_RETRY;\r\n\r\n  let attempt = 0;\r\n  let lastErr: unknown = null;\r\n\r\n  while (attempt <= retries) {\r\n    try {\r\n  const res = await fetch(url, { method, headers, body: opts.body ?? null });\r\n      if (retryOn.includes(res.status) && attempt < retries) {\r\n        const backoff = Math.min(1000 * Math.pow(2, attempt), 5000);\r\n        const jitter = Math.floor(Math.random() * 250);\r\n        await new Promise((r) => setTimeout(r, backoff + jitter));\r\n        attempt++;\r\n        continue;\r\n      }\r\n      let json: any = null;\r\n      const ct = res.headers.get(\"content-type\") || \"\";\r\n      if (ct.includes(\"application/json\")) {\r\n        json = await res.json();\r\n      } else if (ct.includes(\"application/hal+json\")) {\r\n        json = await res.json();\r\n      } else if (ct) {\r\n        // Fallback: try json\r\n        try {\r\n          json = await res.json();\r\n        } catch {\r\n          json = null;\r\n        }\r\n      }\r\n\r\n      if (!res.ok) {\r\n        // Surface upstream error details to caller—this proved vital during Inspector usage\r\n        const msg = (json && (json.message || json.error || JSON.stringify(json))) || `HTTP ${res.status}`;\r\n        const e = new Error(`OpenProject error: ${msg}`);\r\n        (e as any).status = res.status;\r\n        (e as any).body = json;\r\n        throw e;\r\n      }\r\n\r\n      // ✅ Correct type assertion placement (assert the whole object or json separately)\r\n  log.debug('opFetch_success', { url, status: res.status, offline: offlineMode });\r\n  return { res, json } as { res: Response; json: T };\r\n    } catch (e) {\r\n  lastErr = e;\r\n  log.warn('opFetch_retry', { url, attempt, error: e instanceof Error ? e.message : String(e) });\r\n      if (attempt >= retries) {break;}\r\n      attempt++;\r\n    }\r\n  }\r\n\r\n  const err = lastErr instanceof Error ? lastErr : new Error(String(lastErr));\r\n  const scrubbed = scrubHeaders(headers);\r\n  const headerObj: Record<string, string> = {};\r\n  if (scrubbed) {\r\n    new Headers(scrubbed).forEach((v, k) => {\r\n      headerObj[k] = v;\r\n    });\r\n  }\r\n  (err as any).request = { url, method, headers: headerObj };\r\n  log.error('opFetch_fail', { url, error: err.message });\r\n  // Best-effort capture\r\n  capture(err, { url, method });\r\n  throw err;\r\n}\r\n\r\nexport function parseCollectionMeta(body: any): OpCollectionMeta {\r\n  const total = typeof body?.total === \"number\" ? body.total : undefined;\r\n  const count = typeof body?.count === \"number\" ? body.count : undefined;\r\n  const pageSize = typeof body?.pageSize === \"number\" ? body.pageSize : undefined;\r\n  const offset = typeof body?.offset === \"number\" ? body.offset : undefined;\r\n  const nextOffset =\r\n    typeof total === \"number\" && typeof pageSize === \"number\" && typeof offset === \"number\"\r\n      ? (offset + pageSize < total ? offset + pageSize : null)\r\n      : undefined;\r\n  return { total, count, pageSize, offset, nextOffset };\r\n}\r\n\r\n// Small helpers for building HAL _links payloads\r\nexport const hal = {\r\n  project(id: string | number) {\r\n    return { href: `/api/v3/projects/${toId(id)}` };\r\n  },\r\n  type(id: string | number) {\r\n    return { href: `/api/v3/types/${toId(id)}` };\r\n  },\r\n  user(id: string | number) {\r\n    return { href: `/api/v3/users/${toId(id)}` };\r\n  },\r\n  status(id: string | number) {\r\n    return { href: `/api/v3/statuses/${toId(id)}` };\r\n  },\r\n  priority(id: string | number) {\r\n    return { href: `/api/v3/priorities/${toId(id)}` };\r\n  },\r\n  workPackage(id: string | number) {\r\n    return { href: `/api/v3/work_packages/${toId(id)}` };\r\n  },\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/utils/index.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/utils/index.ts - Centralized exports for utility functions\r\n\r\n// Note: formatting utilities removed as unused; keep exports lean\r\n\r\n// Re-export all validation utilities\r\nexport * from \"./validation.js\";\r\n\r\n// Re-export OpenProject API utilities (from existing util/op.ts)\r\nexport * from \"../util/op\";","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]},{"filePath":"/mnt/c/Users/AdamSandoval/dev/openproject-mcp/src/utils/validation.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.","line":0,"column":1,"nodeType":null,"messageId":"noStrictNullCheck","endLine":0,"endColumn":1},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":11,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":13,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5293,5295],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/utils/validation.ts - Input validation utilities for MCP tools\r\n\r\nimport { z } from \"zod\";\r\n\r\n/**\r\n * Common validation schemas for reuse across tools\r\n */\r\nexport const CommonSchemas = {\r\n  // Basic ID validation\r\n  id: z.number().int().positive(),\r\n  optionalId: z.number().int().positive().optional(),\r\n  \r\n  // String validation\r\n  nonEmptyString: z.string().min(1, \"Cannot be empty\"),\r\n  optionalString: z.string().optional(),\r\n  \r\n  // Pagination\r\n  pageSize: z.number().int().min(1).max(100).default(20),\r\n  offset: z.number().int().min(0).default(0),\r\n  \r\n  // Common OpenProject fields\r\n  subject: z.string().min(1, \"Subject is required\").max(255, \"Subject too long\"),\r\n  description: z.string().optional(),\r\n  lockVersion: z.number().int().min(0),\r\n  \r\n  // Date validation\r\n  isoDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Must be YYYY-MM-DD format\"),\r\n  optionalIsoDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Must be YYYY-MM-DD format\").optional(),\r\n  \r\n  // Boolean with string conversion\r\n  booleanString: z.union([\r\n    z.boolean(),\r\n    z.string().transform(val => val.toLowerCase() === \"true\")\r\n  ]).default(false),\r\n  \r\n  // Dry run parameter (common in many tools)\r\n  dryRun: z.boolean().default(false),\r\n};\r\n\r\n/**\r\n * Validation for OpenProject filters\r\n */\r\nexport const filterSchema = z.record(\r\n  z.string(),\r\n  z.object({\r\n    operator: z.string(),\r\n    values: z.array(z.string())\r\n  })\r\n);\r\n\r\n/**\r\n * Validation for sorting parameters\r\n */\r\nexport const sortSchema = z.array(z.object({\r\n  field: z.string(),\r\n  direction: z.enum([\"asc\", \"desc\"]).default(\"asc\")\r\n})).optional();\r\n\r\n/**\r\n * Project creation/update validation\r\n */\r\nexport const projectDataSchema = z.object({\r\n  name: CommonSchemas.nonEmptyString,\r\n  identifier: z.string().min(1).max(100).regex(/^[a-z0-9_-]+$/, \r\n    \"Identifier must contain only lowercase letters, numbers, underscores, and hyphens\"),\r\n  description: CommonSchemas.optionalString,\r\n  homepage: z.string().url().optional(),\r\n  public: CommonSchemas.booleanString,\r\n  parentId: CommonSchemas.optionalId,\r\n  status: z.enum([\"active\", \"archived\", \"closed\"]).optional(),\r\n});\r\n\r\n/**\r\n * Work package creation/update validation\r\n */\r\nexport const workPackageDataSchema = z.object({\r\n  subject: CommonSchemas.subject,\r\n  description: CommonSchemas.optionalString,\r\n  typeId: CommonSchemas.id,\r\n  statusId: CommonSchemas.optionalId,\r\n  priorityId: CommonSchemas.optionalId,\r\n  assigneeId: CommonSchemas.optionalId,\r\n  responsibleId: CommonSchemas.optionalId,\r\n  versionId: CommonSchemas.optionalId,\r\n  parentId: CommonSchemas.optionalId,\r\n  startDate: CommonSchemas.optionalIsoDate,\r\n  dueDate: CommonSchemas.optionalIsoDate,\r\n  estimatedTime: z.string().optional(),\r\n  percentDone: z.number().int().min(0).max(100).optional(),\r\n  // Custom fields (flexible)\r\n  customFields: z.record(z.string(), z.any()).optional(),\r\n});\r\n\r\n/**\r\n * Time entry validation\r\n */\r\nexport const timeEntryDataSchema = z.object({\r\n  workPackageId: CommonSchemas.id,\r\n  projectId: CommonSchemas.optionalId,\r\n  hours: z.number().positive().max(24, \"Cannot log more than 24 hours\"),\r\n  comment: CommonSchemas.optionalString,\r\n  spentOn: CommonSchemas.isoDate,\r\n  activityId: CommonSchemas.optionalId,\r\n});\r\n\r\n/**\r\n * User search validation\r\n */\r\nexport const userSearchSchema = z.object({\r\n  q: CommonSchemas.optionalString,\r\n  status: z.enum([\"active\", \"locked\", \"invited\", \"registered\"]).optional(),\r\n  pageSize: CommonSchemas.pageSize,\r\n  offset: CommonSchemas.offset,\r\n});\r\n\r\n/**\r\n * File attachment validation\r\n */\r\nexport const attachmentSchema = z.object({\r\n  workPackageId: CommonSchemas.id,\r\n  fileName: CommonSchemas.nonEmptyString,\r\n  description: CommonSchemas.optionalString,\r\n  dataBase64: z.string().min(1, \"File data is required\"),\r\n});\r\n\r\n/**\r\n * Validation helper functions\r\n */\r\nexport class ValidationError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public field?: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = \"ValidationError\";\r\n  }\r\n}\r\n\r\n/**\r\n * Validate and transform input using a Zod schema\r\n */\r\nexport function validateInput<T>(\r\n  schema: z.ZodSchema<T>,\r\n  input: unknown,\r\n  context?: string\r\n): T {\r\n  try {\r\n    return schema.parse(input);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const firstIssue = error.issues[0];\r\n      if (!firstIssue) {\r\n        throw new ValidationError(\"Unknown validation error\", \"\", \"unknown\");\r\n      }\r\n      const field = firstIssue.path.join(\".\");\r\n      const message = `${field ? `${field}: ` : \"\"}${firstIssue.message}`;\r\n      throw new ValidationError(\r\n        context ? `${context}: ${message}` : message,\r\n        field,\r\n        firstIssue.code\r\n      );\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Validate ID parameter (common use case)\r\n */\r\nexport function validateId(value: unknown, fieldName = \"id\"): number {\r\n  return validateInput(\r\n    CommonSchemas.id,\r\n    value,\r\n    `Invalid ${fieldName}`\r\n  );\r\n}\r\n\r\n/**\r\n * Validate pagination parameters\r\n */\r\nexport function validatePagination(input: any): {\r\n  pageSize: number;\r\n  offset: number;\r\n} {\r\n  const result = validateInput(\r\n    z.object({\r\n      pageSize: CommonSchemas.pageSize,\r\n      offset: CommonSchemas.offset,\r\n    }),\r\n    input || {},\r\n    \"Pagination parameters\"\r\n  );\r\n  \r\n  return {\r\n    pageSize: result.pageSize || 100,\r\n    offset: result.offset || 0\r\n  };\r\n}\r\n\r\n/**\r\n * Validate environment variables\r\n */\r\nexport function validateEnvironment(env: any): {\r\n  OP_BASE_URL: string;\r\n  OP_TOKEN: string;\r\n  ALLOWED_ORIGINS?: string;\r\n} {\r\n  const schema = z.object({\r\n    OP_BASE_URL: z.string().url(\"Must be a valid URL\"),\r\n    OP_TOKEN: z.string().min(1, \"API token is required\"),\r\n    ALLOWED_ORIGINS: z.string().optional(),\r\n    SENTRY_DSN: z.string().optional(),\r\n    SENTRY_TRACES_SAMPLE_RATE: z.string().optional(),\r\n    SENTRY_SEND_PII: z.string().optional(),\r\n    SENTRY_ENABLE_LOGS: z.string().optional(),\r\n  });\r\n\r\n  const result = validateInput(\r\n    schema,\r\n    env,\r\n    \"Environment configuration\"\r\n  );\r\n\r\n  return {\r\n    OP_BASE_URL: result.OP_BASE_URL,\r\n    OP_TOKEN: result.OP_TOKEN,\r\n    ALLOWED_ORIGINS: result.ALLOWED_ORIGINS\r\n  };\r\n}\r\n\r\n/**\r\n * Sanitize HTML content (basic)\r\n */\r\nexport function sanitizeHtml(html: string): string {\r\n  return html\r\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\")\r\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, \"\")\r\n    .replace(/javascript:/gi, \"\")\r\n    .replace(/on\\w+\\s*=/gi, \"\");\r\n}\r\n\r\n/**\r\n * Validate and sanitize description fields\r\n */\r\nexport function sanitizeDescription(description?: string): string | undefined {\r\n  if (!description) {return undefined;}\r\n  \r\n  const trimmed = description.trim();\r\n  return trimmed ? sanitizeHtml(trimmed) : undefined;\r\n}","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"semi","url":"https://eslint.style/rules/semi"}}]}}]}]
